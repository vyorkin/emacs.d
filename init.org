#+title: Emacs configuration file
#+author: Vasiliy Yorkin
#+babel: :cache yes
#+property: header-args :tangle yes
#+startup: overview

* Credits

Inspired by [[https://github.com/freetonik/emacs-dotfiles][freetonik's]] setup.

* Warnings

This config is not intended to be used by anyone other than me.
I would not recommend using this configuration as-is.

* Setup
** Prerequisites

Install [[https://github.com/rizsotto/Bear][bear]]:

#+begin_src sh :tangle no
sudo apt-get install bear
#+end_src

Install =wordnet=, for example on Ubuntu:

#+begin_src sh :tangle no
sudo apt install wordnet
#+end_src

Install [[https://github.com/mantoni/eslint_d.js/][eslint_d]] eslint server, it is used as
~flycheck-javascript-eslint-executable~:

#+begin_src sh :tangle no
npm i -g eslint_d
#+end_src

Install =pdf-tools=:

#+begin_src sh :tangle no
M-x pdf-tools-install RET
#+end_src

Check if =pdf-tools= are working:

#+begin_src sh :tangle no
M-x pdf-info-check-epdfinfo RET
#+end_src

Clone the repo:

#+begin_src sh :tangle no
git clone --recurse-submodules -j8 --depth=1 https://github.com/vyorkin/emacs.d
#+end_src

Make a backup of your old =.emacs.d=:

#+begin_src sh :tangle no
mv ~/.emacs.d ~/.emacs.d-bak
#+end_src

- Symlink =init.org= to =~/.emacs.d/init.org=
- Symlink =init.el= to =~/.emacs.d/init.el=

#+begin_src sh :tangle no
ln -sf $(pwd)/init.org ~/.emacs.d/init.org
ln -sf $(pwd)/init.el ~/.emacs.d/init.el
#+end_src

On the first run Emacs will install some packages. It's best to restart Emacs after that process is done for the first time.

There is no reason to track the =init.el= that is generated; by running the following command =git= will not bother tracking it:

#+begin_src sh :tangle no
git update-index --assume-unchanged init.el
#+end_src

If one wishes to make changes to the repo-version of =init.el= start tracking again with:

#+begin_src sh :tangle no
git update-index --no-assume-unchanged init.el
#+end_src

When this configuration is loaded for the first time, the
=init.el= is the file that is loaded. It looks like this:

#+begin_src emacs-lisp :tangle no
;; We can't tangle without org!
(require 'org)
;; Open the configuration
(find-file (concat user-emacs-directory "init.org"))
;; Tangle it
(org-babel-tangle)
;; Load it
(load-file (concat user-emacs-directory "init.el"))
;; Finally byte-compile it
(byte-compile-file (concat user-emacs-directory "init.el"))
#+end_src

Check this =init.org= and run ~M-x all-the-icons-install-fonts~
if [[https://github.com/domtronn/all-the-icons.el][all-the-icons]] package is enabled.

* Known issues

This is a known issue with emacs 28:

#+begin_src emacs-lisp :tangle no
Eager macro-expansion failure: (wrong-number-of-arguments (3 . 4) 2) [2 times]
define-obsolete-variable-alias: Wrong number of arguments: (3 . 4), 2
#+end_src

There a number of PRs that fixes it as of 14/02/2021. Update
packages after some time to see if it is fixed.

* Startup timer

#+begin_src emacs-lisp
(add-hook 'emacs-startup-hook
  (lambda ()
    (message
     "Emacs ready in %s with %d GC's."
     (format
      "%.2f seconds"
      (float-time (time-subtract after-init-time before-init-time)))
     gcs-done)))
#+end_src

* Config
** Intro

[[https://www.emacswiki.org/emacs/LexicalBinding][Lexical binding]] for the init-file is needed, it can be specified in the header. This is the first line of the actual configuration.

#+begin_src emacs-lisp
;;; -*- lexical-binding: t -*-
#+end_src

Make startup faster by reducing the frequency of garbage
collection. The default is 800 kilobytes. Measured in bytes.
These are the first lines of the actual configuration.

#+begin_src emacs-lisp
(setq gc-cons-threshold most-positive-fixnum)
#+end_src

In noninteractive sessions, prioritize non-byte-compiled source
files to prevent the use of stale byte-code.

#+begin_src emacs-lisp
(setq load-prefer-newer noninteractive)
#+end_src

** Customization

Let's keep all customizations in one place.

*** Location

Location name and coordinates.

#+begin_src emacs-lisp
(defvar my/lat 55.84)
(defvar my/lon 37.34)
(defvar my/location "Moscow, RU")
#+end_src

** Utils

Utility functions.

#+begin_src emacs-lisp
(defun my/emacs-path (path)
  "Expands `path` with Emacs home directory."
  (expand-file-name path user-emacs-directory))

(defun my/tmp-path (path)
  "Expand `path` with Emacs temporary directory."
  (my/emacs-path (format "tmp/%s" path)))

(defun my/lisp-path (path)
  "Expand `path` with Emacs `/lisp` directory."
  (my/emacs-path (format "lisp/%s" path)))
#+end_src

** Auto-tangling (disabled)

I don’t use auto-tangling since I don’t want to tangle every
time I save my ~init.org~. Instead I call ~org-babel-tangle~
manually once at the very end of making changes.

Tangle and compile this file on save automatically:

#+begin_src emacs-lisp :tangle no
(defun tangle-init ()
  "If the current buffer is 'init.org' the code-blocks are
tangled, and the tangled file is compiled."
  (when (equal (buffer-file-name)
               (file-truename (concat user-emacs-directory "init.org")))
    ;; Avoid running hooks when tangling.
    (let ((prog-mode-hook nil))
      (org-babel-tangle)
      (byte-compile-file (concat user-emacs-directory "init.el")))))

(add-hook 'after-save-hook 'tangle-init)
#+end_src
** Package management
*** Init

Initialize package and add package archives.

#+begin_src emacs-lisp
(require 'package)
#+end_src

Tangle the following line if you have TLS-related issues:

#+begin_src emacs-lisp :tangle no
(setq gnutls-algorithm-priority "NORMAL:-VERS-TLS1.3")
#+end_src

#+begin_src emacs-lisp
;; Try to uncomment this if you have TLS-related issues
;; (setq gnutls-algorithm-priority "NORMAL:-VERS-TLS1.3")

(let* ((no-ssl (and (memq system-type '(windows-nt ms-dos))
                    (not (gnutls-available-p))))
    (proto (if no-ssl "http" "https")))
    (add-to-list 'package-archives (cons "melpa" (concat proto "://melpa.org/packages/")) t))
#+end_src

It is ok to use both ~package-initialize~ and ~use-package~ for a well behaved
package: ~package-initialize~ will not load the whole package, but only autoload
functions selected by the package author.

#+begin_src emacs-lisp
(package-initialize)
#+end_src

*** Use-package
**** Install

Install =use-package=.

#+begin_src emacs-lisp
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))

(eval-when-compile (require 'use-package))
#+end_src

**** Config

Install missing packages automatically if not already present on the system and
be less verbose.

#+begin_src emacs-lisp
(setq
 use-package-always-ensure t
 use-package-verbose nil)
#+end_src

**** Statistics gathering (disabled)

Enable tangling and run the ~M-x use-package-report~ command to
see the results. Read the [[https://github.com/jwiegley/use-package#gathering-statistics][docs]] for more info.

#+begin_src emacs-lisp :tangle no
(use-package-compute-statistics)
#+end_src
*** Quelpa

Setup [[https://github.com/quelpa/quelpa][quelpa]].

#+begin_src emacs-lisp
(if (require 'quelpa nil t)
  ;; Prevent quelpa from doing anyting that requires network connection.
  (setq
   quelpa-update-melpa-p nil    ; Don't update MELPA git repo
   quelpa-checkout-melpa-p nil  ; Don't clone MELPA git repo
   quelpa-upgrade-p nil         ; Don't try to update packages automatically
   quelpa-self-upgrade-p nil)   ; Don't upgrade quelpa automatically

(unless (package-installed-p 'quelpa)
  (with-temp-buffer
    (url-insert-file-contents "https://github.com/quelpa/quelpa/raw/master/quelpa.el")
    (eval-buffer)
    ;; Comment/uncomment line below to disable/enable quelpa auto-upgrade.
    (quelpa-self-upgrade))))
#+end_src

Install =use-package= and the =quelpa= handler.

#+begin_src emacs-lisp
(quelpa
 '(quelpa-use-package
   :fetcher github
   :repo "quelpa/quelpa-use-package"))
(require 'quelpa-use-package)
#+end_src

Advice setting ~:ensure nil~ for =use-package= + =quelpa=.

#+begin_src emacs-lisp
(quelpa-use-package-activate-advice)
#+end_src
*** Use-package plugins

All credit to [[https://github.com/a13][a13]].

Works as ~:custom~ keyword, but instead of a value takes update function or the
second (the first is the original one) argument to the default updater.

#+begin_src emacs-lisp
(use-package use-package-custom-update
 :quelpa
 (use-package-custom-update
   :repo "a13/use-package-custom-update"
   :fetcher github
   :version original))
#+end_src

~:secret~ keyword for =use-package=.

#+begin_src emacs-lisp
(use-package use-package-secrets
 :custom
 (use-package-secrets-directories '("~/.emacs.d/secrets"))
 :quelpa
 (use-package-secrets
   :repo "a13/use-package-secrets"
   :fetcher github
   :version original))
#+end_src

** System shell env

Pass system shell environment to Emacs. This is important primarily for shell
inside Emacs, but also things like Org mode export to Tex PDF don't work, since
it relies on running external command =pdflatex=, which is loaded from =PATH=.
Also this is required for [[https://github.com/jwiegley/use-package#use-package-ensure-system-package][use-package-ensure-system-package]] extension.

#+begin_src emacs-lisp
(use-package exec-path-from-shell
 :commands
 (exec-path-from-shell-copy-envs
  exec-path-from-shell-initialize)
 :init
 (setq exec-path-from-shell-check-startup-files nil)
 :config
 (exec-path-from-shell-copy-envs '("WAKATIME_API_KEY"))
 (when (memq window-system '(mac ns x))
   (exec-path-from-shell-initialize)))
#+end_src

** Warnings

Decrease the =obsolete= warnings annoyance level.

#+begin_src emacs-lisp
(setq byte-compile-warnings '(not obsolete))
#+end_src

This helps to get rid of =functions might not be defined at runtime= warnings.
See [[https://github.com/jwiegley/use-package/issues/590][this issue]] for details.

#+begin_src emacs-lisp
(eval-when-compile
  (setq use-package-expand-minimally byte-compile-current-file))
#+end_src

Suppress ~ad-handle-definition~ warnings.

#+begin_src emacs-lisp
(setq ad-redefinition-action 'accept)
#+end_src
** Defaults
*** Backups & lock files

Don't create lock files.

#+begin_src emacs-lisp
(setq create-lockfiles nil)
#+end_src

I don't care about auto save and backup files.
Also I don't like distracting alarms.

#+begin_src emacs-lisp
(setq
 make-backup-files nil        ; disable backup files
 auto-save-list-file-name nil ; disable .saves files
 auto-save-default nil        ; disable auto saving
 ring-bell-function 'ignore)  ; turn off alarms completely
#+end_src

*** Performance

Disable bidirectional text for a tiny performance boost.

#+begin_src emacs-lisp
(setq-default bidi-display-reordering nil)
#+end_src

Update UI less frequently (disabled).

#+begin_src emacs-lisp :tangle no
(setq
 idle-update-delay 2
 jit-lock-defer-time 0
 jit-lock-stealth-time 0.2
 jit-lock-stealth-verbose nil)
#+end_src
*** Misc

Use =y/n= instead of =yes/no=.

#+begin_src emacs-lisp
(fset 'yes-or-no-p 'y-or-n-p)
#+end_src

Don't prompt for non existent name when creating new buffers.

#+begin_src emacs-lisp
(setq-default confirm-nonexistent-file-or-buffer t)
#+end_src

Enable =recentf-mode= and remember a lot of files.

#+begin_src emacs-lisp
(setq
 recentf-auto-cleanup 'never
 recentf-max-menu-items 0
 recentf-max-saved-items 300
 recentf-filename-handlers '(file-truename abbreviate-file-name))

(recentf-mode 1)
#+end_src

Automatically save place in each file.

#+begin_src emacs-lisp
(setq
 save-place-forget-unreadable-files t
 save-place-limit 400)

(save-place-mode 1)
#+end_src

** Location

Set the location name and coordinates.

#+begin_src emacs-lisp
(setq
 calendar-location-name my/location
 calendar-latitude my/lat
 calendar-longitude my/lon)
#+end_src
** Builtin
**** Imports

#+begin_src emacs-lisp
(require 'color)
#+end_src

**** Files

On save/write file:
- Automatically delete trailing whitespace.
- Silently put a newline at the end of file if there isn't already one there.

#+begin_src emacs-lisp
(use-package files
  :ensure nil
  :preface
  (defun my/files/setup ()
    (add-hook 'before-save-hook 'delete-trailing-whitespace))
  :commands
  (generate-new-buffer
   executable-find
   file-name-base
   file-name-extension)
  :custom
  (require-final-newline t)
  :hook
  (prog-mode . my/files/setup))
#+end_src

**** Reverting

Diminish [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Autorevert.html#Autorevert][autorevert]] mode.

#+begin_src emacs-lisp
(use-package autorevert
 :ensure nil
 :custom
 ;; Don't generate any messages whenever a buffer is reverted
 (auto-revert-verbose nil)
 ;; Operate only on file-visiting buffers
 (global-auto-revert-non-file-buffers t)
 :diminish auto-revert-mode)
#+end_src

**** Uniquify

The =forward= buffer name style includes part of the file's directory
name at the beginning of the buffer name. Using this method, buffers
visiting the files =/u/rms/tmp/Makefile= and
=/usr/projects/hooy/Makefile= would be named =‘tmp/Makefile’= and
=‘hooy/Makefile’=.

#+begin_src emacs-lisp
(use-package uniquify
 :ensure nil
 :custom
 ;; use "foo/bar/qux"
 (uniquify-buffer-name-style 'forward))
#+end_src

**** History

Many editors (e.g. Vim) have the feature of saving minibuffer
history to an external file after exit. This package provides
the same feature in Emacs. When set up, it saves recorded
minibuffer histories to a file (=~/.emacs-history= by default).

#+begin_src emacs-lisp
(use-package savehist
  :ensure nil
  :custom
  (savehist-additional-variables
   '(kill-ring
     ;; search entries
     search-ring
     regexp-search-ring))
  ;; save every minute
  (savehist-autosave-interval 60)
  (savehist-save-minibuffer-history t)
  :init
  (savehist-mode 1))
#+end_src

**** Frame

- Disable blinking cursor.
- Disable suspending on =C-z=.

#+begin_src emacs-lisp
(use-package frame
 :ensure nil
 :config
 (blink-cursor-mode 0)
 :bind
 ("C-z" . nil))
#+end_src

**** Delsel

=C-c C-g= always quits minibuffer.

#+begin_src emacs-lisp
(use-package delsel
 :ensure nil
 :bind
 ("C-c C-g" . minibuffer-keyboard-quit))
#+end_src

**** Simple

#+begin_src emacs-lisp
(use-package simple
  :ensure nil
  :diminish
  ((visual-line-mode . " ↩")
   (auto-fill-function . " ↵"))
  :bind
  ;; remap ctrl-w/ctrl-h
  (("C-c h" . help-command)
   ("C-x C-k" . kill-region)
   ("C-h" . delete-backward-char)))
#+end_src

**** VC hooks

#+begin_src emacs-lisp
(use-package vc-hooks
  :ensure nil
  :config
  (setq
   vc-follow-symlinks t
   vc-make-backup-files nil))
#+end_src

**** Prog mode

Prettify symbols.

#+begin_src emacs-lisp
(use-package prog-mode
 :ensure nil
 :commands
 (global-prettify-symbols-mode)
 :init
 (setq prettify-symbols-unprettify-at-point 'right-edge)
 :config
 ;; convert certain words into symbols, e.g. lambda becomes λ.
 (global-prettify-symbols-mode t))
#+end_src

**** IBuffer

Use the ~ibuffer~ in place of the default ~list-buffers~
command. This provides tremendous amount of additional
functionality in terms of filtering, grouping, and acting upon
the listed buffers. Also, it opens the list of buffers in the
same window.

#+begin_src emacs-lisp
(use-package ibuffer
 :ensure nil
 :bind
 ;; Set all global list-buffers bindings to use ibuffer
 ([remap list-buffers] . ibuffer))
#+end_src

**** Mule

#+begin_src emacs-lisp
(use-package mule
 :commands
 (set-terminal-coding-system)
 :ensure nil
 :config
 (prefer-coding-system 'utf-8)
 (set-terminal-coding-system 'utf-8)
 (set-language-environment "UTF-8"))
#+end_src

**** ETags

Setup [[https://www.emacswiki.org/emacs/EmacsTags][Emacs tags]].

#+begin_src emacs-lisp
(use-package etags
 :ensure nil
 :custom
 ;; Don't add a new tags to the current list.
 ;; Always start a new list.
 (tags-add-tables nil))
#+end_src

**** Man

#+begin_src emacs-lisp
(use-package man
 :ensure nil
 :custom-face
 (Man-overstrike ((t (:inherit font-lock-type-face :bold t))))
 (Man-underline ((t (:inherit font-lock-keyword-face :underline t)))))
#+end_src

**** Calendar

#+begin_src emacs-lisp
(use-package calendar
 :ensure nil
 :custom
 (calendar-week-start-day 1))
#+end_src

**** Face remap

#+begin_src emacs-lisp
(use-package face-remap
 :commands
 (buffer-face-mode-face
  face-remap-add-relative
  buffer-face-mode)
 :ensure nil
 :diminish buffer-face-mode)
#+end_src

**** CC mode

Note that ".m" conflicts with =mercury-mode=.

#+begin_src emacs-lisp
(use-package cc-mode
 :ensure nil
 :config
 ;; (add-to-list 'auto-mode-alist '("\\.m\\'" . objc-mode))
 (add-to-list 'auto-mode-alist '("\\.mm\\'" . objc-mode)))
#+end_src

**** Compile

Kill compilation process before starting another, save all
buffers on =compile=, scroll to the first compilation error
automatically.

#+begin_src emacs-lisp
(use-package compile
  :custom
  (compilation-always-kill t)
  (compilation-ask-about-save nil)
  (compilation-scroll-output t)
  :init
  (make-variable-buffer-local 'compile-command)
  (put 'compile-command 'safe-local-variable 'stringp))
#+end_src

**** Shell

Hide the "Indentation setup for shell type sh" message in the
minibuffer.

#+begin_src emacs-lisp
(advice-add
 'sh-set-shell :around
 (lambda (orig-fun &rest args)
   (let ((inhibit-message t))
     (apply orig-fun args))))
#+end_src
** UI
*** Basics

#+begin_src emacs-lisp
(setq
 inhibit-startup-screen t ; Don't show splash screen
 use-dialog-box nil       ; Disable dialog boxes
 use-file-dialog nil)     ; Disable file dialog
#+end_src

*** Titlebar

Make titlebar transparent.

#+begin_src emacs-lisp
(when (memq window-system '(mac ns))
  (add-to-list 'default-frame-alist '(ns-appearance . dark)) ;; {light, dark}
  (add-to-list 'default-frame-alist '(ns-transparent-titlebar . t)))
#+end_src

*** Scroll

More procedural scrolling.

#+begin_src emacs-lisp
(setq
 auto-window-vscroll nil
 hscroll-margin 5
 hscroll-step 5
 scroll-conservatively 101
 scroll-margin 0
 scroll-preserve-screen-position t)

(setq-default
 scroll-down-aggressively 0.01
 scroll-up-aggressively 0.01)
#+end_src

*** UI elements

Hide toolbar and scrollbars.

#+begin_src emacs-lisp
(tool-bar-mode -1)
(scroll-bar-mode -1)
(when (fboundp 'horizontal-scroll-bar-mode)
  (horizontal-scroll-bar-mode -1))
#+end_src

I generally prefer to hide the menu bar, but doing this on OS X simply makes it
update unreliably in GUI frames, so we make an exception.

#+begin_src emacs-lisp
(if (eq system-type 'darwin)
    (add-hook 'after-make-frame-functions
              (lambda (frame)
                (set-frame-parameter frame 'menu-bar-lines
                                     (if (display-graphic-p frame) 1 0))))
  (when (fboundp 'menu-bar-mode)
    (menu-bar-mode -1)))
#+end_src

Don't [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Blinking.html][blink matching paren]], it's too distracting.

#+begin_src emacs-lisp
(setq-default blink-matching-paren nil)
#+end_src

*** Cursor

Hide cursor in inactive windows.

#+begin_src emacs-lisp
(setq-default cursor-in-non-selected-windows nil)
#+end_src

- Display vertical bar cursor with default width.
- Draw block cursor as wide as the glyph under it.

#+begin_src emacs-lisp
(setq-default
 cursor-type 'bar
 x-stretch-cursor t)
#+end_src

Show full path in the title bar.

#+begin_src emacs-lisp
(setq-default frame-title-format "%b (%f)")
#+end_src

Don't implicitly resize the frame's display area in order to
preserve the number of columns or lines the frame displays when
changing font, menu bar, tool bar, internal borders, fringes or
scroll bars. Read [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Implied-Frame-Resizing.html][this]] for more info.

#+begin_src emacs-lisp
(setq-default frame-inhibit-implied-resize t)
#+end_src

*** Fringe

Set fringe size.

#+begin_src emacs-lisp
(fringe-mode '(12 . 12))
#+end_src

Setup fringes on both sides and display an indicator for buffer
boundaries on the left side. Display fringes outside margins to
have the padding on the inside.

#+begin_src emacs-lisp
(setq-default
 fringes-outside-margins t
 left-fringe-width 8
 right-fringe-width 8
 indicate-buffer-boundaries 'left)
#+end_src

Remove continuation arrow on right fringe.

#+begin_src emacs-lisp
(setq-default
 fringe-indicator-alist
 (delq (assq 'continuation fringe-indicator-alist) fringe-indicator-alist))
#+end_src

*** Window-divider

Hide the =window-divider= (a line separating windows).

#+begin_src emacs-lisp
(when (boundp 'window-divider-mode)
  (setq window-divider-default-places t
        window-divider-default-bottom-width 0
        window-divider-default-right-width 0)
  (window-divider-mode +1))
#+end_src

*** Line-spacing

Non-zero values for =line-spacing= can mess up ansi-term and co, so we
zero it explicitly in those cases.

#+begin_src emacs-lisp
(add-hook
 'term-mode-hook
 (lambda () (setq line-spacing 0)))
#+end_src

Highlight parens.

#+begin_src emacs-lisp
(setq show-paren-style 'parenthesis)
(show-paren-mode 1)
#+end_src

Treat an Emacs region much like a typical text selection outside of Emacs.

#+begin_src emacs-lisp
(setq delete-selection-mode t)
#+end_src

Set left and right margins for every window.

#+begin_src emacs-lisp
(setq-default
 left-margin-width 1
 right-margin-width 1)
#+end_src

*** Startup

Start maximized (disabled).

#+begin_src emacs-lisp :tangle no
(toggle-frame-maximized)
#+end_src

*** Mode line

Turn-off tooltips on cursor hover-over.

#+begin_src emacs-lisp
(setq mode-line-default-help-echo nil)
#+end_src

Display only line and column in a mode-line.

#+begin_src emacs-lisp
(setq
 mode-line-position
 '((line-number-mode ("%l" (column-number-mode ":%c")))))
#+end_src

*** Time

#+begin_src emacs-lisp
(use-package time
  :ensure nil
  :custom
  (display-time-default-load-average nil)
  (display-time-24hr-format t)
  :config
  (display-time-mode t))
#+end_src

*** Font
**** Font faces

Font faces configuration.

#+begin_src emacs-lisp
(use-package faces
  :ensure nil
  :custom
  (face-font-family-alternatives
   '(("JetBrains Mono" "Hack" "Consolas" "Monaco" "Monospace")))
  :init
  (set-face-attribute
   'default nil
   :family (caar face-font-family-alternatives)
   :weight 'regular
   :height 160
   :width 'semi-condensed)
  (set-fontset-font
   "fontset-default"
   'cyrillic
   (font-spec :registry "iso10646-1" :script 'cyrillic)))
#+end_src

**** Font lock

Try to speed-up =font-lock-mode=.

#+begin_src emacs-lisp
(setq
 font-lock-maximum-decoration
 '((c-mode . 2) (c++-mode . 1) (t . 1)))

(setq font-lock-support-mode 'jit-lock-mode)
(setq
 jit-lock-stealth-time 16
 jit-lock-defer-contextually t
 jit-lock-stealth-nice 0.5)
#+end_src

** Editor
*** Customizations

I don't use the customizations UI. Anyway, I keep those automated
customizations in a [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Saving-Customizations.html][separate file]]. The ~'noerror~ argument passed to
load prevents errors if the file doesn’t exist.

#+begin_src emacs-lisp
(setq custom-file (my/emacs-path "custom.el"))
(load custom-file 'noerror)
#+end_src
*** Basics

Some basic things.

#+begin_src emacs-lisp
(setq
 ;; sentences should end in one space
 sentence-end-double-space nil
 ;; empty scratch buffer
 initial-scratch-message nil
 ;; show keystrokes right away,
 ;; don't show the message in the scratch buffer
 echo-keystrokes 0.1
 ;; disable native fullscreen support
 ns-use-native-fullscreen nil)
#+end_src
*** Minibuffer

Give some more room to the minibuffer.

#+begin_src emacs-lisp
(setq
 max-mini-window-height 0.3
 resize-mini-windows 'grow-only)
#+end_src

Enable recursive minibuffers and
keep the point out of the minibuffer.

#+begin_src emacs-lisp
(setq
 ;; allow minibuffer commands in the minibuffer
 enable-recursive-minibuffers t
 ;; keep the point out of the minibuffer
 minibuffer-prompt-properties
 '(read-only t point-entered minibuffer-avoid-prompt face minibuffer-prompt))
#+end_src

Auto executable scripts.

#+begin_src emacs-lisp
(add-hook 'after-save-hook #'executable-make-buffer-file-executable-if-script-p)
#+end_src
*** Tabs & spaces

- Use spaces instead of tabs everywhere.
- One tab is 2 spaces.

#+begin_src emacs-lisp
(setq-default
 indent-tabs-mode nil
 tab-width 2)
#+end_src

Display line and column numbers in the mode-line.

#+begin_src emacs-lisp
(setq
  line-number-mode t
  column-number-mode t)
#+end_src

*** Line wrapping

Long lines will show a continuation character in the right
margin at the window’s edge to indicate that one can scroll to
see the rest.

#+begin_src emacs-lisp
(setq-default truncate-lines t)
#+end_src

Break line at ~N~ characters.

#+begin_src emacs-lisp
(setq-default fill-column 64)
#+end_src

Enable automatic line breaking for all text mode buffers.

#+begin_src emacs-lisp
(add-hook 'text-mode-hook 'turn-on-auto-fill)
#+end_src

Always wrap lines.

#+begin_src emacs-lisp :tangle no
;; (global-visual-line-mode)
#+end_src

** Benchmarking

Usage:

- ~M-x benchmark-init/show-durations-tabulated~
– ~M-x benchmark-init/show-durations-tree~

#+begin_src emacs-lisp
(use-package benchmark-init
 :hook
 ;; To disable collection of benchmark data after init is done.
 (after-init . benchmark-init/deactivate))
#+end_src

** Theme
*** Base-16 themes

#+begin_src emacs-lisp
(use-package base16-theme
  :config
  ;; (load-theme 'base16-default-dark t)
  (load-theme 'base16-grayscale-dark t)
  ;; (load-theme 'base16-grayscale-light t)
  ;; (load-theme 'base16-gruvbox-light-hard t)
  ;; (load-theme 'base16-material-palenight t) ;; ****
  ;; (load-theme 'base16-rebecca t)
  ;; (load-theme 'base16-pop t)
  ;; (load-theme 'base16-tomorrow-night t)
  ;; (load-theme 'base16-twilight t)
  ;; (load-theme 'base16-irblack t)
#+end_src

~base16-chalk~ + customizations.

#+begin_src emacs-lisp :tangle no
(load-theme 'base16-chalk t)
#+end_src

#+begin_src emacs-lisp :tangle no
(custom-set-faces
 '(proof-queue-face ((t (:foreground "#eee"))))
 '(proof-declaration-name-face ((t (:foreground "#55aaff"))))
 '(company-coq-comment-h1-face ((t (:size 1.5))))
 '(proof-locked-face ((t (:background "#252525"))))
 '(proof-mouse-highlight-face  ((t (:background "#555" :foreground "#fff")))))
#+end_src

~base16-black-metal~ + customizations.

#+begin_src emacs-lisp :tangle no
(load-theme 'base16-black-metal t)
#+end_src

#+begin_src emacs-lisp :tangle no
(custom-set-faces
 '(proof-queue-face ((t (:foreground "#eee"))))
 '(company-coq-comment-h1-face ((t (:size 1.5))))
 '(font-lock-comment-face ((t (:foreground "#999"))))
 '(proof-locked-face ((t (:background "#151515"))))
 '(proof-mouse-highlight-face  ((t (:background "#555" :foreground "#fff")))))
#+end_src

~base16-one-light~ + customizations.

#+begin_src emacs-lisp :tangle no
(load-theme 'base16-one-light t)
(custom-set-faces
 '(proof-queue-face ((t (:foreground "#f0f0f0"))))
 '(proof-locked-face ((t (:background "#faebd7" :foreground "#4a473d"))))
 '(proof-locked-face ((t (:background "#faebd7" ))))
 '(proof-mouse-highlight-face  ((t (:background "#555" :foreground "#fff")))))
#+end_src

#+begin_src emacs-lisp
)
#+end_src

Customizations for =vimish-fold= and =base16-grayscale-dark=
theme.

#+begin_src emacs-lisp :tangle no
(eval-after-load 'vimish-fold
 (custom-set-faces
  '(vimish-fold-mouse-face ((t (:box (:line-width 1 :color "#555")))))
  '(vimish-fold-overlay ((t (:box (:line-width 1 :color "#222")))))))
#+end_src

*** Doom themes

See the [[https://github.com/hlissner/emacs-doom-themes/tree/screenshots][screenshots]].

#+begin_src emacs-lisp :tangle no
(use-package doom-themes
 :init
 (setq
  doom-themes-enable-bold nil
  doom-themes-enable-italic nil)
 :config
 (load-theme 'doom-dracula t)
 (load-theme 'doom-challenger-deep t)
 ;; Enable flashing mode-line on errors
 (doom-themes-visual-bell-config)
 (doom-themes-neotree-config)
 ;; Corrects (and improves) org-mode's native fontification
 (doom-themes-org-config)
 (load-theme 'doom-moonlight)
)
#+end_src

*** Apropospriate theme

#+begin_src emacs-lisp :tangle no
(use-package apropospriate-theme
 :config
 (load-theme 'apropospriate-dark))
#+end_src

*** Nord theme

#+begin_src emacs-lisp :tangle no
(use-package nord-theme)
#+end_src

*** Zero dark theme

#+begin_src emacs-lisp :tangle no
(use-package zerodark-theme
  :config
  (load-theme 'zerodark t nil)
  (zerodark-setup-modeline-format)
  ;; Customizations
  (with-eval-after-load 'idle-highlight-mode
    ;; (set-face-background 'idle-highlight "#c51060")
    (set-face-foreground 'idle-highlight "#999")
    (set-face-background 'idle-highlight "#222"))

  (with-eval-after-load 'company))
#+end_src

#+begin_src emacs-lisp :tangle no
(with-eval-after-load 'proof-general
    (custom-set-faces
     '(proof-queue-face ((t (:foreground "#eee"))))
     '(proof-locked-face ((t (:background "#001800" :foreground "#aaccbb"))))
     '(proof-locked-face ((t (:background "#0d3360" ))))
     '(proof-mouse-highlight-face  ((t (:background "#555" :foreground "#fff"))))))
#+end_src

*** Lor theme

Just another Tango theme based on =linux.org.ru= colors.

#+begin_src emacs-lisp :tangle no
(use-package lor-theme
 :ensure nil
 :custom-face
 (variable-pitch ((t (:family "Serif"))))
 (fixed-pitch ((t (:family "Monospace"))))
 :config
 (load-theme 'lor)
 :quelpa
 (lor-theme :repo "a13/lor-theme" :fetcher github :version original))
#+end_src

*** Sorcery

#+begin_src emacs-lisp :tangle no
(use-package sorcery-theme)
#+end_src

*** Other themes

#+begin_src emacs-lisp :tangle no
(use-package dracula-theme :defer t)
(use-package gotham-theme :defer t)
(use-package sublime-themes :defer t)
(use-package color-theme-modern :defer t)
(use-package twilight-theme :defer t)
(use-package gruber-darker-theme :defer t)
(use-package monokai-theme :defer t)
(use-package faff-theme :defer t)
(use-package badwolf-theme :defer t)
(use-package boron-theme :defer t)
(use-package bliss-theme :defer t)
(use-package busybee-theme :defer t)
(use-package color-theme-sanityinc-tomorrow :defer t)
(use-package badger-theme :defer t)
(use-package atom-one-dark-theme :defer t)
(use-package zenburn-theme :defer t)
(use-package hemisu-theme :defer t)
(use-package paganini-theme :defer t)
(use-package yoshi-theme :defer t)
(use-package rebecca-theme :defer t) ;; *****
(use-package moe-theme :defer t)
(use-package arjen-grey-theme :defer t)
(use-package darkmine-theme :defer t)
(use-package flatland-theme :defer t)
(use-package tao-theme :defer t)
(use-package liso-theme :defer t)
(use-package jazz-theme :defer t)
(use-package material-theme :defer t)
(use-package challenger-deep-theme :defer t) ;; ***
(use-package ample-theme
  :disabled
  :init
  (progn
    (load-theme 'ample t t)
    (load-theme 'ample-flat t t)
    (load-theme 'ample-light t t)
    (enable-theme 'ample-flat))
  :defer t)
(use-package cyberpunk-theme :defer t)
(use-package phoenix-dark-mono-theme :defer t) ;; *** (like grayscale-dark)
(use-package phoenix-dark-pink-theme :defer t) ;; **
(use-package cyberpunk-theme :defer t)
(use-package blackboard-theme :defer t) ;; ***
(use-package mustard-theme :defer t) ;; ****
(use-package labburn-theme :defer t) ;; *****
(use-package green-phosphor-theme :defer t) ;; *****
(use-package exotica-theme :defer t) ;; **
(use-package lush-theme :defer t) ;; ****
#+end_src

*** Theme changer (disabled)

Sunrise/sunset [[https://github.com/hadronzoo/theme-changer][theme changer]]. Given a location and day/night
color themes, this file provides a change-theme function that
selects the appropriate theme based on whether it is day or
night. It will continue to change themes at sunrise and sunset.

#+begin_src emacs-lisp :tangle no
(use-package theme-changer
  :config
  (change-theme 'base16-gruvbox-light-hard 'labburn))
#+end_src

*** Kurecolor

A collection of color tools aimed at those working with (normal
6 digit) hex color codes, useful for CSS, Emacs themes, etc.
etc.

Features include interactive step modification of hue, sat, val
on hex colors. Color conversion algorithms, for 6 digit hex
colors, hsv, rgb, cssrgb. Get/set h s v values from/for a color.

It's recommend you use this in conjunction with rainbow-mode,
for instant feedback on color changes.

See the [[https://github.com/emacsfodder/kurecolor][kurecolor github]] for more info.

#+begin_src emacs-lisp
(use-package kurecolor)
#+end_src

** Key bindings
*** Variables

Use =SPC= as a "leader" key and =C-SPC= as a second leader (I
call it "leader+" here).

#+begin_src emacs-lisp
(defvar my/leader "SPC")
(defvar my/leader+ "C-SPC")
#+end_src

*** General package

#+begin_src emacs-lisp
(use-package general
 :config
#+end_src

*** Basic keybindings

#+begin_src emacs-lisp
(general-define-key
 "C-h" 'windmove-left
 "C-l" 'windmove-right
 "C-k" 'windmove-up
 "C-j" 'windmove-down
 "C-c C-k" 'kill-region)
#+end_src

*** MacOS keybindings

#+begin_src emacs-lisp
(when (eq system-type 'darwin)
  (general-define-key
   "s-<backspace>" 'kill-whole-line
   "M-S-<backspace>" 'kill-word
   ;; Use Super for movement and selection just like in macOS
   "s-<right>" (kbd "C-e")
   "S-s-<right>" (kbd "C-S-e")
   "s-<left>" (kbd "M-m")
   "S-s-<left>" (kbd "M-S-m")
   "s-<up>" 'beginning-of-buffer
   "s-<down>" 'end-of-buffer
   ;; Basic things you should expect from macOS
   "s-a" 'mark-whole-buffer       ; select all
   "s-s" 'save-buffer             ; save
   "s-S" 'write-file              ; save as
   "s-q" 'save-buffers-kill-emacs ; quit
   ;; Go to other windows easily with one keystroke
   ;; s-something instead of C-x something
   "s-o" (kbd "C-x o")
   "s-w" (kbd "C-x 0") ; just like close tab in a web browser
   "s-W" (kbd "C-x 1") ; close others with shift
   ;; Move between windows with Control-Command-Arrow and
   ;; with Cmd just like in iTerm
   "s-[" 'windmove-left   ; Cmd+[ go to left window
   "s-]" 'windmove-right  ; Cmd+] go to right window
   "s-{" 'windmove-up     ; Cmd+Shift+[ go to upper window
   "<s-}>" 'windmove-down ; Ctrl+Shift+[ go to down window
   ;; Prev/next buffer
   "s-<" 'previous-buffer
   "s->" 'next-buffer))
#+end_src

*** Evil keybindings
**** Setup

Set up some basic equivalents for vim mapping functions. This
creates global key definition functions for the evil states.

#+begin_src emacs-lisp
(general-evil-setup t)
#+end_src

**** Basic

Swap ~:~ and ~;~ to make colon commands easier to type in Emacs.

#+begin_src emacs-lisp
(nmap
 ";" 'evil-ex
 ":" 'evil-repeat-find-char)
#+end_src

Remap ~0~ for convenience.

#+begin_src emacs-lisp
(nmap 'messages-buffer-mode-map
  "0" 'evil-digit-argument-or-evil-beginning-of-line)
#+end_src

**** Process menu

#+begin_src emacs-lisp
(nmap 'process-menu-mode-map
  "M-d" 'process-menu-delete-process
  "q" 'kill-buffer-and-window)
#+end_src

**** Leader-prefixed

#+begin_src emacs-lisp
(nmap
  :prefix my/leader
#+end_src

Window splitting.

#+begin_src emacs-lisp
  "v" 'split-window-horizontally
  "s" 'split-window-vertically
#+end_src

Evaluation.

#+begin_src emacs-lisp
  "E e" 'eval-expression
  "E l" 'eval-last-sexp
#+end_src

Help.

#+begin_src emacs-lisp
  "h k" 'describe-key-briefly
  "h K" 'describe-key
  "h M" 'describe-mode
  "h m" 'info-display-manual)
#+end_src

Profiling.

#+begin_src emacs-lisp
  "P s" 'profiler-start
  "P S" 'profiler-stop
  "P r" 'profiler-report
#+end_src

Others.

#+begin_src emacs-lisp
  "p" 'list-processes
  "\\" 'widen
#+end_src


#+begin_src emacs-lisp
)
#+end_src


*** Alert

A Growl-like alerts notifier for Emacs.

#+begin_src emacs-lisp
(use-package alert)
#+end_src
** Editor
*** Customizations

I don't use the customizations UI. Anyway, I keep those automated
customizations in a [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Saving-Customizations.html][separate file]]. The ~'noerror~ argument passed to
load prevents errors if the file doesn’t exist.

#+begin_src emacs-lisp
(setq custom-file (my/emacs-path "custom.el"))
(load custom-file 'noerror)
#+end_src
*** Basics

Some basic things.

#+begin_src emacs-lisp
(setq
 ;; sentences should end in one space
 sentence-end-double-space nil
 ;; empty scratch buffer
 initial-scratch-message nil
 ;; show keystrokes right away,
 ;; don't show the message in the scratch buffer
 echo-keystrokes 0.1
 ;; disable native fullscreen support
 ns-use-native-fullscreen nil)
#+end_src
*** Minibuffer

Give some more room to the minibuffer.

#+begin_src emacs-lisp
(setq
 max-mini-window-height 0.3
 resize-mini-windows 'grow-only)
#+end_src

Enable recursive minibuffers and
keep the point out of the minibuffer.

#+begin_src emacs-lisp
(setq
 ;; allow minibuffer commands in the minibuffer
 enable-recursive-minibuffers t
 ;; keep the point out of the minibuffer
 minibuffer-prompt-properties
 '(read-only t point-entered minibuffer-avoid-prompt face minibuffer-prompt))
#+end_src

Auto executable scripts.

#+begin_src emacs-lisp
(add-hook 'after-save-hook #'executable-make-buffer-file-executable-if-script-p)
#+end_src
*** Tabs & spaces

- Use spaces instead of tabs everywhere.
- One tab is 2 spaces.

#+begin_src emacs-lisp
(setq-default
 indent-tabs-mode nil
 tab-width 2)
#+end_src

Display line and column numbers in the mode-line.

#+begin_src emacs-lisp
(setq
  line-number-mode t
  column-number-mode t)
#+end_src

*** Line wrapping

Long lines will show a continuation character in the right
margin at the window’s edge to indicate that one can scroll to
see the rest.

#+begin_src emacs-lisp
(setq-default truncate-lines t)
#+end_src

Break line at ~N~ characters.

#+begin_src emacs-lisp
(setq-default fill-column 64)
#+end_src

Enable automatic line breaking for all text mode buffers.

#+begin_src emacs-lisp
(add-hook 'text-mode-hook 'turn-on-auto-fill)
#+end_src

Always wrap lines.

#+begin_src emacs-lisp :tangle no
;; (global-visual-line-mode)
#+end_src

** Benchmarking

Usage:

- ~M-x benchmark-init/show-durations-tabulated~
– ~M-x benchmark-init/show-durations-tree~

#+begin_src emacs-lisp
(use-package benchmark-init
 :hook
 ;; To disable collection of benchmark data after init is done.
 (after-init . benchmark-init/deactivate))
#+end_src

** Theme
*** Base-16 themes

#+begin_src emacs-lisp
(use-package base16-theme
  :config
  ;; (load-theme 'base16-default-dark t)
  (load-theme 'base16-grayscale-dark t)
  ;; (load-theme 'base16-grayscale-light t)
  ;; (load-theme 'base16-gruvbox-light-hard t)
  ;; (load-theme 'base16-material-palenight t) ;; ****
  ;; (load-theme 'base16-rebecca t)
  ;; (load-theme 'base16-pop t)
  ;; (load-theme 'base16-tomorrow-night t)
  ;; (load-theme 'base16-twilight t)
  ;; (load-theme 'base16-irblack t)
#+end_src

~base16-chalk~ + customizations.

#+begin_src emacs-lisp :tangle no
(load-theme 'base16-chalk t)
#+end_src

#+begin_src emacs-lisp :tangle no
(custom-set-faces
 '(proof-queue-face ((t (:foreground "#eee"))))
 '(proof-declaration-name-face ((t (:foreground "#55aaff"))))
 '(company-coq-comment-h1-face ((t (:size 1.5))))
 '(proof-locked-face ((t (:background "#252525"))))
 '(proof-mouse-highlight-face  ((t (:background "#555" :foreground "#fff")))))
#+end_src

~base16-black-metal~ + customizations.

#+begin_src emacs-lisp :tangle no
(load-theme 'base16-black-metal t)
#+end_src

#+begin_src emacs-lisp :tangle no
(custom-set-faces
 '(proof-queue-face ((t (:foreground "#eee"))))
 '(company-coq-comment-h1-face ((t (:size 1.5))))
 '(font-lock-comment-face ((t (:foreground "#999"))))
 '(proof-locked-face ((t (:background "#151515"))))
 '(proof-mouse-highlight-face  ((t (:background "#555" :foreground "#fff")))))
#+end_src

~base16-one-light~ + customizations.

#+begin_src emacs-lisp :tangle no
(load-theme 'base16-one-light t)
(custom-set-faces
 '(proof-queue-face ((t (:foreground "#f0f0f0"))))
 '(proof-locked-face ((t (:background "#faebd7" :foreground "#4a473d"))))
 '(proof-locked-face ((t (:background "#faebd7" ))))
 '(proof-mouse-highlight-face  ((t (:background "#555" :foreground "#fff")))))
#+end_src

#+begin_src emacs-lisp
)
#+end_src

Customizations for =vimish-fold= and =base16-grayscale-dark=
theme.

#+begin_src emacs-lisp :tangle no
(eval-after-load 'vimish-fold
 (custom-set-faces
  '(vimish-fold-mouse-face ((t (:box (:line-width 1 :color "#555")))))
  '(vimish-fold-overlay ((t (:box (:line-width 1 :color "#222")))))))
#+end_src

*** Doom themes

See the [[https://github.com/hlissner/emacs-doom-themes/tree/screenshots][screenshots]].

#+begin_src emacs-lisp :tangle no
(use-package doom-themes
 :init
 (setq
  doom-themes-enable-bold nil
  doom-themes-enable-italic nil)
 :config
 (load-theme 'doom-dracula t)
 (load-theme 'doom-challenger-deep t)
 ;; Enable flashing mode-line on errors
 (doom-themes-visual-bell-config)
 (doom-themes-neotree-config)
 ;; Corrects (and improves) org-mode's native fontification
 (doom-themes-org-config)
 (load-theme 'doom-moonlight)
)
#+end_src

*** Apropospriate theme

#+begin_src emacs-lisp :tangle no
(use-package apropospriate-theme
 :config
 (load-theme 'apropospriate-dark))
#+end_src

*** Nord theme

#+begin_src emacs-lisp :tangle no
(use-package nord-theme)
#+end_src

*** Zero dark theme

#+begin_src emacs-lisp :tangle no
(use-package zerodark-theme
  :config
  (load-theme 'zerodark t nil)
  (zerodark-setup-modeline-format)
  ;; Customizations
  (with-eval-after-load 'idle-highlight-mode
    ;; (set-face-background 'idle-highlight "#c51060")
    (set-face-foreground 'idle-highlight "#999")
    (set-face-background 'idle-highlight "#222"))

  (with-eval-after-load 'company))
#+end_src

#+begin_src emacs-lisp :tangle no
(with-eval-after-load 'proof-general
    (custom-set-faces
     '(proof-queue-face ((t (:foreground "#eee"))))
     '(proof-locked-face ((t (:background "#001800" :foreground "#aaccbb"))))
     '(proof-locked-face ((t (:background "#0d3360" ))))
     '(proof-mouse-highlight-face  ((t (:background "#555" :foreground "#fff"))))))
#+end_src

*** Lor theme

Just another Tango theme based on =linux.org.ru= colors.

#+begin_src emacs-lisp :tangle no
(use-package lor-theme
 :ensure nil
 :custom-face
 (variable-pitch ((t (:family "Serif"))))
 (fixed-pitch ((t (:family "Monospace"))))
 :config
 (load-theme 'lor)
 :quelpa
 (lor-theme :repo "a13/lor-theme" :fetcher github :version original))
#+end_src

*** Sorcery

#+begin_src emacs-lisp :tangle no
(use-package sorcery-theme)
#+end_src

*** Other themes

#+begin_src emacs-lisp :tangle no
(use-package dracula-theme :defer t)
(use-package gotham-theme :defer t)
(use-package sublime-themes :defer t)
(use-package color-theme-modern :defer t)
(use-package twilight-theme :defer t)
(use-package gruber-darker-theme :defer t)
(use-package monokai-theme :defer t)
(use-package faff-theme :defer t)
(use-package badwolf-theme :defer t)
(use-package boron-theme :defer t)
(use-package bliss-theme :defer t)
(use-package busybee-theme :defer t)
(use-package color-theme-sanityinc-tomorrow :defer t)
(use-package badger-theme :defer t)
(use-package atom-one-dark-theme :defer t)
(use-package zenburn-theme :defer t)
(use-package hemisu-theme :defer t)
(use-package paganini-theme :defer t)
(use-package yoshi-theme :defer t)
(use-package rebecca-theme :defer t) ;; *****
(use-package moe-theme :defer t)
(use-package arjen-grey-theme :defer t)
(use-package darkmine-theme :defer t)
(use-package flatland-theme :defer t)
(use-package tao-theme :defer t)
(use-package liso-theme :defer t)
(use-package jazz-theme :defer t)
(use-package material-theme :defer t)
(use-package challenger-deep-theme :defer t) ;; ***
(use-package ample-theme
  :disabled
  :init
  (progn
    (load-theme 'ample t t)
    (load-theme 'ample-flat t t)
    (load-theme 'ample-light t t)
    (enable-theme 'ample-flat))
  :defer t)
(use-package cyberpunk-theme :defer t)
(use-package phoenix-dark-mono-theme :defer t) ;; *** (like grayscale-dark)
(use-package phoenix-dark-pink-theme :defer t) ;; **
(use-package cyberpunk-theme :defer t)
(use-package blackboard-theme :defer t) ;; ***
(use-package mustard-theme :defer t) ;; ****
(use-package labburn-theme :defer t) ;; *****
(use-package green-phosphor-theme :defer t) ;; *****
(use-package exotica-theme :defer t) ;; **
(use-package lush-theme :defer t) ;; ****
#+end_src

*** Theme changer (disabled)

Sunrise/sunset [[https://github.com/hadronzoo/theme-changer][theme changer]]. Given a location and day/night
color themes, this file provides a change-theme function that
selects the appropriate theme based on whether it is day or
night. It will continue to change themes at sunrise and sunset.

#+begin_src emacs-lisp :tangle no
(use-package theme-changer
  :config
  (change-theme 'base16-gruvbox-light-hard 'labburn))
#+end_src

*** Kurecolor

A collection of color tools aimed at those working with (normal
6 digit) hex color codes, useful for CSS, Emacs themes, etc.
etc.

Features include interactive step modification of hue, sat, val
on hex colors. Color conversion algorithms, for 6 digit hex
colors, hsv, rgb, cssrgb. Get/set h s v values from/for a color.

It's recommend you use this in conjunction with rainbow-mode,
for instant feedback on color changes.

See the [[https://github.com/emacsfodder/kurecolor][kurecolor github]] for more info.

#+begin_src emacs-lisp
(use-package kurecolor)
#+end_src

** Key bindings
*** Variables

Use =SPC= as a "leader" key and =C-SPC= as a second leader (I
call it "leader+" here).

#+begin_src emacs-lisp
(defvar my/leader "SPC")
(defvar my/leader+ "C-SPC")
#+end_src

*** General package

#+begin_src emacs-lisp
(use-package general
 :config
#+end_src

*** Basic keybindings

#+begin_src emacs-lisp
(general-define-key
 "C-h" 'windmove-left
 "C-l" 'windmove-right
 "C-k" 'windmove-up
 "C-j" 'windmove-down
 "C-c C-k" 'kill-region)
#+end_src

*** MacOS keybindings

#+begin_src emacs-lisp
(when (eq system-type 'darwin)
  (general-define-key
   "s-<backspace>" 'kill-whole-line
   "M-S-<backspace>" 'kill-word
   ;; Use Super for movement and selection just like in macOS
   "s-<right>" (kbd "C-e")
   "S-s-<right>" (kbd "C-S-e")
   "s-<left>" (kbd "M-m")
   "S-s-<left>" (kbd "M-S-m")
   "s-<up>" 'beginning-of-buffer
   "s-<down>" 'end-of-buffer
   ;; Basic things you should expect from macOS
   "s-a" 'mark-whole-buffer       ; select all
   "s-s" 'save-buffer             ; save
   "s-S" 'write-file              ; save as
   "s-q" 'save-buffers-kill-emacs ; quit
   ;; Go to other windows easily with one keystroke
   ;; s-something instead of C-x something
   "s-o" (kbd "C-x o")
   "s-w" (kbd "C-x 0") ; just like close tab in a web browser
   "s-W" (kbd "C-x 1") ; close others with shift
   ;; Move between windows with Control-Command-Arrow and
   ;; with Cmd just like in iTerm
   "s-[" 'windmove-left   ; Cmd+[ go to left window
   "s-]" 'windmove-right  ; Cmd+] go to right window
   "s-{" 'windmove-up     ; Cmd+Shift+[ go to upper window
   "<s-}>" 'windmove-down ; Ctrl+Shift+[ go to down window
   ;; Prev/next buffer
   "s-<" 'previous-buffer
   "s->" 'next-buffer))
#+end_src

*** Evil keybindings
**** Setup

Set up some basic equivalents for vim mapping functions. This
creates global key definition functions for the evil states.

#+begin_src emacs-lisp
(general-evil-setup t)
#+end_src

**** Basic

Swap ~:~ and ~;~ to make colon commands easier to type in Emacs.

#+begin_src emacs-lisp
(nmap
 ";" 'evil-ex
 ":" 'evil-repeat-find-char)
#+end_src

Remap ~0~ for convenience.

#+begin_src emacs-lisp
(nmap 'messages-buffer-mode-map
  "0" 'evil-digit-argument-or-evil-beginning-of-line)
#+end_src

**** Process menu

#+begin_src emacs-lisp
(nmap 'process-menu-mode-map
  "M-d" 'process-menu-delete-process
  "q" 'kill-buffer-and-window)
#+end_src

**** Leader-prefixed

#+begin_src emacs-lisp
(nmap
  :prefix my/leader
#+end_src

Window splitting.

#+begin_src emacs-lisp
  "v" 'split-window-horizontally
  "s" 'split-window-vertically
#+end_src

Evaluation.

#+begin_src emacs-lisp
  "E e" 'eval-expression
  "E l" 'eval-last-sexp
#+end_src

Help.

#+begin_src emacs-lisp
  "h k" 'describe-key-briefly
  "h K" 'describe-key
  "h M" 'describe-mode
  "h m" 'info-display-manual)
#+end_src

Profiling.

#+begin_src emacs-lisp
  "P s" 'profiler-start
  "P S" 'profiler-stop
  "P r" 'profiler-report
#+end_src

Others.

#+begin_src emacs-lisp
  "p" 'list-processes
  "\\" 'widen
#+end_src


#+begin_src emacs-lisp
)
#+end_src


** Behavior
*** Garbage collection

Enforce a sneaky Garbage Collection strategy to minimize GC
interference with the activity. During normal use a high GC
threshold is set. When idling GC is immediately triggered and
a low threshold is set.

A more detailed explanation of the rationale behind this can be
found at: http://akrl.sdf.org/.

#+begin_src emacs-lisp
(use-package gcmh
  :config
  (gcmh-mode 1))
#+end_src

*** Server

Start server if one isn’t already running.

#+begin_src emacs-lisp
(use-package server
  :ensure nil
  :commands server-running-p
  :preface
  (defun my/server-ensure-running (frame)
    "Ensure server is running when launching FRAME."
    (with-selected-frame frame
      (unless (server-running-p)
        (server-start))))
  :init
  (add-hook 'after-make-frame-functions #'my/server-ensure-running))
#+end_src

*** Trashing

#+begin_src emacs-lisp
(setq
  delete-by-moving-to-trash t
  trash-directory (my/emacs-path "trash"))
#+end_src

*** Buffer

Hide async shell command buffers.

#+begin_src emacs-lisp
(cl-pushnew
 '("^*Async Shell Command*" . (display-buffer-no-window))
 display-buffer-alist
 :test #'equal)
#+end_src


Always display pop up buffers at the bottom and regard all star
buffers as such buffers. (Not always that useful)

#+begin_src emacs-lisp :tangle no
(let ((rule
       `(,(rx bos "*" (one-or-more anything) "*" (optional "<" (one-or-more anything) ">") eos)
         (display-buffer-reuse-window
          display-buffer-in-side-window)
         (reusable-frames . visible)
         (side . bottom)
         (window-height . 0.4))))
  (cl-pushnew rule display-buffer-alist :test #'equal))
#+end_src

*** Visual fill column

Wrap lines according to ~fill-column~ in ~visual-line-mode~.

#+begin_src emacs-lisp
(use-package visual-fill-column
  :custom
  (visual-fill-column-center-text t))
#+end_src

*** Clipboard (disabled)

Make emacs kill ring and system clipboard independent.
Currenly untangled.

#+begin_src emacs-lisp :tangle no
(use-package simpleclip
 :disabled
 :after general
 :config
 (simpleclip-mode 1)
 (nmap
   "s-c" 'simpleclip-copy
   "s-v" 'simpleclip-paste)
 (imap
   "s-c" 'simpleclip-copy
   "s-v" 'simpleclip-paste))
#+end_src

*** Copy as

Allows to copy buffer locations as GitHub/Slack/JIRA/HipChat/etc
formatted code.

#+begin_src emacs-lisp
(use-package copy-as-format
 :after general
 :config
 (vmap
   :prefix "C-c f"
   "f" 'copy-as-format
   "a" 'copy-as-format-asciidoc
   "b" 'copy-as-format-bitbucket
   "d" 'copy-as-format-disqus
   "g" 'copy-as-format-github
   "l" 'copy-as-format-gitlab
   "h" 'copy-as-format-html
   "j" 'copy-as-format-jira
   "m" 'copy-as-format-markdown
   "w" 'copy-as-format-mediawiki
   "o" 'copy-as-format-org-mode
   "p" 'copy-as-format-pod
   "r" 'copy-as-format-rst
   "s" 'copy-as-format-slack))
#+end_src

*** Posframe

Pop a [[https://github.com/tumashu/posframe][posframe]] (a child-frame) at point.

#+begin_src emacs-lisp
(use-package posframe
  :custom
  (posframe-mouse-banish nil))
#+end_src

*** Extra whitespace trimming

Unobtrusively trim extraneous whitespace only in lines edited.

#+begin_src emacs-lisp
(use-package ws-butler
 :hook
 (prog-mode . ws-butler-mode)
 :diminish ws-butler-mode)
#+end_src

*** Aggressive indent

Emacs minor mode that keeps your code always indented. More
reliable than =electric-indent-mode=. More info in the [[https://github.com/Malabarba/aggressive-indent-mode][package
repository.]]

#+begin_src emacs-lisp
(use-package aggressive-indent
 :hook
 ((emacs-lisp-mode css-mode c++-mode) . aggressive-indent-mode)
 :config
 ;; Prevent lines jumping around in c++-mode when you haven't typed the ";" yet
 (add-to-list
  'aggressive-indent-dont-indent-if
  '(and
    (derived-mode-p 'c++-mode)
    (null (string-match
           "\\([;{}]\\|\\b\\(if\\|for\\|while\\)\\b\\)"
           (thing-at-point 'line))))))
#+end_src

*** Auto-save buffers (disabled)

Save buffers when they lose focus.

#+begin_src emacs-lisp :tangle no
(use-package super-save
 :config
 (super-save-mode +1)
 :diminish)
#+end_src

*** Auto read-only

Automatically make the buffer-file to read-only based on
buffer-file-name. For example, it can protect library code
provided by third parties.

#+begin_src emacs-lisp
(use-package auto-read-only
 :config
 (auto-read-only-mode 1)
 ;; Automatically make the init.el read-only because it is a
 ;; generated file.
 (add-to-list 'auto-read-only-file-regexps "~/.emacs.d/init.el"))
#+end_src

*** Zoom

~text-scale-increase~ and ~text-scale-decrease~ doesn't play
well with =company-mode= (suggestions popup alignment issue).
You can find some more info [[https://github.com/company-mode/company-mode/issues/299#issuecomment-115056397][here]].

=frame-fns= and =frame-cmds= are dependencies of =zoom-frm=.

#+begin_src emacs-lisp
(use-package frame-fns
 :demand t
 :quelpa (frame-fns :fetcher github :repo "emacsmirror/frame-fns"))
(use-package frame-cmds
 :demand t
 :quelpa (frame-cmds :fetcher github :repo "emacsmirror/frame-cmds"))

(use-package zoom-frm
 :after (frame-fns frame-cmds)
 :quelpa (zoom-frm :fetcher github :repo "emacsmirror/zoom-frm")
 :config
 (nmap
   "C-=" 'zoom-frm-in
   "C--" 'zoom-frm-out
   "<s-triple-wheel-up>" 'zoom-frm-in
   "<s-triple-wheel-down>" 'zoom-frm-out))
#+end_src

Fixed and automatic balanced window layout for Emacs.
TL;DR: Zooms current pane.

#+begin_src emacs-lisp
(use-package zoom
 :custom
 (zoom-size '(0.8 . 0.8))
 (zoom-ignored-major-modes '(dired-mode pomidor-mode))
 (zoom-ignored-buffer-name-regexps '("^*calc"))
 (zoom-ignore-predicates '((lambda () (> (count-lines (point-min) (point-max)) 20)))))
#+end_src

*** Transparency

Allows easily change Emacs transparency. See the [[https://github.com/Benaiah/seethru][package repo]]
for more info.

#+begin_src emacs-lisp
(use-package seethru
 :demand t
 :commands
 (seethru)
 :config
 (seethru 100)
 ;; C-c 8, C-c 9
 (seethru-recommended-keybinds))
#+end_src

*** Go to last change

Go to last change in a current buffer.

#+begin_src emacs-lisp
(use-package goto-chg
 :after general
 :config
 (nmap
   :prefix my/leader
   "." 'goto-last-change
   "," 'goto-last-change-reverse)
 ;; Additional keybindings for macOS
 (when (eq system-type 'darwin)
   (nmap
     "s-." 'goto-last-change
     "s-," 'goto-last-change-reverse)))
#+end_src

*** Fullframe

Makes it possible to advice commands to execute fullscreen,
restoring the window setup when exiting.

#+begin_src emacs-lisp
(use-package fullframe
 :config
 (fullframe list-packages quit-window)
 (fullframe package-list-packages quit-window))
#+end_src

*** Folding

Vim-like [[https://github.com/mrkkrp/vimish-fold][text folding]] for Emacs.

#+begin_src emacs-lisp
(use-package vimish-fold
 :after evil
 :commands
 (vimish-fold-global-mode)
 :init
 (setq
  vimish-fold-blank-fold-header "<...>"
  vimish-fold-indication-mode 'right-fringe)
 :config
 (vimish-fold-global-mode 1))
#+end_src

*** Which key

Key bindings are provided by =evil-collection=.

#+begin_src emacs-lisp
(use-package which-key
 :diminish which-key-mode
 :init
 (setq
  which-key-idle-delay 1.0
  which-key-sort-order 'which-key-prefix-then-key-order-reverse
  ;; Hack to make this work with Evil
  which-key-show-operator-state-maps t
  which-key-prefix-prefix ""
  which-key-side-window-max-width 0.5
  which-key-popup-type 'side-window
  which-key-side-window-location 'bottom)
 :config
 (which-key-mode)
 (with-eval-after-load 'evil-collection
   (add-to-list 'evil-collection-mode-list 'while-key)))
#+end_src

*** Free keys

Show free bindings in current buffer. To use, call the command
=M-x free-keys=. See the [[https://github.com/Fuco1/free-keys][package repo]] for more info.

#+begin_src emacs-lisp
(use-package free-keys)
#+end_src

*** VLF

Large file support.
This can view/edit/search and compare large files.

#+begin_src emacs-lisp
(use-package vlf)
#+end_src

*** Sudo edit

Utilities for opening files with sudo.

#+begin_src emacs-lisp
(use-package sudo-edit)
#+end_src

*** Try

Allows you to try out Emacs packages without installing them.

#+begin_src emacs-lisp
(use-package try)
#+end_src

*** Restart

#+begin_src emacs-lisp
(use-package restart-emacs
 :after general
 :demand t
 :config
 (nmap
   :prefix my/leader
   "Z" 'restart-emacs))
#+end_src
** Appearance
*** Customization

Define an interactive function for customizing appearance.

#+begin_src emacs-lisp
(defun my/customize-appearance ()
  (interactive)
  ;; set the background or vertical border to the main area background color
  (set-face-background 'vertical-border (face-background 'default))
  ;; set the foreground and background of the vertical-border face to
  ;; the same value so there is no line up the middle
  (set-face-foreground 'vertical-border (face-background 'vertical-border))
  ;; set the fringe colors to whatever is the background color
  (set-face-attribute
   'fringe nil
   :foreground (face-foreground 'default)
   :background (face-background 'default))

  ;; Comment/uncomment the lines below to
  ;; set the highlight color for selected text:

  ;; (set-face-attribute 'region nil :foreground "#fff")
  ;; (set-face-attribute 'region nil :background "#282828")

  ;; Comment/uncomment the line below to
  ;; set the highlight color and foreground color for matching search results:

  ;; (set-face-attribute 'lazy-highlight nil :foreground "black" :background "#ffd700")
  )
#+end_src

Required for =emacsclient=.

#+begin_src emacs-lisp
(if (display-graphic-p)
    (my/customize-appearance)
  (add-hook
   'after-make-frame-functions
   (lambda (frame)
     (when (display-graphic-p frame)
       (with-selected-frame frame
         (my/customize-appearance))))))
#+end_src

*** Page break lines (disabled)

Display ugly =^L= page breaks as tidy horizontal lines.
Currently disabled, becuase it makes the scrolling slow.

#+begin_src emacs-lisp :tangle no
(use-package page-break-lines
 :init
 (global-page-break-lines-mode 1)
 :diminish page-break-lines-mode)
#+end_src

*** Rainbow delimiters

=rainbow-delimiters= is a "rainbow parentheses"-like mode which
highlights delimiters such as parentheses, brackets or braces
according to their depth. Each successive level is highlighted
in a different color. This makes it easy to spot matching
delimiters, orient yourself in the code, and tell which
statements are at a given depth.

#+begin_src emacs-lisp
(use-package rainbow-delimiters
 :commands
 (rainbow-delimiters-unmatched-face)
 :config
 ;; Pastels
 (set-face-attribute 'rainbow-delimiters-depth-1-face nil :foreground "#78c5d6")
 (set-face-attribute 'rainbow-delimiters-depth-2-face nil :foreground "#bf62a6")
 (set-face-attribute 'rainbow-delimiters-depth-3-face nil :foreground "#459ba8")
 (set-face-attribute 'rainbow-delimiters-depth-4-face nil :foreground "#e868a2")
 (set-face-attribute 'rainbow-delimiters-depth-5-face nil :foreground "#79c267")
 (set-face-attribute 'rainbow-delimiters-depth-6-face nil :foreground "#f28c33")
 (set-face-attribute 'rainbow-delimiters-depth-7-face nil :foreground "#c5d647")
 (set-face-attribute 'rainbow-delimiters-depth-8-face nil :foreground "#f5d63d")
 (set-face-attribute 'rainbow-delimiters-depth-9-face nil :foreground "#78c5d6")
 ;; Make unmatched parens stand out more
 (set-face-attribute
  'rainbow-delimiters-unmatched-face nil
   :foreground 'unspecified
   :inherit 'show-paren-mismatch
   :strike-through t)
 (set-face-foreground 'rainbow-delimiters-unmatched-face "magenta")
 :hook
 (prog-mode . rainbow-delimiters-mode)
 :diminish rainbow-delimiters-mode)
#+end_src

*** Rainbow identifiers

Rainbow identifier highlighting.

#+begin_src emacs-lisp
(use-package rainbow-identifiers
 :hook
 (prog-mode . rainbow-identifiers-mode)
 :diminish rainbow-identifiers-mode)
#+end_src

*** Rainbow mode

This minor mode sets background color to strings that match
color.

#+begin_src emacs-lisp
(use-package rainbow-mode
 :diminish rainbow-mode
 :hook prog-mode
 :config
 (nmap
   :prefix my/leader
   "t r" 'rainbow-mode))
#+end_src

*** Idle highlight mode

Basically its the same as highlight-thing but seems to be
smarter and less distracting.

#+begin_src emacs-lisp
(use-package idle-highlight-mode
 :custom
 (idle-highlight-idle-time 0.5)
 :hook
 (prog-mode . idle-highlight-mode)
 :config
 (nmap
   :prefix my/leader
   "t H" 'idle-highlight-mode))
#+end_src

*** Line highlight

Provides a local minor mode (toggled by ~M-x hl-line-mode~) and
a global minor mode (toggled by ~M-x global-hl-line-mode~) to
highlight, on a suitable terminal, the line on which point is.

#+begin_src emacs-lisp
(use-package hl-line
  :custom
  ;; Only highlight in selected window
  (hl-line-sticky-flag nil)
  (global-hl-line-sticky-flag nil)
  :config
  (set-face-background 'hl-line "#151515")
  (global-hl-line-mode)
  (nmap
    :prefix my/leader
    "t l" 'global-hl-line-mode))
#+end_src

*** Column highlight (slow)

Library required for the ~col-hightlight~ package.

#+begin_src emacs-lisp
(use-package vline
  :quelpa
  (vline :fetcher github :repo "emacsmirror/vline"))
#+end_src

This package highlights the current column. When you move the
cursor, the highlighting follows (tracks the cursor), as long as
the highlighting stays on.

#+begin_src emacs-lisp
(use-package col-highlight
  :after (vline)
  :quelpa
  (col-highlight :fetcher github :repo "emacsmirror/col-highlight")
  ;; :hook
  ;; (prog-mode . column-highlight-mode)
  :config
  (set-face-background 'col-highlight "#151515")
  (nmap
    :prefix my/leader
    "t c" 'column-highlight-mode))
#+end_src

*** Column marker

With this library you can highlight a column (vertical line) of
text. In fact, you can highlight any number of such columns – 3
such highlight column markers are provided by default, but you
can easily define more.

#+begin_src emacs-lisp
(use-package column-marker
  :quelpa
  (column-marker :fetcher github :repo "emacsmirror/column-marker"))
#+end_src

*** Hightlight todos

Highlights TODO and similar keywords in comments and strings.
See the [[https://github.com/tarsius/hl-todo][package repository]] for more info.

#+begin_src emacs-lisp
(use-package hl-todo
 :config
 (global-hl-todo-mode))
#+end_src

*** Highlight indentation (slow)

Provides two minor modes ~highlight-indentation-mode~ and
~highlight-indentation-current-column-mode~:

- ~highlight-indentation-mode~ - displays guidelines indentation (space
  indentation only).
- ~highlight-indentation-current-column-mode~ - displays guidelines for the
  current-point indentation (space indentation only).

See the [[https://github.com/antonj/Highlight-Indentation-for-Emacs][package repository]] for more info.

#+begin_src emacs-lisp
(use-package highlight-indentation
 :after general
 :hook
 ;; (yaml-mode . highlight-indentation-mode)
 ;; (haskell-mode . highlight-indentation-mode)
 (prog-mode . highlight-indentation-current-column-mode)
 :config
 ;; theme: zerodark
 ;; (set-face-background 'highlight-indentation-face "#24282f")
 ;; (set-face-background 'highlight-indentation-current-column-face "#22252c")
 ;; theme: grayscale dark
 (set-face-background 'highlight-indentation-face "#151515")
 (set-face-background 'highlight-indentation-current-column-face "#121212")
 (nmap
   :prefix my/leader
   "t i" 'highlight-indentation-mode
   "t I" 'highlight-indentation-current-column-mode)
 :diminish
 (highlight-indentation-mode
  highlight-indentation-current-column-mode))
#+end_src

*** Highlight leading spaces (disabled)

Highlight leading spaces that are part of the indentation.
See the [[https://github.com/mrBliss/highlight-leading-spaces][package repo]] for more info.

Breaks syntax highlighting.

#+begin_src emacs-lisp :tangle no
(use-package highlight-leading-spaces
 :custom-face
 (highlight-leading-spaces ((t (:foreground "#2a2a2a"))))
 :config
 (nmap
   :prefix my/leader
   "t s" 'highlight-leading-spaces-mode))
#+end_src

*** Highlight numbers (disabled)

Minor mode that highlights numeric literals in source code.

#+begin_src emacs-lisp :tangle no
(use-package highlight-numbers
 :hook
 (prog-mode . highlight-numbers-mode))
#+end_src

*** VI Tilde fringe (disabled)

Display tildes on empty lines in the Emacs fringe a la Vi. See
the package [[https://github.com/syl20bnr/vi-tilde-fringe][repo]] for more info.

#+begin_src emacs-lisp :tangle no
(use-package vi-tilde-fringe
 :config
 (global-vi-tilde-fringe-mode)
 :diminish vi-tilde-fringe-mode)
#+end_src

*** Fill column (disabled)

I keep it disabled, because it is too slow.

#+begin_src emacs-lisp :tangle no
(use-package fill-column-indicator
 :config
 (setq fci-rule-column 120)
 (setq fci-rule-color "#141414")
 (setq fill-column 80))
#+end_src

*** All the icons (disabled)

A utility [[https://github.com/domtronn/all-the-icons.el][package]] to collect various =Icon Fonts= and propertize
them within Emacs.

Don't forget to run ~M-x all-the-icons-install-fonts~.

Disabled, it slows down dired.

#+begin_src emacs-lisp :tangle no
(use-package all-the-icons
 :config
 (setq
   all-the-icons-mode-icon-alist
   `(,@all-the-icons-mode-icon-alist
     (package-menu-mode all-the-icons-octicon "package" :v-adjust 0.0)
     (jabber-chat-mode all-the-icons-material "chat" :v-adjust 0.0)
     (jabber-roster-mode all-the-icons-material "contacts" :v-adjust 0.0)
     (telega-chat-mode all-the-icons-fileicon "telegram" :v-adjust 0.0
                       :face all-the-icons-blue-alt)
     (telega-root-mode all-the-icons-material "contacts" :v-adjust 0.0))))
#+end_src

*** Emojify (disabled)

Add emoji support. This is useful when working with =HTML=.

#+begin_src emacs-lisp :tangle no
(use-package emojify
 :hook
 (text-mode . emojify-mode))
#+end_src

*** Mode line
**** Simple-modeline (disabled)

#+begin_src emacs-lisp :tangle no
(use-package simple-modeline
 ;; TODO: https://github.com/melpa/melpa/pull/6818
 :quelpa
 (simple-modeline :fetcher github :repo "gexplorer/simple-modeline")
  :hook (after-init . simple-modeline-mode))
#+end_src

**** Telephone-line (disabled)

#+begin_src emacs-lisp :tangle no
(use-package telephone-line
  :init
  (setq
   telephone-line-lhs
   '((evil . (telephone-line-evil-tag-segment))
     (accent . (telephone-line-vc-segment
                telephone-line-erc-modified-channels-segment
                telephone-line-process-segment))
     (nil . (telephone-line-minor-mode-segment
             telephone-line-buffer-segment))))
  (setq
   telephone-line-rhs
   '((nil . (telephone-line-misc-info-segment))
     (accent . (telephone-line-major-mode-segment))
     (evil . (telephone-line-airline-position-segment))))
  :config
  :hook (after-init . telephone-line-mode))
#+end_src

**** Mood-line (disabled)

A minimal mode-line configuration that aims to replicate some of
the features of the =doom-modeline= package.

#+begin_src emacs-lisp :tangle no
(use-package mood-line
 :hook
 (after-init . mood-line-mode))
#+end_src

**** Spaceline (disabled)

A very cool mode line that I used previously.

#+begin_src emacs-lisp :tangle no
(use-package spaceline
 :init
 (setq
  powerline-default-separator 'bar
  spaceline-highlight-face-func 'spaceline-highlight-face-evil-state)
 :config
 (require 'spaceline-config)
 (spaceline-spacemacs-theme))
#+end_src

**** Flycheck color (disabled)

Colors the mode-line according to the Flycheck state of the current buffer.

#+begin_src emacs-lisp :tangle no
(use-package flycheck-color-mode-line
  :after (flycheck)
  :commands
  (flycheck-color-mode-line-mode)
  :hook
  (flycheck-mode . flycheck-color-mode-line-mode))
#+end_src

**** Indent info (disabled)

Display information about the current indentation settings.

#+begin_src emacs-lisp :tangle no
(use-package indent-info
  :custom
  (indent-info-prefix " ")
  (indent-info-suffix " ")
  :config
  (global-indent-info-mode 1))
#+end_src

**** Moody + minions

Another option is =moody= + =minions= as an attractive
minimalist mode line replacement.

=Minions= is a minor-mode menu for the mode line. This menu is
intended as a replacement for the incomplete yet wide list of
enabled minor-modes that is displayed in the mode line by
default.

#+begin_src emacs-lisp
(use-package minions
 :config
 (setq minions-mode-line-lighter "[+]")
 (minions-mode 1))
#+end_src

Provides utilities for displaying elements of the mode line as
tabs and ribbons. It also provides replacements for a few
built-in elements.

#+begin_src emacs-lisp
(use-package moody
 :config
 (moody-replace-mode-line-buffer-identification)
 (moody-replace-vc-mode)
 (setq-default
  x-underline-at-descent-line t
  column-number-mode t))
#+end_src

**** Hide mode line

Support hiding the mode line, this can be useful for different
modes displaying documents or presentation.

TODO: Fix [[https://github.com/hlissner/emacs-hide-mode-line/issues/4][this issue]].

#+begin_src emacs-lisp
(use-package hide-mode-line
 :config
 (add-hook 'completion-list-mode-hook #'hide-mode-line-mode)
 (nmap
   :prefix my/leader
   "t m" 'global-hide-mode-line-mode))
#+end_src

*** Beacon

Visualizes cursor position. Slows down =font-lock-mode=
significanly.

#+begin_src emacs-lisp
(use-package beacon
 :after (general)
 :demand t
 :commands (beacon-mode)
 :custom
 (beacon-size 12)
 (beacon-blink-delay 0.0)
 (beacon-blink-duration 0.5)
 (beacon-color "#ffd700")
 (beacon-blink-when-window-scrolls nil)
 (beacon-dont-blink-commands nil)
 :config
 (nmap
   :prefix my/leader
   "t b" 'beacon-mode)
 :diminish beacon-mode)
#+end_src
** Evil
*** Main

#+begin_src emacs-lisp
  (use-package evil
   :preface
   (defvar my/evil/esc-hook '(t)
     "A hook run after ESC is pressed in normal mode
     (invoked by `evil-force-normal-state').
     If a hook returns non-nil, all hooks after it are ignored.")
   (defun my/evil/attach-esc-hook ()
     "Run all escape hooks, if any returns non-nil, then stop there"
     (run-hook-with-args-until-success 'my/evil/esc-hook))
   :init
   (setq
    ;; Undo system Evil should use. If equal to ‘undo-tree’ or
    ;; ‘undo-fu’, those packages must be installed. If equal to
    ;; ‘undo-tree’, ‘undo-tree-mode’ must also be activated. If
    ;; equal to ‘undo-redo’, Evil uses commands natively available
    ;; in Emacs 28
    evil-undo-system 'undo-redo
    ;; evil-collection assumes evil-want-keybinding is set to nil
    ;; and evil-want-integration is set to t before loading evil
    ;; and evil-collection
    evil-want-keybinding nil
    evil-want-integration t
    ;; Restore missing C-u in evil so it scrolls up (like in Vim).
    ;; Otherwise C-u applies a prefix argument.
    evil-want-C-u-scroll t
    ;; C-w deletes a word in Insert state.
    evil-want-C-w-delete t
    ;; All changes made during insert state, including a possible
    ;; delete after a change operation, are collected in a single
    ;; undo step
    evil-want-fine-undo "no"
    ;; Inclusive visual character selection which ends at the
    ;; beginning or end of a line is turned into an exclusive
    ;; selection. Thus if the selected (inclusive) range ends at
    ;; the beginning of a line it is changed to not include the
    ;; first character of that line, and if the selected range
    ;; ends at the end of a line it is changed to not include the
    ;; newline character of that line
    evil-want-visual-char-semi-exclusive t
    ;; ‘Y’ yanks to the end of the line
    evil-want-Y-yank-to-eol t
    ;; Meaning which characters in a pattern are magic.
    ;; The meaning of those values is the same as in Vim
    evil-magic t
    ;; If non-nil abbrevs will be expanded when leaving insert
    ;; state like in Vim, if ‘abbrev-mode’ is on
    evil-want-abbrev-expand-on-insert-exit nil
    ;; Signal the current state in the echo area
    evil-echo-state t
    ;; The = operator converts between leading tabs and spaces.
    ;; Whether tabs are converted to spaces or vice versa depends
    ;; on the value of ‘indent-tabs-mode’
    evil-indent-convert-tabs t
    ;; Vim-style backslash codes are supported in search patterns
    evil-ex-search-vim-style-regexp t
    ;; Substitute patterns are global by default
    evil-ex-substitute-global t
    ;; Column range for ex commands
    evil-ex-visual-char-range t
    ;; Use evil interactive search module instead of isearch
    evil-search-module 'evil-search
    ;; If nil then * and # search for words otherwise for symbols
    evil-symbol-word-search t
    ;; Don't use emacs mode for ibuffer
    ;; evil-emacs-state-modes (delq 'ibuffer-mode evil-emacs-state-modes)
    ;; Cursors
    evil-default-cursor (face-background 'cursor nil t)
    evil-normal-state-cursor 'box
    evil-emacs-state-cursor `(,(face-foreground 'warning) box)
    evil-insert-state-cursor 'bar
    evil-visual-state-cursor 'box)
   :config
   ;; Enable evil-mode globally,
   ;; good for ex-vimmers like me
   (evil-mode t)
   ;; Special
   (evil-make-overriding-map special-mode-map 'normal)
   ;; Compilation
   (evil-set-initial-state 'compilation-mode 'normal)
   ;; Occur
   (evil-make-overriding-map occur-mode-map 'normal)
   (evil-set-initial-state 'occur-mode 'normal)
   (advice-add 'evil-force-normal-state :after 'my/evil/attach-esc-hook)
   ;; Unbind  evil-paste-pop and evil-paste-pop-next
   ;; which breaks evil-mc
   (with-eval-after-load 'evil-maps
     (define-key evil-normal-state-map (kbd "C-n") nil)
     (define-key evil-normal-state-map (kbd "C-p") nil)))
#+end_src

*** Evil collection

A collection of Evil bindings for the parts of Emacs that Evil
does not cover properly by default.

#+begin_src emacs-lisp
  (use-package evil-collection
    :init
    (setq
     ;; If you don't need everything - uncomment and add everything you want
     ;; evil-collection-mode-list '()

     ;; Don't enable vim key bindings in minibuffer
     ;; its a default setting, just want it to be explicitly stated here
     evil-collection-setup-minibuffer nil)
    :config
    (evil-collection-init)
    (nmap
      "C-M-l" 'evil-window-increase-width
      "C-M-h" 'evil-window-decrease-width
      "C-M-k" 'evil-window-increase-height
      "C-M-j" 'evil-window-decrease-height))
#+end_src

*** Multiple cursors

Provides multiple cursors functionality for Emacs when used with
=evil-mode=.

#+begin_src emacs-lisp
  (use-package evil-mc
   :after (general evil)
   :demand t
   :commands
   ;; Enable evil-mc mode for all buffers
   (global-evil-mc-mode)
   :preface
   (defun my/evil-mc/esc ()
     "Clear evil-mc cursors and restore state."
     (when (evil-mc-has-cursors-p)
       (evil-mc-undo-all-cursors)
       (evil-mc-resume-cursors)
       t))
   :config
   (global-evil-mc-mode 1)
   (add-hook 'my/evil/esc-hook 'my/evil-mc/esc)
   (mmap
     "C-n" 'evil-mc-make-and-goto-next-match)
   (when (eq system-type 'darwin)
     ;; Unbind isearch commands
     (unbind-key "s-d")
     (unbind-key "s-g")
     (mmap
       "s-d" 'evil-mc-make-and-goto-next-match
       "s-D" 'evil-mc-make-all-cursors))
   :diminish evil-mc-mode)
#+end_src

*** Matchit

Vim [[https://www.vim.org/scripts/script.php?script_id=39][matchit.vim]] by Benji Fisher is ported into Emacs.

Press “%” to jump between matched tags in Emacs. For example, in
HTML “<div>” and “</div>” are a pair of tags. Many modern
languages are supported.

#+begin_src emacs-lisp
(use-package evil-matchit
 :after evil
 :demand t
 :commands
 (evilmi-jump-items
  evilmi-text-object
  global-evil-matchit-mode)
 :config
 (global-evil-matchit-mode 1))
#+end_src

*** Smartparens

#+begin_src emacs-lisp
(use-package evil-smartparens
  :after (smartparens)
  :config
  (add-hook 'smartparens-enabled-hook #'evil-smartparens-mode))
#+end_src

*** String inflection

Evil operator to cycle text objects through camelCase,
kebab-case, snake_case and UPPER_CASE.

The keybinding is ~g~~. For example, try using ~g~io~.

#+begin_src emacs-lisp
(use-package evil-string-inflection)
#+end_src

*** Surround

This package emulates [[https://github.com/tpope/vim-surround][surround.vim]] by [[https://github.com/tpope][Tim Pope]]. The
functionality is wrapped into a minor mode.

This package uses Evil as its vi layer.

#+begin_src emacs-lisp
(use-package evil-surround
 :after evil
 :demand t
 :commands
 (global-evil-surround-mode
   evil-surround-edit
   evil-Surround-edit
   evil-surround-region)
 :config
 (global-evil-surround-mode 1))
#+end_src

*** Visualstar

This is a port of one of the many visual-star plugins for Vim to
work with evil-mode.

#+begin_src emacs-lisp
(use-package evil-visualstar
 :after evil
 :commands
 (global-evil-visualstar-mode
   evil-visualstar/begin-search
   evil-visualstar/begin-search-forward
   evil-visualstar/begin-search-backward)
 :config
 (global-evil-visualstar-mode))
#+end_src

*** Vimish fold

Adds standard vim keybindings of ~zf~ and ~zd~ to create and delete
folds (via =vimish-fold=) respectively. Also hooks into evil so
the usual vim keybindings for fold toggling (~za~), opening (~zo~),
closing ~(zc~) etc all work as expected with =vimish-fold=.

Finally, also supports navigation between folds using ~zj~ and ~zk~.

#+begin_src emacs-lisp
(use-package evil-vimish-fold
  :after (evil vimish-fold)
  :commands
  (evil-vimish-fold-mode)
  :config
  (evil-vimish-fold-mode 1)
  :hook
  (prog-mode . evil-vimish-fold-mode)
  (text-mode . evil-vimish-fold-mode)
  :diminish evil-vimish-fold-mode)
#+end_src

*** Commentary

Comments stuff out. A port of vim-commentary.

#+begin_src emacs-lisp
(use-package evil-commentary
 :after evil
 :demand t
 :commands
 (evil-commentary-mode
  evil-commentary-yank
  evil-commentary-line)
 :config (evil-commentary-mode)
 :diminish evil-commentary-mode)
#+end_src

*** Numbers

- Increment / Decrement binary, octal, decimal and hex literals
- Works like ~C-a~/~C-x~ in vim, i.e. searches for number up to eol
  and then increments or decrements and keep zero padding up
  (unlike in vim)
- When a region is active, as in evil’s visual mode, all the
  numbers within that region will be incremented/decremented
  (unlike in vim)

#+begin_src emacs-lisp
(use-package evil-numbers
  :after (evil general)
  :demand t
  :config
  (nmap
    "C-c =" 'evil-numbers/inc-at-pt
    "C-c -" 'evil-numbers/dec-at-pt))
#+end_src

** Bookmarks

Most of the keybindings are set by the =evil-collection=
package.

#+begin_src emacs-lisp
(use-package bookmark
  :after general
  :init
  (setq
   bookmark-version-control t
   bookmark-save-flag 1)
  :config
  ;; Uncomment if you prefer going straight to bookmarks on Emacs startup.
  ;; (bookmark-bmenu-list)
  ;; (switch-to-buffer "*Bookmark List*")
  (nmap
    :prefix my/leader
    "b" 'bookmark-set))
#+end_src

** Completion
*** Company

Some of the key bindings are provided by the =evil-collection=.

#+begin_src emacs-lisp
(defun my/company-mode/setup-faces ()
  (interactive)
  "Style company-mode nicely"
  (let* ((bg (face-attribute 'default :background))
         (bg-light (color-lighten-name bg 2))
         (bg-lighter (color-lighten-name bg 5))
         (bg-lightest (color-lighten-name bg 10))
         (ac (face-attribute 'match :foreground)))
    (custom-set-faces
     `(company-tooltip
       ((t (:inherit default :background ,bg-light))))
     `(company-scrollbar-bg ((t (:background ,bg-lightest))))
     `(company-scrollbar-fg ((t (:background ,bg-lighter))))
     `(company-tooltip-selection
       ((t (:inherit font-lock-function-name-face))))
     `(company-tooltip-common
       ((t (:inherit font-lock-constant-face))))
     `(company-preview-common
       ((t (:foreground ,ac :background ,bg-lightest)))))))
#+end_src

#+begin_src emacs-lisp
(use-package company
 :hook
 ;; Use company-mode in all buffers
 (after-init . global-company-mode)
 :custom
 (company-dabbrev-ignore-case nil)
 (company-dabbrev-code-ignore-case nil)
 (company-dabbrev-downcase nil)
 (company-idle-delay 0.2 "adjust this setting according to your typing speed")
 (company-minimum-prefix-length 1)
 (company-tooltip-align-annotations t)

 ;; Disable in org
 (company-global-modes '(not org-mode))
 :config
 (my/company-mode/setup-faces)
 (unbind-key "C-SPC")
 (imap
  "C-SPC" 'company-complete
  "M-SPC" 'company-complete)
 (general-define-key
  :keymaps 'company-active-map
  "C-j" 'company-select-next-or-abort
  "C-k" 'company-select-previous-or-abort
  "C-o" 'company-other-backend
  "C-f" 'company-abort
  "C-d" 'company-show-doc-buffer
  "C-w" 'backward-kill-word)
 :diminish company-mode)
#+end_src

*** Company quickhelp

#+begin_src emacs-lisp
(use-package company-quickhelp
 :after company
 :custom
 (company-quickhelp-delay 3)
 :config
 (general-define-key
  :keymaps 'company-active-map
  "C-c h" 'company-quickhelp-manual-begin))
#+end_src

** Flycheck
*** Mode

On-the-fly syntax checking for GNU Emacs.
See the [[https://www.flycheck.org/en/latest/index.html][flycheck.org]] for more info.

#+begin_src emacs-lisp
(use-package flycheck
  :after (general)
  :demand t
  :commands
  (global-flycheck-mode)
  :init
  (setq-default
   flycheck-disabled-checkers
   '(emacs-lisp-checkdoc
     javascript-jshint
     haskell-stack-ghc
     haskell-ghc
     haskell-hlint))
  (setq
   flycheck-highlighting-mode 'lines
   flycheck-indication-mode 'left-fringe
   flycheck-mode-line-prefix "fly"
   flycheck-javascript-eslint-executable "eslint_d")
  :config
  (global-flycheck-mode 1)
  (nmap
    :prefix my/leader
    "t e" 'flycheck-mode
    "e e" 'flycheck-list-errors
    "e c" 'flycheck-clear
    "e i" 'flycheck-manual
    "e C" 'flycheck-compile
    "e n" 'flycheck-next-error
    "e p" 'flycheck-previous-error
    "e b" 'flycheck-buffer
    "e s" 'flycheck-select-checker
    "e v" 'flycheck-verify-setup
    "e V" 'flycheck-verify-checker)
  ;; Make the error list display like similar lists in contemporary IDEs
  ;; like VisualStudio, Eclipse, etc.
  (add-to-list
   'display-buffer-alist
   `(,(rx bos "*errors*" eos)
     ;; (display-buffer-reuse-window
     ;;  display-buffer-in-side-window)
     (side . bottom)
     (reusable-frames . visible)
     (window-height . 0.33)))
  (unbind-key "C-j" flycheck-error-list-mode-map)
  :diminish flycheck-mode)
#+end_src

*** Flycheck indicator

An Emacs minor-mode to get a fancy mode line indicator for
Flycheck.

#+begin_src emacs-lisp
(use-package flycheck-indicator
  :hook (flycheck-mode . flycheck-indicator-mode))
#+end_src

*** Posframe (disabled)

Displays flycheck error messages via posframe.
I prefer to enable it manually, when needed.

#+begin_src emacs-lisp
(use-package flycheck-posframe
  :after (flycheck)
  :config
  (flycheck-posframe-configure-pretty-defaults)
  (add-to-list
   'flycheck-posframe-inhibit-functions
   #'(lambda () (bound-and-true-p company-backend)))
  (setq flycheck-posframe-border-width 1)
  (set-face-attribute 'flycheck-posframe-background-face nil :inherit nil :background "#111")
  (set-face-attribute 'flycheck-posframe-error-face nil :inherit nil :foreground "red")
  (set-face-attribute 'flycheck-posframe-warning-face nil :foreground "skyblue")
  (set-face-attribute 'flycheck-posframe-info-face nil :foreground "white")
  :custom-face (flycheck-posframe-border-face ((t (:foreground "#353535"))))
  ;; :hook
  ;; (flycheck-mode . flycheck-posframe-mode)
)
#+end_src

*** Proselint (disabled)

Add prose linting to Flycheck.
Depends on the =proselint= command line tool.

TODO: Find a way to disable it in code regions.

#+begin_src emacs-lisp :tangle no
(with-eval-after-load 'flycheck
  (flycheck-define-checker proselint
    "A linter for prose."
    :command ("proselint" source-inplace)
    :error-patterns
    ((warning line-start (file-name) ":" line ":" column ": "
              (id (one-or-more (not (any " "))))
              (message) line-end))
    :modes (text-mode markdown-mode gfm-mode))
  (add-to-list 'flycheck-checkers 'proselint))
#+end_src

** Flyspell

Enables on-the-fly spell checking in Emacs by the means of a
minor mode.

TODO: Cycle through different languages

#+begin_src emacs-lisp
(use-package flyspell
  :ensure nil
  :after (general ispell)
  :custom
  (flyspell-delay 1)
  (flyspell-always-use-popup t)
  :init
  (setq
   flyspell-use-meta-tab nil
   flyspell-mode-line-string ""
   flyspell-auto-correct-binding (kbd ""))
  :hook
  (;; Don’t check comments, thats too annoying
   ;; (prog-mode . flyspell-prog-mode)
   ;; Might be slow in large org-files
   (org-mode . (lambda () (flyspell-mode -1)))
   ((gfm-mode text-mode git-commit-mode) . flyspell-mode))
  :config
  (unbind-key "C-." flyspell-mode-map)
  (nmap
    :prefix my/leader
    "t f" 'flyspell-mode)
  (nmap
    "C-c i b" 'flyspell-buffer
    "C-c i f" 'flyspell-mode))
#+end_src

** Dictionary
*** Powerthesaurus

Powerthesaurus integration for Emacs.

#+begin_src emacs-lisp
(use-package powerthesaurus
 :after general
 :config
 (nmap
   :prefix my/leader
   "L" 'powerthesaurus-lookup-word-at-point))
#+end_src

If you got the =error in process filter= chances are the
=wordnik.com= is down, try again later ;)

*** Define word

Display the definition of word at point in Emacs.

#+begin_src emacs-lisp
(use-package define-word
 :after general
 :config
 (nmap
   :prefix my/leader
   "D" 'define-word-at-point))
#+end_src

*** Wordnut

Interface to WordNet lexical database. Uses =wn= (wordnet) for
searching local wordnet db; injects results into =*WordNut*=
buffer.

#+begin_src emacs-lisp
(use-package wordnut
  :if (executable-find "wordnet")
  :config
  (nmap
    :prefix my/leader
    "d" 'wordnut-lookup-current-word))
#+end_src

*** Synosaurus (disabled)

#+begin_src emacs-lisp :tangle no
(use-package synosaurus
 :after (general)
 :config
 (nmap
  :prefix my/leader
  "; ;" 'synosaurus-lookup
  "; '" 'synosaurus-choose-and-replace))
#+end_src

** Dired
*** Constants (file extensions)

#+begin_src emacs-lisp
(defconst my/dired-html-files-extensions
  '("htm" "html" "xhtml" "phtml" "haml"
    "asp" "aspx" "xaml" "php" "jsp")
  "HTML files extensions")
(defconst my/dired-styles-files-extensions
  '("css" "sass" "scss" "less")
  "Styles files extensions")
(defconst my/dired-xml-files-extensions
  '("xml" "xsd" "xsl" "xslt" "wsdl")
  "XML files extensions")
(defconst my/dired-document-files-extensions
  '("doc" "docx" "ppt" "pptx" "xls" "xlsx"
    "csv" "rtf" "djvu" "epub""wps" "pdf" "texi" "tex"
    "odt" "ott" "odp" "otp" "ods" "ots"
    "odg" "otg")
  "Document files extensions")
(defconst my/dired-text-files-extensions
  '("txt" "md" "org" "ini" "conf" "rc" "vim" "vimrc" "exrc")
  "Text files extensions")
(defconst my/dired-sh-files-extensions
  '("sh" "bash" "zsh" "fish" "csh" "ksh"
    "awk" "ps1" "psm1" "psd1" "bat" "cmd")
  "Shell files extensions")
(defconst my/dired-source-files-extensions
  '("py" "c" "cc" "cpp" "cxx" "c++" "h" "hpp" "hxx" "h++"
    "java" "pl" "rb" "el" "pl" "pm" "l" "jl" "f90" "f95"
    "R" "php" "hs" "purs" "coffee" "ts" "js" "json" "m" "mm"
    "ml" "asm" "vb" "ex" "exs" "erl" "go" "clj" "cljs"
    "sql" "yml" "yaml" "toml" "rs" "idr" "cs" "mk" "make" "swift"
    "rake" "lua")
  "Source files extensions")
(defconst my/dired-compressed-files-extensions
  '("zip" "bz2" "tgz" "txz" "gz" "xz" "z" "Z"
    "war" "ear" "rar" "sar" "xpi" "apk" "tar" "7z"
    "gzip" "001" "ace" "lz"
    "lzma" "bzip2" "cab" "jar" "iso")
  "Compressed files extensions")
(defconst my/dired-image-files-extensions
  '("bmp" "jpg" "jpeg" "gif" "png" "tiff"
    "ico" "svg" "psd" "pcd" "raw" "exif"
    "BMP" "JPG" "PNG")
  "Image files extensions")
(defconst my/dired-audio-files-extensions
  '("mp3" "MP3" "ogg" "OGG" "flac" "FLAC" "wav" "WAV")
  "Dired Audio files extensions")
(defconst my/dired-video-files-extensions
  '("vob" "VOB" "mkv" "MKV" "mpe" "mpg" "MPG"
    "mp4" "MP4" "ts" "TS" "m2ts"
    "M2TS" "avi" "AVI" "mov" "MOV" "wmv"
    "asf" "m2v" "m4v" "mpeg" "MPEG" "tp")
  "Dired Video files extensions")
(defconst my/dired-misc-files-extensions
  '("DS_Store" "projectile" "cache" "elc" "dat" "meta")
  "Misc files extensions")
#+end_src

*** Dired

Setup dired.

#+begin_src emacs-lisp
(use-package dired
 :after general
 :ensure nil
 :custom
 ;; Do not bind C-x C-j since it's used by jabber.el
 (dired-bind-jump nil)
 :init
 ;; Prevents dired from creating an annoying popup
 ;; when dired-find-alternate-file is called
 (setq
  ;; If there is a dired buffer displayed in the next window,
  ;; use its current directory
  dired-dwim-target t
  dired-omit-verbose nil
  ;; human readable filesize
  dired-listing-switches "-ahlv"
  ;; recursive copy & delete
  dired-recursive-deletes 'always
  dired-recursive-copies 'always)
 (setq
  dired-garbage-files-regexp
  "\\.\\(?:aux\\|out\\|bak\\|dvi\\|log\\|orig\\|rej\\|toc\\|class\\)\\'")
 ;; Enable omit mode
 ;; (setq-default dired-omit-mode t)
 ;; Hide autosave files
 ;; (setq-default dired-omit-files "^\\.?#")
 ;; Uncomment the line below if you want to hide dot files
 ;; (setq-default dired-omit-files (concat dired-omit-files "\\|^\\.[^\\.]"))
 (setq
  dired-omit-extensions
  '("CVS" "RCS" ".o" "~" ".bin" ".lbin" ".fasl" ".ufsl" ".a" ".ln" ".blg"
    ".bbl" ".elc" ".lof" ".glo" ".idx" ".aux" ".glob" ".vo"
    ".lot" ".fmt" ".tfm" ".class" ".DS_Store"
    ".fas" ".lib" ".x86f" ".sparcf" ".lo" ".la" ".toc" ".aux" ".cp" ".fn"
    ".ky" ".pg" ".tp" ".vr" ".cps" ".fns" ".kys" ".pgs" ".tps" ".vrs"
    ".idx" ".lof" ".lot" ".glo" ".blg" ".bbl" ".cp" ".cps" ".fn" ".fns"
    ".ky" ".kys" ".pg" ".pgs" ".tp" ".tps" ".vr" ".vrs" ".gv" ".gv.pdf"))
 ;; macOS ls command doesn't support "--dired" option
 (when (string= system-type "darwin")
   (setq dired-use-ls-dired nil))
 :config
 (put 'dired-find-alternate-file 'disabled nil)
 (nmap
   :prefix my/leader
   "j" 'dired-jump)
 (nmap 'dired-mode-map
   "gg" 'evil-goto-first-line
   "G" 'evil-goto-line
   "b" 'bookmark-set)
 :hook
 (dired-mode . dired-hide-details-mode)
 (dired-mode . hl-line-mode)
 :diminish dired-mode)
#+end_src

*** Dired hide dotfiles

Allows to easily show/hide dotfiles.

#+begin_src emacs-lisp
(use-package dired-hide-dotfiles
 :config
 (nmap 'dired-mode-map
   "." 'dired-hide-dotfiles-mode)
 :hook
 (dired-mode . dired-hide-dotfiles-mode))
#+end_src

*** Dired fl

Extra Emacs font lock rules for a more colourful dired.
See the [[https://github.com/purcell/diredfl][package repo]] for more info.

#+begin_src emacs-lisp
(use-package diredfl
 :after dired
 :hook
 (dired-mode . diredfl-mode))
#+end_src

*** Dired rsync

Adds a single command ~dired-rsync~ which allows the user to
copy marked files in a dired buffer via =rsync=. This is useful,
especially for large files, because the copy happens in the
background and doesn’t lock up Emacs. It is also more efficient
than using tramps own encoding methods for moving data between
systems.

#+begin_src emacs-lisp
(use-package dired-rsync
 :config
 (nmap 'dired-mode-map
   "r" 'dired-rsync))
#+end_src

*** Dired launch

Launch an external application from dired.

#+begin_src emacs-lisp
(use-package dired-launch
 :hook
 (dired-mode . dired-launch-mode)
 :init
 ;; Use xdg-open as the default launcher
 (setq dired-launch-default-launcher '("xdg-open"))
 :config
 (nmap 'dired-launch-mode-map
   "l" 'dired-launch-command))
#+end_src

*** Dired+

Setup [[https://github.com/emacsmirror/dired-plus][dired+]].

#+begin_src emacs-lisp
(use-package dired+
 :after dired
 :quelpa
 (dired+ :fetcher github :repo "emacsmirror/dired-plus")
 :commands
 (dired-read-dir-and-switches)
 :init
 (setq
  diredp-hide-details-initially-flag nil
  diredp-hide-details-propagate-flag nil))
#+end_src

*** Dired hacks.

Collection of useful dired additions.

**** Prerequisites

First, we need to install some =dired hacks= dependencies.

#+begin_src emacs-lisp
(use-package dash)
(use-package dired-hacks-utils
 :after dired
 :demand t)
#+end_src

**** Filter

The filtering system is designed after =ibuffer=: every dired
buffer has associated "filter stack" where user can push filters
(predicates). These filters are by default logically "anded",
meaning, only the files satsifying all the predicates are shown.

#+begin_src emacs-lisp
(use-package dired-filter
 :after dired
 :hook
 (dired-mode . dired-filter-group-mode)
 :init
 (setq
  dired-filter-keep-expanded-subtrees nil
  dired-filter-group-saved-groups
  '(("default"
     ("video" (extension "mkv" "avi" "mp4" "webm"))
     ("archives" (extension "zip" "rar" "gz" "bz2" "tar"))
     ("pdf" (extension "pdf"))
     ("tex" (extension "tex" "bib"))
     ("js" (extension "js"))
     ("ts" (extension "ts"))
     ("json" (extension "json"))
     ("styles" (extension "css" "scss" "sass" "less"))
     ("html" (extension "html"))
     ("haskell" (extension "hs"))
     ("idris" (extension "idr"))
     ("purescript" (extension "purs"))
     ("c/c++"
      (extension
       "c" "cc" "cpp" "cxx" "c++"
       "h" "hpp" "hxx" "h++"))
     ("org" (extension "org"))
     ("lisp" (extension "el"))
     ("word" (extension "docx" "doc"))
     ("excel" (extension "xlsx" "xls"))
     ("text" (extension "txt"))
     ("svg" (extension "svg"))
     ("shell"
      (extension
       "sh" "bash" "zsh" "fish" "csh" "ksh"
       "awk" "ps1" "psm1" "psd1" "bat" "cmd"))
     ("audio"
      (extension
       "mp3" "ogg" "flac" "wav"))
     ("img"
      (extension
       "bmp" "jpg" "jpeg" "gif" "png" "tiff"
       "ico" "svg" "psd" "pcd" "raw" "exif")))))
 (nmap 'dired-mode-map
   "/" 'dired-filter-map
   "C-c C-t" 'dired-filter-group-toggle-header
   "C-c C-g" 'dired-filter-group-mode))
#+end_src

**** Avfs

#+begin_src emacs-lisp
(use-package dired-avfs
 :after (dired dired-hack-utils))
#+end_src

**** Open

#+begin_src emacs-lisp
(use-package dired-open
 :after (dired dired-hack-utils))
#+end_src

**** Narrow

#+begin_src emacs-lisp
(use-package dired-narrow
 :after (general dired dired-hack-utils)
 :config
 (nmap 'dired-mode-map
   "," 'dired-narrow))
#+end_src

*** Peep dired

Peep at files in another window from dired buffers.

#+begin_src emacs-lisp
(use-package peep-dired
 :after (dired general)
 :preface
 (defconst my/peep-dired/ignored-extensions
   (append
    my/dired-document-files-extensions
    my/dired-compressed-files-extensions
    my/dired-image-files-extensions
    my/dired-audio-files-extensions
    my/dired-video-files-extensions
    my/dired-misc-files-extensions))
 :hook
 (peep-dired . evil-normalize-keymaps)
 :init
 (setq
  peep-dired-ignored-extensions my/peep-dired/ignored-extensions
  peep-dired-cleanup-on-disable t
  peep-dired-enable-on-directories t)
 :config
 (nmap 'dired-mode-map
   "C-c C-v" 'peep-dired)
 (general-define-key
  :states '(normal)
  :keymaps 'peep-dired-mode-map
  "j" 'peep-dired-next-file
  "k" 'peep-dired-prev-file))
#+end_src

*** Icons (disabled)

#+begin_src emacs-lisp :tangle no
(use-package all-the-icons-dired
 :hook
 (dired-mode . all-the-icons-dired-mode))
#+end_src
** Navigation
*** Ace window

Quickly switch between windows (splits).

When there are two windows, =ace-window= will call
~other-window~. If there are more, each window will have the
first character of its window label highlighted at the upper
left of the window.

See the [[https://github.com/abo-abo/ace-window][package repo]] for more info.

#+begin_src emacs-lisp
(use-package ace-window
 :custom
 (aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l) "Use home row for selecting.")
 (aw-scope 'frame "Highlight only current frame.")
 :config
 (nmap
   :prefix my/leader
   "w" 'ace-window))
#+end_src

*** Windows
**** Winner

Undo/redo window layout (split pane) config.

#+begin_src emacs-lisp
(use-package winner
 :demand t
 :init
 (setq
  winner-dont-bind-my-keys t
  winner-boring-buffers
  '("*Completions*"
    "*Compile-Log*"
    "*inferior-lisp*"
    "*Fuzzy Completions*"
    "*Apropos*"
    "*Help*"
    "*cvs*"
    "*Buffer List*"
    "*Ibuffer*"
    "*esh command on file*"))
 :config
 (winner-mode 1)
 :config
 (nmap
   :prefix my/leader
   "U" 'winner-undo
   "R" 'winner-redo)
 (when (eq system-type 'darwin)
   (general-define-key
    "C-s-[" 'winner-undo
    "C-s-]" 'winner-redo)))
#+end_src

**** Transpose frame

Provides some interactive functions which allows users to
transpose windows arrangement in currently selected frame.

#+begin_src emacs-lisp
(use-package transpose-frame
  :config
  (nmap
    "C-M-SPC" 'transpose-frame
    "C-M-u" 'flip-frame
    "C-M-i" 'flip-frame
    "C-M-y" 'flop-frame
    "C-M-o" 'flop-frame))
#+end_src

**** Zoom

Zoom a window to display as a single window temporarily.

#+begin_src emacs-lisp
(use-package zoom-window
  :custom
  (zoom-window-mode-line-color "#000000")
  :config
  (nmap
    :prefix my/leader
    "RET" 'zoom-window-zoom))
#+end_src

*** Expand region

Increases the selected region by semantic units.

#+begin_src emacs-lisp
(use-package expand-region
 :after (general)
 :config
 (vmap
   "v" 'er/expand-region)
 (when (eq system-type 'darwin)
   (vmap
     "s-'" 'er/expand-region)))
#+end_src

*** Ivy

Setup [[https://github.com/abo-abo/swiper][ivy]].

#+begin_src emacs-lisp
(use-package ivy
  :preface
  (defun my/ivy/switch-buffer-occur ()
    "Occur function for `ivy-switch-buffer' using `ibuffer'."
    (ibuffer nil (buffer-name) (list (cons 'name ivy--old-re))))
  :commands
  (ivy-mode ivy-set-occur)
  :custom
  (ivy-count-format "%d/%d " "Show anzu-like counter")
  :custom-face
  ;; (ivy-current-match ((t (:inherit 'hl-line))))
  ;; TODO: Make this theme-dependent (use :inherit)
  (ivy-current-match ((t (:background "#333333" :foreground "#fff"))))
  :init
  (setq
   ;; Enable bookmarks and recentf
   ;; (add 'recentf-mode' and bookmarks to 'ivy-switch-buffer')
   ivy-use-virtual-buffers t
   ;; Display full buffer name
   ivy-virtual-abbreviate 'full
   ;; Number of result lines to display
   ivy-height 12
   ;; Current input becomes selectable as a candidate
   ;; solves the issue of creating a file or
   ;; a directory `foo` when a file `foobar` already exists
   ;; another way is to use C-M-j
   ivy-use-selectable-prompt t
   ;; Wrap around ivy results
   ivy-wrap t
   ;; Omit ^ at the beginning of regexp
   ivy-initial-inputs-alist nil)
  :config
  (ivy-mode 1)
  ;; Enable fuzzy searching everywhere except:
  ;; - Switching buffers with Ivy
  ;; - Swiper
  ;; - Counsel projectile (find-file)
  (setq
   ivy-re-builders-alist
   '((swiper . ivy--regex-plus)
     (swiper-isearch . regexp-quote)
     (ivy-switch-buffer . ivy--regex-plus)
     (counsel-projectile-find-file . ivy--regex-plus)))
  (ivy-set-occur 'ivy-switch-buffer 'my/ivy/switch-buffer-occur)
  (nmap
    :prefix my/leader
    "b" 'ivy-switch-buffer)
  (nmap
    "C-c v" 'ivy-push-view
    "C-c V" 'ivy-pop-view)
  (when (eq system-type 'darwin)
    (general-define-key
     "s-b" 'ivy-switch-buffer
     "M-s-b" 'ivy-resume))
  (general-define-key
   :keymaps 'ivy-minibuffer-map
   "C-t" 'ivy-toggle-fuzzy
   "C-j" 'ivy-next-line
   "C-k" 'ivy-previous-line
   "C-n" 'ivy-next-history-element
   "C-p" 'ivy-previous-history-element
   "<C-return>" 'ivy-immediate-done
   "C-l" 'ivy-immediate-done
   "C-w" 'ivy-backward-kill-word)
  :diminish ivy-mode)
#+end_src

*** Ivy posframe (disabled)

It doesn't work with evil-mode.

#+begin_src emacs-lisp :tangle no
(use-package ivy-posframe
  :after (posframe)
  :config
  (setq ivy-posframe-height-alist
        '((swiper . 20)
          (t. 20)))

  (setq
   ivy-posframe-display-functions-alist
   '((swiper . nil)
     (counsel-bookmark . ivy-posframe-display-at-frame-center)
     (counsel-find-file . ivy-posframe-display-at-frame-center)
     (counsel-git-grep . ivy-posframe-display-at-frame-center)
     (counsel-package . ivy-posframe-display-at-frame-center)
     (counsel-load-theme . ivy-posframe-display-at-frame-center)
     (counsel-rg . ivy-posframe-display-at-frame-center)
     (counsel-fzf . ivy-posframe-display-at-frame-center)
     (counsel-imenu . ivy-posframe-display-at-frame-center)
     (counsel-describe-variable . ivy-posframe-display-at-frame-center)
     (counsel-describe-face . ivy-posframe-display-at-frame-center)
     (counsel-describe-function . ivy-posframe-display-at-frame-center)
     (counsel-unicode-char . ivy-posframe-display-at-frame-top-center)
     (counsel-ace-link . ivy-posframe-display-at-frame-top-center)
     (complete-symbol . ivy-posframe-display-at-point)
     (counsel-M-x . ivy-posframe-display-at-frame-center)
     (t . ivy-posframe-display)))
  (ivy-posframe-mode 1))
#+end_src

Ivy icons (disabled)

#+begin_src emacs-lisp :tangle no
(use-package all-the-icons-ivy
 :after (ivy projectile)
 :commands
 (all-the-icons-ivy-setup)
 :custom
 (all-the-icons-ivy-buffer-commands '() "Don't use for buffers.")
 (all-the-icons-ivy-file-commands
  '(counsel-find-file
    counsel-file-jump
    counsel-recentf
    counsel-projectile-find-file
    counsel-projectile-find-dir) "Prettify more commands.")
 :config
 (all-the-icons-ivy-setup))
#+end_src

**** Rich

More friendly interface for ivy.
Here is the [[https://github.com/Yevgnen/ivy-rich][package repo]].

#+begin_src emacs-lisp
(use-package ivy-rich
 :after ivy
 :commands
 ivy-rich-mode
 :init
 (setq
  ;; To abbreviate paths using abbreviate-file-name
  ;; (e.g. replace “/home/username” with “~”)
  ivy-rich-path-style 'abbrev)
 :config
 (ivy-rich-mode 1))
#+end_src

**** Xref

#+begin_src emacs-lisp
(use-package ivy-xref
 :custom
 (xref-show-xrefs-function 'ivy-xref-show-xrefs "Use Ivy to show xrefs"))
#+end_src

**** Flyspell correct

#+begin_src emacs-lisp
(use-package flyspell-correct-ivy
 :after (general flyspell ivy)
 :demand t
 :init
 (setq flyspell-correct-interface 'flyspell-correct-ivy)
 :config
 (nmap 'flyspell-mode-map
   "C-;" 'flyspell-correct-next))
#+end_src

*** IBuffer VC

Lets you:

- Group your buffers by their parent vc root directory
- See the VC status of the associated files
- Sort buffers by their VC status
- Display buffer filenames that are relative to their VC root

#+begin_src emacs-lisp
(use-package ibuffer-vc
  :custom
  (ibuffer-formats
   '((mark modified read-only vc-status-mini " "
           (name 18 18 :left :elide)
           " "
           (size 9 -1 :right)
           " "
           (mode 16 16 :left :elide)
           " "
           filename-and-process)) "include vc status info")
  :hook
  (ibuffer . (lambda ()
               (ibuffer-vc-set-filter-groups-by-vc-root)
               (unless (eq ibuffer-sorting-mode 'alphabetic)
                 (ibuffer-do-sort-by-alphabetic)))))
#+end_src

*** FZF

#+begin_src emacs-lisp
(use-package fzf)
#+end_src

*** Counsel

Setup counsel.

#+begin_src emacs-lisp
(use-package counsel
 :after general
 :init
 ;; Much faster than grep
 (setq
  counsel-git-cmd "rg --files"
  ;; Truncate all lines that are longer than 120 characters
  counsel-grep-base-command
  "rg -i -M 120 --no-heading --line-number --color never %s .")
 :config
 (nmap
   "C-f" 'counsel-imenu)
 (imap
   "C-," 'counsel-unicode-char)
 (nmap
   :prefix my/leader
   "f" 'counsel-rg
   "F" 'counsel-fzf
   "h v" 'counsel-describe-variable
   "h f" 'counsel-describe-function
   "h F" 'counsel-describe-face)
 (when (eq system-type 'darwin)
   (nmap
     "s-f" 'counsel-rg))
 (nmap
   "M-x" 'counsel-M-x)
 (nmap
   :prefix "C-x"
   "C-r" 'find-file
   "C-f" 'counsel-find-file
   "C-g" 'counsel-git-grep
   "p" 'counsel-package)
 (nmap
   :prefix my/leader
   my/leader 'counsel-M-x
   "T" 'counsel-load-theme
   "J" 'counsel-bookmark))
#+end_src

*** Ace link

Package for selecting a link to jump to.

#+begin_src emacs-lisp
(use-package ace-link
 :after (counsel)
 :commands
 (ace-link-setup-default)
 :config
 (nmap
   "C-c C-l" 'counsel-ace-link)
 :config
 (ace-link-setup-default))
#+end_src

*** Counsel etags

#+begin_src emacs-lisp
(use-package counsel-etags
  :after (general counsel)
  :init
  ;; Don't ask before rereading the TAGS files if they have changed
  (setq tags-revert-without-query t)
  ;; Don't warn when TAGS files are large
  (setq large-file-warning-threshold nil)
  ;; (setq counsel-etags-extra-tags-files '("./codex.tags"))
  ;; Use a custom command to update tags
  ;; (setq counsel-etags-update-tags-backend
  ;;       (lambda (src-dir) (shell-command "make tags")))
  :config
  (nmap
    "C-]" 'counsel-etags-find-tag-at-point)
  :init
  (add-hook 'prog-mode-hook
    (lambda ()
      (add-hook 'after-save-hook
        'counsel-etags-virtual-update-tags 'append 'local)))
  :config
  ;; (with-eval-after-load 'counsel-etags
  ;;   (push "TAGS" counsel-etags-ignore-filenames)
  ;;   (push "build" counsel-etags-ignore-directories))
  (setq counsel-etags-update-interval 60))
#+end_src

*** Counsel ffdata

Access your Firefox bookmarks and history in Emacs.

#+begin_src emacs-lisp :tangle no
(use-package counsel-ffdata
 :after (general)
 :config
 (nmap
  :prefix my/leader
  "1" 'counsel-ffdata-firefox-history
  "2" 'counsel-ffdata-firefox-bookmarks))
#+end_src

*** Swiper

Ivy-enhanced alternative to =isearch=.

#+begin_src emacs-lisp
(use-package swiper
  :after general
  :init
  ;; Recenter after swiper is finished
  (setq swiper-action-recenter t)
  :config
  (general-define-key
   :keymaps 'swiper-map
   "C-r" 'swiper-query-replace)
  (general-define-key
   :keymaps 'ivy-mode-map
   "C-k" 'ivy-previous-line)
  (nmap
    "C-s" 'swiper))
#+end_src

*** Dumb jump

Dumb Jump is an Emacs "jump to definition" package with support
for 40+ programming languages that favors "just working".

#+begin_src emacs-lisp
(use-package dumb-jump
 :custom
 (dumb-jump-selector 'ivy)
 (dumb-jump-prefer-searcher 'ag)
 (nmap
   "C-c C-j" 'dumb-jump-go))
#+end_src

*** Avy

#+begin_src emacs-lisp
(use-package avy
 :config
 (mmap
   :prefix "C-c j"
   "c" 'avy-goto-char
   "w" 'avy-goto-word-1
   "l" 'avy-goto-line))
#+end_src

*** Avy zap (disabled)

Zap to char using `avy'.
Disabled: I have no idea what it is doing.

#+begin_src-lisp :tangle no
(use-package avy-zap
 :bind
 ([remap zap-to-char] . avy-zap-to-char))
#+end_src

*** Avy flycheck

Jump to and fix syntax errors using flycheck with avy interface.

#+begin_src emacs-lisp
(use-package avy-flycheck
 :after (general avy flycheck)
 :commands
 avy-flycheck-setup
 :init
 (setq avy-flycheck-style 'pre)
 :config
 (avy-flycheck-setup)
 (nmap
   :prefix my/leader
   "n e" 'avy-flycheck-goto-error))
#+end_src

*** Tmux integration

Seamlessly navigate between Emacs and Tmux splits. See the
[[https://github.com/keith/evil-tmux-navigator][package repo]] for more info.

#+begin_src emacs-lisp
(use-package navigate
 :quelpa
 (navigate :fetcher github :repo "keith/evil-tmux-navigator")
 :config
 (require 'navigate))
#+end_src

** Projectile
*** Setup

#+begin_src emacs-lisp
(use-package projectile
 :after (general ivy)
 :init
 ;; Projectile requires this setting for ivy completion
 (setq
  projectile-indexing-method 'alien
  projectile-completion-system 'ivy
  ;; Useful for very large projects
  projectile-enable-caching t
  projectile-sort-order 'recently-active
  projectile-mode-line nil
  projectile-use-git-grep t
  projectile-file-exists-remote-cache-expire (* 10 60)
  projectile-file-exists-local-cache-expire (* 5 60)
  projectile-require-project-root nil
  projectile-globally-ignored-directories
  '(".git" ".svn" ".hg" "_darcs"
    "out" "output" "repl"
    "dist" "dist-newstyle"
    ".vagrant"
    "project" "target" "compiled" ".bundle"
    "*build" "jar"
    "venv" ".virtualenv"
    "*__pycache__*" "*.egg-info"
    ".tox" ".cache" ".cabal-sandbox" ".stack-work"
    ".emacs.d" "elpa" "site-lisp"
    "bin" "eclipse-bin" ".ensime_cache" ".idea"
    ".eunit" ".bzr"
    "vendor" "uploads" "assets"
    "node_modules" "bower_components"
    "_build" ".psci_modules" ".pulp-cache")
  projectile-globally-ignored-files
  '(".DS_Store" "TAGS" ".nrepl-port" "*.gz" "*.pyc" ".purs-repl"
    "*.jar" "*.tar.gz" "*.tgz" "*.zip" "package-lock.json"))
 :config
 ;; Use projectile everywhere
 (projectile-mode)
 ;; Remove the mode name for projectile-mode, but show the project name
 ;; :delight '(:eval (concat " " (projectile-project-name)))
 (nmap
   :prefix my/leader
   "!" 'projectile-run-async-shell-command-in-root
   "DEL" 'projectile-invalidate-cache)
 (nmap
   "C-SPC SPC" 'projectile-commander)
 :diminish projectile-mode)
#+end_src

*** Counsel

Projectile replacements.

#+begin_src emacs-lisp
(use-package counsel-projectile
 :after (counsel projectile general)
 :config
 (nmap
   "C-q" 'counsel-projectile-find-file
   "C-a" 'counsel-projectile-switch-to-buffer
   "C-p" 'counsel-projectile-switch-project))
#+end_src

** Git
*** With editor

Makes it easy to use the Emacsclient as the =$EDITOR= of child processes, making
sure they know how to call home. For remote processes a substitute is provided,
which communicates with Emacs on standard output instead of using a socket as
the Emacsclient does.

#+begin_src emacs-lisp
(use-package with-editor
 :config
 (nmap 'with-editor-mode-map
   ;; it closes the Magit's git-commit window
   ;; instead of switching to evil-normal-state
   ;; [escape] 'with-editor-cancel
   "RET" 'with-editor-finish)
 (evil-set-initial-state 'with-editor-mode 'insert))
#+end_src

*** Git messenger

Popup commit message for current line.

#+begin_src emacs-lisp
(use-package git-messenger
  :config
  (nmap
    :prefix my/leader
    "g M" 'git-messenger:popup-message))
#+end_src

*** Magit

#+begin_src emacs-lisp
(use-package magit
  :demand t
  :custom
  (magit-log-buffer-file-locked t)
  (magit-refs-show-commit-count 'all)
  (magit-save-repository-buffers 'dontask)
  (git-messenger:use-magit-popup t)
  :config
  ;; Unset pager as it is not supported properly inside emacs.
  (setenv "GIT_PAGER" ""))
#+end_src

*** Magit todos (disabled)

Might be slow.

#+begin_src emacs-lisp :tangle no
(use-package magit-todos
 :after (magit general)
 :commands
 (magit-todos-mode)
 :config
 (magit-todos-mode)
 (nmap
   :prefix my/leader
   "/" 'magit-todos-list))
#+end_src

*** Forge

Forge allows you to work with Git forges—such as Github and
Gitlab—from the comfort of =Magit= and the rest of Emacs.

See the [[https://emacsair.me/2018/12/19/forge-0.1/][announcement]] and the [[https://magit.vc/manual/forge/][manual]] for more info.

#+begin_src emacs-lisp
(use-package forge)
#+end_src

*** Git gutter

#+begin_src emacs-lisp
(use-package git-gutter
 :after (general)
 :demand t
 :commands
 (global-git-gutter-mode)
 :config
 ;; (global-git-gutter-mode)
 ;; (git-gutter:linum-setup)
 (custom-set-variables
  '(git-gutter:update-interval 2)
  '(git-gutter:modified-sign "*")
  '(git-gutter:added-sign "+")
  '(git-gutter:deleted-sign "-")
  '(git-gutter:hide-gutter nil))
 (set-face-foreground 'git-gutter:modified "#da8548")
 (set-face-foreground 'git-gutter:added "#98be65")
 (set-face-foreground 'git-gutter:deleted "#ff6c6b")
 (nmap
   :prefix my/leader
   "t g" 'git-gutter-mode)
 :diminish git-gutter-mode)
#+end_src

*** Time machine

Step through historic versions of git controlled file.

#+begin_src emacs-lisp
(use-package git-timemachine)
#+end_src

*** Syntactic modes

#+begin_src emacs-lisp
(use-package gitattributes-mode)

(use-package gitignore-mode
  :mode
  ("/\\.dockerignore$" . gitignore-mode))

(use-package gitconfig-mode)
#+end_src

*** Gist

#+begin_src emacs-lisp
(use-package gist
 :after general
 :config
 (nmap
   :prefix my/leader
   "G l" 'gist-list
   "G b" 'gist-buffer
   "G B" 'gist-buffer-private
   "G r" 'gist-region
   "G R" 'gist-region-private))
#+end_src

** Shell
*** Pager

Make less work inside Emacs shells. But disable it as the
default pager.

#+begin_src emacs-lisp
(setenv "LESS" "--dumb --prompt=s")
(setenv "PAGER" "")
#+end_src

*** Eshell

#+begin_src emacs-lisp
  (use-package eshell
    :ensure nil
    ;; :config
    ;; (unbind-key "C-j" eshell-mode-map)
    ;; (unbind-key "C-k" eshell-mode-map)
  )
#+end_src

*** EM-smart

#+begin_src emacs-lisp :tangle no
(use-package em-smart
 :ensure nil
 :config
 (eshell-smart-initialize)
 :custom
 (eshell-where-to-jump 'begin)
 (eshell-review-quick-commands nil)
 (eshell-smart-space-goes-to-end t))
#+end_src

*** Esh help

#+begin_src emacs-lisp
(use-package esh-help
 :commands
 (setup-esh-help-eldoc)
 :config
 (setup-esh-help-eldoc))
#+end_src

*** Esh autosuggest

#+begin_src emacs-lisp
(use-package esh-autosuggest
 :hook (eshell-mode . esh-autosuggest-mode))
#+end_src

#+begin_src emacs-lisp
(use-package eshell-prompt-extras
 :after esh-opt
 :commands
 (epe-theme-dakrone)
 :custom
 (eshell-prompt-function #'epe-theme-dakrone))
#+end_src

*** Fringe status

Command execution status indicator in the fringe.

#+begin_src emacs-lisp
(use-package eshell-fringe-status
  :hook
  (eshell-mode . eshell-fringe-status-mode))
#+end_src

*** EShell toggle

#+begin_src emacs-lisp
(use-package eshell-toggle
 :after (general)
 :custom
 (eshell-toggle-use-projectile-root t)
 (eshell-toggle-run-command nil)
 :config
 (nmap
   :prefix my/leader
   "`" 'eshell-toggle))
#+end_src

#+begin_src emacs-lisp

#+end_src

** SSH
** Snippets
*** Yasnippet

#+begin_src emacs-lisp
(use-package yasnippet
  :demand t
  :init
  (setq
   yas-wrap-around-region t
   yas-indent-line t)
  :config
  (yas-global-mode 1)
  (nmap
    :prefix my/leader
    "y i" 'yas-insert-snippet
    "y n" 'yas-new-snippet
    "y v" 'yas-visit-snippet-file
    "y r" 'yas-reload-all)
  (imap
    "C-l" 'yas-insert-snippet)
  :diminish yas-minor-mode)
#+end_src

#+begin_src emacs-lisp
(use-package ivy-yasnippet
 :config
 (imap
   "C-s" 'ivy-yasnippet))
#+end_src

#+begin_src emacs-lisp
(use-package auto-yasnippet
 :after (general yasnippet)
 :config
 (nmap
   :prefix my/leader
   "y c" 'aya-create
   "y e" 'aya-expand
   "y o" 'aya-open-line))
#+end_src

*** Yasnippet snippets

A collection of yasnippet snippets for many languages.

#+begin_src emacs-lisp
(use-package yasnippet-snippets)
#+end_src

*** Yatemplate

Simple file templates for Emacs with =YASnippet=.

#+begin_src emacs-lisp
(use-package yatemplate
  :init
  (yatemplate-fill-alist))
#+end_src

** Org
*** Main
**** Setup

#+begin_src emacs-lisp
(use-package org
  :after (general counsel)
  :mode ("\\.org\\'" . org-mode)
  :commands
  (org-babel-do-load-languages)
  :init
#+end_src

**** Config

Visually indent sections. This looks better for smaller files.
Also, disallow editing invisible areas.

#+begin_src emacs-lisp
(setq org-startup-indented t)
(setq org-catch-invisible-edits 'error)
#+end_src

This feature came to Org in version 8. It lets you type “normal
quotes” in the org buffer, as opposed to =“this latex stuff”=,
and will transform them on export so that your HTML/text output
looks nice and your latex export looks nice!

#+begin_src emacs-lisp
(setq org-export-with-smart-quotes t)
#+end_src

Forces to mark all child tasks as =DONE= before you can mark the
parent as =DONE=.

#+begin_src emacs-lisp
(setq org-enforce-todo-dependencies t)
#+end_src

Allows displaying UTF-8 chars like ~\alpha~.

#+begin_src emacs-lisp
(setq org-pretty-entities t)
#+end_src

Insert an annotation in a task when it is marked as done
including a timestamp of when exactly that happened.

#+begin_src emacs-lisp
(setq org-log-done 'time)
#+end_src

Insert annotations when you change the deadline of a task, which
will note the previous deadline date and when it was changed.

#+begin_src emacs-lisp
(setq org-log-redeadline (quote time))
#+end_src

Same as above, but for the scheduled dates.

#+begin_src emacs-lisp
(setq org-log-reschedule (quote time))
#+end_src

Hide leading stars.

#+begin_src emacs-lisp
(setq org-hide-leading-stars t)
#+end_src

Use syntax highlighting in source blocks while editing.

#+begin_src emacs-lisp
(setq org-src-fontify-natively t)
#+end_src

Noticeable ellipsis. Others:

~▼~, ~↴~, ~⬎~, ~⤷~, ~…~, ~⤵~, ~⋱~, ~•~

#+begin_src emacs-lisp
(setq org-ellipsis "…")
#+end_src

Keep org files in =Dropbox=.
And all of those files should be in included agenda.

#+begin_src emacs-lisp
(setq
 org-directory "~/Dropbox/org"
 org-agenda-files '("~/Dropbox/org/"))
#+end_src

Refile targets should include files and down to 9 levels into them.

#+begin_src emacs-lisp
(setq
 org-refile-targets
 (quote ((nil :maxlevel . 9)
  (org-agenda-files :maxlevel . 9))))
#+end_src

And inside those code blocks indentation should be correct
depending on the source language used and have code
highlighting.

#+begin_src emacs-lisp
(setq org-src-tab-acts-natively t)
(setq org-src-preserve-indentation t)
(setq org-src-fontify-natively t)
#+end_src

State changes for todos and also notes should go into a Logbook
drawer:

#+begin_src emacs-lisp
(setq org-log-into-drawer t)
#+end_src

Open URLs in Firefox.

#+begin_src emacs-lisp
(setq
 org-file-apps
 (quote
  ((auto-mode . emacs)
   ("\\.mm\\'" . default)
   ("\\.x?html?\\'" . "google-chrome %s")
   ("\\.pdf\\'" . default))))
#+end_src

Custom capture templates.

#+begin_src emacs-lisp
(setq
 org-capture-templates
 '(("t" "todo" entry (file "todo.org") "* TODO %^{task name}\n%u\n%a\n")
   ("n" "note" entry (file "notes.org") "* %^{heading} %t %^g\n  %?\n")
   ("j" "journal" entry (file "journal.org") "* %U - %^{heading}\n  %?")))
#+end_src

I keep my links in =links.org=, export them to HTML and access
them via browser. This makes the HTML file automatically on
every save.

#+begin_src emacs-lisp
  (defun org-mode-export-links ()
    "Export links document to HTML automatically when 'links.org' is changed"
    (when (equal (buffer-file-name) "~/Dropbox/org/links.org")
      (progn
        (org-html-export-to-html)
        (alert "HTML exported" :severity 'trivial :title "ORG"))))

  (add-hook 'after-save-hook 'org-mode-export-links)
#+end_src

Set =TODO= priorities.

#+begin_src emacs-lisp
(setq
 org-highest-priority ?A
 org-lowest-priority ?C
 org-default-priority ?B)
#+end_src

Set default task sequence/lifecycle, colors and triggers.

#+begin_src emacs-lisp
(setq
  org-todo-keywords
  '((sequence "TODO" "IN-PROGRESS" "WAITING" "HOLD" "|" "DONE" "CANCELLED"))
  org-todo-keyword-faces
  '(("TODO" :foreground "magenta2" :weight bold)
    ("IN-PROGRESS" :foreground "dodger blue" :weight bold)
    ("WAITING" :foreground "orange" :weight bold)
    ("DONE" :foreground "forest green" :weight bold)
    ("HOLD" :foreground "magenta" :weight bold)
    ("CANCELLED" :foreground "forest green" :weight bold)
    ("BUG" :foreground "red" :weight bold)
    ("UNTESTED" . "purple"))
  org-todo-state-tags-triggers
  '(("CANCELLED" ("CANCELLED" . t))
    ("WAITING" ("WAITING" . t))
    ("HOLD" ("WAITING") ("HOLD" . t))
    (done ("WAITING") ("HOLD"))
    ("TODO" ("WAITING") ("CANCELLED") ("HOLD"))
    ("IN-PROGRESS" ("WAITING") ("CANCELLED") ("HOLD"))
    ("DONE" ("WAITING") ("CANCELLED") ("HOLD"))))
#+end_src

Do not dim blocked tasks.

#+begin_src emacs-lisp
(setq org-agenda-dim-blocked-tasks nil)
#+end_src

Compact the block agenda view.

#+begin_src emacs-lisp
(setq org-agenda-compact-blocks t)
#+end_src

Hide =DONE= items.

#+begin_src emacs-lisp
(setq
 org-agenda-skip-scheduled-if-done t
 org-agenda-skip-deadline-if-done t)
#+end_src

Set a 30 day span, instead of a week view.

#+begin_src emacs-lisp
(setq
 org-agenda-start-day "-3d"
 org-agenda-span 30)
#+end_src

Omit empty days in the agenda.

#+begin_src emacs-lisp
(setq org-agenda-show-all-dates nil)
#+end_src

Disable pre-warnings.

#+begin_src emacs-lisp
(setq org-deadline-warning-days 0)
#+end_src

Hide the time grid by default.

#+begin_src emacs-lisp
(setq org-agenda-use-time-grid nil)
#+end_src

Make the agenda schedule prettier.

#+begin_src emacs-lisp
(setq
 org-agenda-prefix-format
 '((agenda . " %i %-12t% s %b\n")
   (timeline . "  % s")
   (todo . " %i %-12:c")
   (tags . " %i %-12:c")
   (search . " %i %-12:c")))
#+end_src

Next comes the ~:config~ section.

#+begin_src emacs-lisp
:config
(require 'org)
#+end_src

Makes inline latex previews bigger.

#+begin_src emacs-lisp
(setq
 org-format-latex-options
 (plist-put org-format-latex-options :scale 1.7))
#+end_src

**** Keybindings

Fix moving between windows.

#+begin_src emacs-lisp
(nmap 'org-mode-map
 "C-k" 'windmove-up
 "C-j" 'windmove-down)
#+end_src

Other useful keybindings.

#+begin_src emacs-lisp
(nmap
  :prefix my/leader
  "t L" 'org-toggle-link-display
  "o" 'org-todo-list
  "O" 'counsel-org-goto-all
  "c" 'counsel-org-capture
  "k" 'org-narrow-to-subtree)
(mmap 'org-agenda-mode-map
  "C-c C-l" 'org-agenda-log-mode)
:delight "org")
#+end_src

*** Evil

Supplemental =evil-mode= keybindings to emacs =org-mode=.
See [[https://github.com/Somelauw/evil-org-mode#keybindings][the repo]] for keybindings cheatsheet.

#+begin_src emacs-lisp
(use-package evil-org
 :after (general org)
 :commands
 (evil-org-set-key-theme evil-org-agenda-set-keys)
 :preface
 (defun my/evil-org/setup ()
   (evil-org-set-key-theme)
   (evil-org-agenda-set-keys))
 :hook
 ((org-mode . evil-org-mode)
  (evil-org-mode . my/evil-org/setup))
 :init
 (setq
  evil-org-key-theme
  '(textobjects
    insert
    navigation
    additional
    shift
    todo
    heading))
 :config
 (require 'evil-org-agenda)
 :diminish evil-org-mode)
#+end_src

*** Bullets
**** org-superstar

Prettify headings and plain lists in Org mode. This package is a
direct descendant of =org-bullets=, with most of the code base
completely rewritten.

#+begin_src emacs-lisp
(use-package org-superstar
 :after (org)
 :config
 (org-superstar-configure-like-org-bullets)
 :hook
 (org-mode . org-superstar-mode))
#+end_src

**** org-bullets (disabled)

I use =org-superstart= instead, so it is currently disabled.

#+begin_src emacs-lisp :tangle no
(use-package org-bullets
 :after org
 :hook
 (org-mode . org-bullets-mode))
#+end_src

*** Cliplink

Paste links from clipboard and automatically fetch title.

#+begin_src emacs-lisp
(use-package org-cliplink
  :config
  (nmap 'org-mode-map
    :prefix my/leader
    "L" 'org-cliplink))
#+end_src

*** Pandoc exporter

#+begin_src emacs-lisp
(use-package ox-pandoc)
#+end_src

*** Blogging with hugo

Install =ox-hugo= and enable auto export.

#+begin_src emacs-lisp
(use-package ox-hugo
  :after (ox org-capture)
  :commands (org-hugo-slug)
  :custom
  (org-hugo-delete-trailing-ws nil)
  :config
  ;; Define variable to get rid of 'reference to free variable' warnings.
  (defun my/org-hugo/new-subtree-post ()
    "Returns `org-capture' template string for new blog post.
     See `org-capture-templates' for more information."
    (let*
        ;; Prompt to enter the post title
        ((title (read-from-minibuffer "Post Title: "))
         (lang (read-from-minibuffer "Lang code (e.g. ru-ru): "))
         (date (format-time-string (org-time-stamp-format :long :inactive) (org-current-time)))
         (fname (concat (org-hugo-slug title) "." lang)))
      (mapconcat
       #'identity
       `(
         ,(concat "* TODO " title)
         ":PROPERTIES:"
         ,(concat ":EXPORT_FILE_NAME: " fname)
         ,(concat ":EXPORT_DATE: " date) ;Enter current date and time
         ":END:"
         "%?\n") ; Place the cursor here finally
       "\n")))
  ;; org-capture template to quickly create posts and generate slugs.
  (add-to-list
   'org-capture-templates
   '("b"
     "blog post"
     entry
     (file "~/projects/personal/blog/content-org/posts.org")
     (function my/org-hugo/new-subtree-post))))
#+end_src

*** Slim HTML export (disabled)

=slimhtml= is an emacs =org= mode export backend. It is a set of
transcoders for common =org= elements which outputs minimal =HTML=.

#+begin_src emacs-lisp :tangle no
(use-package htmlize)
(use-package ox-slimhtml)

(defun org-html-export-as-slimhtml
(&optional async subtreep visible-only body-only ext-plist)
  (interactive)
  (org-export-to-buffer 'slimhtml "*slimhtml*"
    async subtreep visible-only body-only ext-plist (lambda () (html-mode))))

(eval-after-load 'org
  `(define-key org-mode-map
     (kbd "s-O")
     (lambda ()
       (interactive)
       (org-html-export-as-slimhtml nil nil nil t)
       (with-no-warnings (mark-whole-buffer))
       ;; TODO: I don't use simpleclip, so need to update this
       ;; (simplecmlip-copy (point-min) (point-max))
       (delete-window))))
#+end_src

*** Org Download

Drag and drop images to =org= files.

#+begin_src emacs-lisp
(use-package org-download
  :config
  ;; Org-download creates links, but I need to change the path
  ;; for my blog. This simple hook runs on every save.
  (defun org-mode-blog-fix-org-downloaded-image-paths ()
    (when (equal (buffer-file-name) "~/projects/personal/blog/content-org/blog.org")
      (progn
        (while (re-search-forward "file:../static" nil t)
          (replace-match "file:"))
        (while (re-search-backward "file:../static" nil t)
          (replace-match "file:")))))

  (add-hook 'after-save-hook 'org-mode-blog-fix-org-downloaded-image-paths)
  :hook
  (dired-mode-hook . org-download-enable))
#+end_src

** LSP
*** Mode

Setup [[https://github.com/emacs-lsp/lsp-mode][lsp-mode]].
[[https://emacs-lsp.github.io/lsp-mode/page/performance/#reporting-performance-problems][Here is how]] to diagnose the performance problems.

#+begin_src emacs-lisp
(use-package lsp-mode
  :after (general projectile)
  :commands (lsp)
  :hook
  (lsp-mode . lsp-lens-mode)
  (lsp-mode . lsp-enable-which-key-integration)
  (c-mode . lsp)
  (c++-mode . lsp)
  :init
  ;; Uncomment to inspect communication between client and the server
  (setq lsp-print-io t)
  (setq lsp-prefer-flymake nil)
  (setq lsp-headerline-breadcrumb-enable t)
  :config
  ;; Determines how often lsp-mode will refresh the highlights, lenses, links, etc while you type.
  (setq lsp-idle-delay 0.500)
  ;; Make sure the logging is switched off
  (setq lsp-log-io nil)
  (setq lsp-completion-provider :capf)
  (dolist (dir '("vendor")) (push dir lsp-file-watch-ignored))
  (nmap
    :prefix my/leader
    "l r" 'lsp-restart-workspace)
  :delight "lsp")
#+end_src

*** LSP UI

#+begin_src emacs-lisp
(use-package lsp-ui
  :after (lsp-mode)
  :commands (lsp-ui-mode general)
  :config
  (add-hook 'lsp-mode-hook 'lsp-ui-mode)
  (add-hook 'lsp-after-open-hook 'lsp-enable-imenu)
  (add-hook 'lsp-ui-doc-frame-hook
    (lambda (frame _w)
      (set-face-attribute 'default frame :font "Hack" :height 100)))
  (setq
   lsp-ui-sideline-enable t
   lsp-ui-sideline-delay 0.5
   ;; Show hover messages in sideline
   lsp-ui-show-hover t
   ;; Show code actions in sideline
   lsp-ui-show-code-actions t
   lsp-enable-completion-at-point t
   lsp-ui-doc-position 'at-point
   lsp-ui-doc-header nil
   lsp-ui-doc-enable nil
   lsp-ui-doc-delay 0.25
   lsp-ui-doc-use-webkit nil
   lsp-ui-doc-include-signature t
   lsp-ui-doc-border "#222"
   lsp-ui-peek-fontify nil
   lsp-ui-peek-expand-function (lambda (xs) (mapcar #'car xs)))
  (nmap 'lsp-ui-mode-map
    :prefix my/leader
    "=" 'lsp-ui-sideline-apply-code-actions)
  (nmap 'haskell-mode-map
    :prefix my/leader
    "i" 'lsp-ui-doc-focus-frame
    "I" 'lsp-ui-imenu
    "t d" 'lsp-ui-doc-mode
    "t s" 'lsp-ui-sideline-mode)
  (general-def 'lsp-ui-peek-mode-map
    "h" 'lsp-ui-peek--select-next-file
    "l" 'lsp-ui-peek--select-prev-file
    "j" 'lsp-ui-peek--select-next
    "k" 'lsp-ui-peek--select-prev))
#+end_src

*** Company LSP

#+begin_src emacs-lisp
(use-package company-lsp
 :after (lsp-mode company)
 ;; :quelpa
 ;; (company-lsp :fetcher github :repo "tigersoldier/company-lsp")
 :commands (company-lsp)
 :init
 (setq
  ;; Don't filter results on the client side
  company-transformers nil
  company-lsp-cache-candidates 'auto
  ;; Fetch completion candidates asynchronously.
  company-lsp-async t
  ;; Enable snippet expansion on completion
  company-lsp-enable-snippet t)
 :config
 (push 'company-lsp company-backends))
#+end_src

*** Ivy

Provides an interactive =ivy= interface to the workspace symbol
functionality offered by =lsp-mode=.

#+begin_src emacs-lisp
(use-package lsp-ivy)
#+end_src

** Makefile

Emacs helpers to run things from makefiles.

- Interactively selecting a make target and running it. Bound to
  ~C-c C-e~ in =makefile-mode= when =makefile-executor-mode= is
  enabled.

- Re-running the last execution. We usually run things in
  Makefiles many times after all! Bound to ~C-c C-c~ in
  =makefile-mode= when =makefile-executor-mode= is enabled.

- Running a makefile target in a dedicated buffer. Useful when
  starting services and other long-running things! Bound to ~C-c
  C-d~ in =makefile-mode= when =makefile-executor-mode= is
  enabled.

- Calculation of variables et.c.; ~$(BINARY)~ will show up as what
  it evaluates to.

- If projectile is installed, execution from any buffer in a
  project. If more than one =Makefile= is found, an interactive
  prompt for one is shown. This is added to the
  projectile-commander on the m key.

#+begin_src emacs-lisp
(use-package makefile-executor
  :config
  (add-hook 'makefile-mode-hook 'makefile-executor-mode))
#+end_src

** Smartparens (disabled)

Minor mode for Emacs that deals with parens pairs and tries to
be smart about it.

#+begin_src emacs-lisp :tangle no
(use-package smartparens
 :commands
 (smartparens-mode
  sp-with-modes
  sp-local-pair
  sp-pair)
 :hook
 ((conf-mode text-mode prog-mode) . smartparens-mode)
 :config
 (use-package smartparens-config
  :ensure nil
  :demand t)
 (sp-local-pair 'minibuffer-inactive-mode "'" nil :actions nil)
 (general-define-key
  :keymaps 'sp-keymap
  "M-F" 'sp-forward-symbol
  "M-B" 'sp-backward-symbol
  "C-M-k" 'sp-kill-sexp
  "C-M-w" 'sp-copy-sexp
  "C-M-t" 'sp-transpose-sexp
  "M-<left>" 'sp-forward-slurp-sexp
  "C-M-<left>" 'sp-forward-barf-sexp
  "M-<right>" 'sp-backward-slurp-sexp
  "C-M-<right>" 'sp-backward-barf-sexp
  "M-D" 'sp-splice-sexp
  "C-M-[" 'sp-select-previous-thing
  "C-M-]" 'sp-select-next-thing
  "C-c s u" 'sp-up-sexp
  "C-c s d" 'sp-down-sexp
  "C-c s t" 'sp-prefix-tag-object
  "C-c s p" 'sp-prefix-pair-object
  "C-c s c" 'sp-convolute-sexp
  "C-c s a" 'sp-absorb-sexp
  "C-c s e" 'sp-emit-sexp
  "C-c s p" 'sp-add-to-previous-sexp
  "C-c s n" 'sp-add-to-next-sexp
  "C-c s j" 'sp-join-sexp
  "C-c s s" 'sp-split-sexp
  "C-c s (" 'sp-wrap-round
  "C-c s [" 'sp-wrap-square
  "C-c s {" 'sp-wrap-curly)
 :diminish smartparens-mode)
#+end_src

** Help
*** Helpful

See the [[https://github.com/Wilfred/helpful][package repo]] for more info.

#+begin_src emacs-lisp
(use-package helpful
 :config
 (nmap
   :prefix my/leader
   "H h" 'helpful-at-point
   "H f" 'helpful-callable
   "H F" 'helpful-function
   "H v" 'helpful-variable
   "H c" 'helpful-command
   "H k" 'helpful-key))
#+end_src

*** Devdocs

Allows to easily search the =DevDocs= documentation.

#+begin_src emacs-lisp
(use-package devdocs
  :config
  (nmap
    :prefix my/leader
    "h h" 'devdocs-search))
#+end_src

** MMM

Provides a minor mode that allows Multiple Major Modes to
coexist in one buffer.

#+begin_src emacs-lisp
(use-package mmm-mode
  :after (haskell-mode)
  :preface
  (defun my/mmm-mode/setup ()
    ;; go into mmm minor mode when class is given
    (make-local-variable 'mmm-global-mode)
    (setq mmm-global-mode 'true))
  :init
  (setq mmm-submode-decoration-level 1)
  :hook
  (haskell-mode . my/mmm-mode/setup)
  :config
#+end_src

Styles for Literate Haskell. [[https://wiki.haskell.org/Literate_programming][Read here]] for more info.

#+begin_src emacs-lisp
(mmm-add-classes
 '((literate-haskell-bird
    :submode text-mode
    :front "^[^>]"
    :include-front true
    :back "^>\\|$")
   (literate-haskell-latex
    :submode literate-haskell-mode
    :front "^\\\\begin{code}"
    :front-offset (end-of-line 1)
    :back "^\\\\end{code}"
    :include-back nil
    :back-offset (beginning-of-line -1))))
#+end_src

#+begin_src emacs-lisp
(setq mmm-submode-decoration-level 0)
#+end_src

Re-fontify sub-mode portions when idle. The manual command for
this is ~mmm-parse-buffer~. If you don't do this, then syntax
highlighting won't work for new regions of Haskell code in the
~\begin{code}...\end{code}~ blocks.

#+begin_src emacs-lisp
(setq mmm-parse-when-idle 't))
#+end_src

** Languages
*** Lisp

#+begin_src emacs-lisp
(use-package lisp-mode
  :ensure nil
  :config
  (put 'use-package 'lisp-indent-function 1)
  (put 'add-hook 'lisp-indent-function 1)
  (put :map 'lisp-indent-function 1))
#+end_src

*** Emacs Lisp
**** Mode

#+begin_src emacs-lisp
(use-package elisp-mode
  :after (general company smartparens)
  :ensure nil
  :preface
  (defun my/emacs-lisp-prettify-symbols-setup ()
    "Prettify `emacs-lisp-mode' specific symbols."
    (dolist (symbol '(("defun"    . ?ƒ)
                      ("defmacro" . ?μ)
                      ("defvar"   . ?ν)
                      ("defconst" . "ν_")))
      (cl-pushnew symbol prettify-symbols-alist :test #'equal)))
  :config
  (nmap 'emacs-lisp-mode-map
    "M-." 'find-function-at-point
    "M-," 'find-variable-at-point)
  (add-to-list 'company-backends 'company-elisp)
  (sp-with-modes 'emacs-lisp-mode
    (sp-local-pair "'" nil :actions nil))
  :hook
  (emacs-lisp-mode . my/emacs-lisp-prettify-symbols-setup))
#+end_src

**** Refs

#+begin_src emacs-lisp
(use-package elisp-refs
  :after elisp-mode)
#+end_src

**** Macrostep

#+begin_src emacs-lisp
(use-package macrostep
 :after elisp-mode
 :demand t
 :commands macrostep-expand
 :mode ("\\*.el\\'" . emacs-lisp-mode)
 :config
 ;; support Macrostep in Evil mode
 (general-define-key
  :keymaps 'macrostep-keymap
  "q" 'macrostep-collapse-all
  "e" 'macrostep-expand)
 (nmap
   :keymaps 'emacs-lisp-mode-map
   :prefix my/leader
   "m e" 'macrostep-expand))
#+end_src

**** Highlight

#+begin_src emacs-lisp
(use-package highlight-defined
 :custom
 (highlight-defined-face-use-itself t)
 :hook
 (emacs-lisp-mode . highlight-defined-mode))
#+end_src

#+begin_src emacs-lisp
(use-package highlight-quoted
 :hook
 (emacs-lisp-mode . highlight-quoted-mode))
#+end_src

#+begin_src emacs-lisp
(use-package highlight-sexp
  :quelpa
  (highlight-sexp :repo "daimrod/highlight-sexp" :fetcher github :version original)
  :hook
  (emacs-lisp-mode . highlight-sexp-mode)
  (lisp-mode . highlight-sexp-mode))
#+end_src

=Prism= package disperses lisp forms (and other languages) into
a spectrum of color by depth.

I've disabled it for now because of error:

~is Error (use-package): prism/:catch: Wrong number of arguments: (3 . 3), 0~

#+begin_src emacs-lisp :tangle no
(use-package anaphora)
(use-package prism
  :after (anaphora)
  :quelpa (prism :fetcher github :repo "alphapapa/prism.el"))
#+end_src

Evaluation Result OverlayS for Emacs Lisp.

#+begin_src emacs-lisp
(use-package eros
 :hook
 (emacs-lisp-mode . eros-mode))
#+end_src

#+begin_src emacs-lisp
(use-package ipretty
  :defer t
  :commands
  (ipretty-mode)
  :config
  (ipretty-mode 1))
#+end_src

Hide package namespace in your =emacs-lisp= code.
For example, it changes ~whatever-mode~ to ~:mode~.

#+begin_src emacs-lisp
(use-package nameless
 :hook
 (emacs-lisp-mode . nameless-mode)
 :custom
 (nameless-global-aliases '())
 (nameless-private-prefix t)
 :config
 (nmap 'emacs-lisp-mode-map
   :prefix my/leader
   "t n" 'nameless-mode))
#+end_src

Improve readability of escape characters in regular expressions.

#+begin_src emacs-lisp
(use-package easy-escape
  :diminish easy-escape-minor-mode
  :hook
  (emacs-lisp-mode . easy-escape-minor-mode))
#+end_src

**** Package lint

A linting library for elisp package metadata.

#+begin_src emacs-lisp
(use-package package-lint)
#+end_src

Flycheck checker for elisp package metadata.

#+begin_src emacs-lisp
(use-package flycheck-package
 :defer t
 :after flycheck
 (flycheck-package-setup))
#+end_src

**** Suggest

Discover functions.

#+begin_src emacs-lisp :tangle yes
(use-package suggest
  :preface
  (defun my/suggest-popup ()
    "Open suggest as a popup."
    (interactive)
    (let* ((window (selected-window))
           (dedicated-flag (window-dedicated-p window)))
      (set-window-dedicated-p window t)
      (suggest)
      (set-window-dedicated-p window dedicated-flag)))
  :config
  (nmap 'emacs-lisp-mode-map
    :prefix my/leader
    "E s" 'my/suggest-popup))
#+end_src

*** Haskell
**** Hasklig (ligatures)

#+begin_src emacs-lisp
(use-package hasklig-mode
  :commands
  (hasklig-mode)
  :delight "hl")
#+end_src

**** Mode

#+begin_src emacs-lisp
(use-package haskell-mode
  :after
  (general company eldoc)
  ;; :quelpa
  ;; (haskell-mode :fetcher github :repo "haskell/haskell-mode")
  :mode
  (("\\.hs\\(-boot\\)?\\'" . haskell-mode)
   ("\\.hcr\\'" . haskell-core-mode)
   ("\\.lhs\\'" . literate-haskell-mode)
   ("\\.cabal\\'" . haskell-cabal-mode)
   ("\\.x\\'" . prog-mode))
  :commands
  (haskell-compile-cabal-build-command
   haskell-interactive-mode-map)
  :preface
  (defun my/display-ctrl-D-as-space ()
    "Display `^D' as newline."
    (interactive)
    (setq buffer-display-table (make-display-table))
    (aset buffer-display-table ?\^D [?\ ]))
  (defun my/haskell-mode/setup ()
    (interactive)
    ;; (setq buffer-face-mode-face '(:family "Hasklig"))
    (buffer-face-mode)
    ;; Treat symbol (e.g. "_") as a word
    (defalias 'forward-evil-word 'forward-evil-symbol)
    ;; (subword-mode 1)
    ;; (eldoc-overlay-mode)       ; annoying
    ;; (haskell-indentation-mode) ; hi2 FTW
    ;; Affects/breaks haskell-indentation-mode
    ;; (setq-local evil-auto-indent nil)
    (with-current-buffer (get-buffer-create "*haskell-process-log*")
      (my/display-ctrl-D-as-space))
    ;; (hasklig-mode)
    (haskell-doc-mode)
    (haskell-collapse-mode)
    (haskell-decl-scan-mode)
    (electric-layout-mode)
    (electric-pair-local-mode)
    (electric-indent-local-mode)
    ;; There are some tools that dont't work with unicode symbols
    ;; I (sometimes) use Hasklig instead
    ;; (turn-on-haskell-unicode-input-method)
    (face-remap-add-relative 'font-lock-doc-face 'font-lock-comment-face))
  (defvar my/haskell-process-use-ghci nil)
  (defvar my/haskell-build-command-use-make nil)
  (defun my/haskell-mode/toggle-build-command ()
    "Toggle the build command"
    (interactive)
    (if my/haskell-build-command-use-make
        (progn
          (setq haskell-compile-cabal-build-command "cd %s && cabal new-build")
          (alert "Setting build command to:\n cabal new-build" :severity 'normal :title "Haskell"))
      (progn
        (setq haskell-compile-cabal-build-command "cd %s && make build")
        (alert "Setting build command to:\n make build" :severity 'normal :title "Haskell"))))
  (defun my/haskell-mode/toggle-process-type ()
    "Toggle GHCi process between cabal and ghci"
    (interactive)
    (if my/haskell-process-use-ghci
        (progn
          ;; You could set it to "cabal-repl" if
          ;; you're using the old cabal workflow
          (setq haskell-process-type 'cabal-new-repl)
          (setq my/haskell-process-use-ghci nil)
          (alert "Using cabal new-repl" :severity 'normal :title "Haskell"))
      (progn
        (setq haskell-process-type 'stack-ghci)
        (setq my/haskell-process-use-ghci t)
        (alert "Using stack ghci" :severity 'normal :title "Haskell"))))
  (defun my/haskell-mode/show-process-log ()
    "Display *haskell-process-log* buffer in other window"
    (interactive)
    (switch-to-buffer-other-window "*haskell-process-log*"))
  :hook
  (haskell-mode . my/haskell-mode/setup)
  :custom
  ;; Enable debug logging to *haskell-process-log* buffer
  (haskell-process-log t)
  ;; Don't generate tags via hasktags after saving
  (haskell-tags-on-save nil)
  ;; Don't run stylish-haskell on the buffer before saving.
  ;; It just inserts a bunch of spaces at the end of the line for no reason
  (haskell-stylish-on-save nil)
  ;; Suggest to add import statements using Hoogle as a backend
  (haskell-process-suggest-hoogle-imports t)
  ;; Suggest to add import statements using Hayoo as a backend
  (haskell-process-suggest-hayoo-imports t)
  ;; Replace SVG image text with actual images
  (haskell-svg-render-images t)
  ;; Don't eliminate the context part in a Haskell type
  (haskell-doc-chop-off-context nil)
  ;; Suggest removing import lines as warned by GHC
  (haskell-process-suggest-haskell-docs-imports t)
  ;; Search for the types of global functions by loading the files
  (haskell-doc-show-global-types t)
  ;; Don't show debugging tips when starting the process
  (haskell-process-show-debug-tips nil)
  ;; Don’t suggest removing import lines as warned by GHC
  ;; It is too annoying, sometimes I want to keep unused imports
  (haskell-process-suggest-remove-import-lines nil)
  ;; Don't suggest adding packages to .cabal file
  (haskell-process-suggest-add-package nil)
  ;; Don't suggest restarting the f*****g process
  (haskell-process-suggest-restart nil)
  ;; Don't suggest adding the OverloadedStrings extensions
  (haskell-process-suggest-overloaded-strings nil)
  ;; Auto import the modules reported by GHC to have been loaded
  (haskell-process-auto-import-loaded-modules t)
  ;; Show things like type info instead of printing to the message area
  ;; haskell-process-use-presentation-mode t
  ;; Don't popup errors in a separate buffer
  (haskell-interactive-popup-errors nil)
  ;; Make haskell-process-log look better
  (haskell-process-args-ghci '("-ferror-spans" "-fhide-source-paths"))
  (haskell-process-args-cabal-repl '("--ghc-options=-ferror-spans -fhide-source-paths"))
  (haskell-process-args-stack-ghci '("--ghci-options=-ferror-spans" "--no-build" "--no-load"))
  (haskell-process-args-cabal-new-repl '("--ghc-options=-ferror-spans -fhide-source-paths"))
  ;; Use "cabal new-repl" as the inferior haskell process
  (haskell-process-type 'cabal-new-repl)
  ;; haskell-process-args-stack-ghci '("--ghci-options=-ferror-spans")
  ;; haskell-compile-cabal-build-command "stack build --no-library-profiling"
  (haskell-compile-cabal-build-command "cd %s && cabal new-build")
  :config
  (add-to-list
   'electric-layout-rules
   '((?\{) (?\} . around)))
  (add-to-list
   'electric-layout-rules
   '((?\[) (?\] . around)))
  ;; Common key bindings
  (nmap '(haskell-mode-map haskell-cabal-mode-map haskell-interactive-mode-map)
    "C-c C-b" 'haskell-compile
    "C-c C-k" 'haskell-interactive-mode-kill
    "C-c C-r" 'haskell-process-restart
    "C-c C-d" 'haskell-cabal-add-dependency
    "C-c C-l" 'haskell-interactive-mode-clear
    "C-c C-h" 'haskell-hoogle
    "C-c SPC" 'haskell-session-change-target
    "C-c C-c" 'my/haskell-mode/show-process-log)
  (nmap '(haskell-mode-map haskell-cabal-mode-map)
    "C-c C-j" 'haskell-interactive-switch)
  (nmap '(haskell-mode-map haskell-interactive-mode-map)
    "C-c c v" 'haskell-cabal-visit-file
    "C-c c b" 'haskell-process-cabal-build
    "C-c c r" 'haskell-process-cabal)
  (nmap 'haskell-compilation-mode-map
    "C-k" 'windmove-up ;; bind it back
    "M-k" 'compilation-previous-error
    "M-j" 'compilation-next-error)
  (nmap 'haskell-mode-map
    "C-c T" 'my/haskell-mode/toggle-process-type
    "C-c b" 'my/haskell-mode/toggle-build-command
    "C-c H" 'haskell-hayoo
    "C-c C-m" 'haskell-auto-insert-module-template
    "C-c ." 'haskell-hide-toggle
    "C-c C-o" 'haskell-process-load-file
    "C-c C-SPC" 'haskell-interactive-copy-to-prompt
    "C-c C-f" 'haskell-mode-stylish-buffer
    "C-c C-t" 'haskell-process-do-type
    "C-c C-i" 'haskell-process-do-info
    ;; Hit it repeatedly to jump between groups of imports
    "C-c C-u" 'haskell-navigate-imports)
  (require 'haskell-interactive-mode)
  (unbind-key "C-j" haskell-interactive-mode-map)
  (nmap 'haskell-interactive-mode-map
    "C-c C-j" 'haskell-interactive-switch-back)
  (imap 'haskell-interactive-mode-map
    "C-c C-l" 'haskell-interactive-mode-clear)
  :delight "hs")
#+end_src

**** Literate Haskell

Remove the hard-coded ~literate-haskell-mode~ activation for
~.lhs~ files that ~haskell-mode~ comes with. In exchange, enable
=LaTeX= mode whenever we open up a ~.lhs~ file. Using
~mmm-mode~, we will activate ~haskell-mode~ in the code
sections.

#+begin_src emacs-lisp
(setq
 auto-mode-alist
 (remove
  (rassoc 'literate-haskell-mode auto-mode-alist)
  auto-mode-alist))

(add-to-list 'auto-mode-alist '("\\.lhs$" . latex-mode))
#+end_src

**** Happy

Emacs major mode for editing Happy filles.

#+begin_src emacs-lisp
(use-package happy-mode
  :after (mmm-mode)
  :quelpa (happy-mode :fetcher github :repo "sergv/happy-mode"))
#+end_src

**** Hi2 (disabled)

#+begin_src emacs-lisp :tangle no
(use-package hi2
 :after haskell-mode
 :init
 (setq
  hi2-layout-offset 2
  hi2-left-offset 2
  hi2-where-post-offset 2)
 :config
 (put 'hi2-where-post-offset 'safe-local-variable 'numberp)
 (put 'hi2-left-offset 'safe-local-variable 'numberp)
 (put 'hi2-layout-offset 'safe-local-variable 'numberp)
 (imap
   'hi2-mode-map
   "<tab>" 'hi2-indent-line)
 :diminish hi2-mode)
#+end_src

**** Hindent (disabled)

Bear in mind that it doesn't support unicode syntax so all your
cool unicode operators will be replaced.

#+begin_src emacs-lisp :tangle no
(use-package hindent
 :after (general haskell-mode)
 :hook
 (haskell-mode . hindent-mode)
 :config
 ;; "r " - reformat
 (vmap 'haskell-mode-map
   "C-c r" 'hindent-reformat-region)
 (nmap 'haskell-mode-map
   "C-c r" 'hindent-reformat-buffer
   "C-c R" 'hindent-reformat-decl)
 :diminish hindent-mode)
#+end_src

**** Ghcid (disabled)

My first attempt to get =ghcid= working inside Emacs.
It works, but I still prefer to run it from inside the terminal.

#+begin_src emacs-lisp :tangle no
(use-package ghcid
  :after (haskell-mode)
  :quelpa
  (ghcid :fetcher url :url "https://raw.githubusercontent.com/vyorkin/ghcid/nixos-bash/plugins/emacs/ghcid.el")
  :preface
  (defun my/ghcid/show-buffer ()
    (interactive)
    (show-buffer (ghcid-buffer-name)))
  (defun my/ghcid/set-arget (ghcid-targ &optional ghcid-test-targ)
    (interactive
     (list
      (completing-read
       "ghcid target: "
       (map 'list
            (lambda (targ)
              (format "%s:%s" (projectile-project-name) targ))
            (haskell-cabal-enum-targets)))
      (completing-read
       "ghcid --test target: " '("--test=main" "--test=Main.main" nil))))
    (setq ghcid-target ghcid-targ)
    (ghcid-kill)
    (ghcid))
  :custom
  ;; :config (setq-local default-directory projectile-project-root)
  (ghcid-target "")
  :config
  (nmap 'haskell-mode-map
    :prefix my/leader
    "#" 'ghcid
    "$" 'ghcid-stop
    "@" 'my/ghcid/set-arget
    "%" 'my/ghcid/show-buffer))
#+end_src

**** Ormolu

Formats Haskell source code using [[https://github.com/tweag/ormolu][ormolu]].

#+begin_src emacs-lisp
(use-package ormolu
  :quelpa
  (ormolu
   :fetcher github
   :repo "vyorkin/ormolu.el")
  :custom
  (ormolu-reformat-buffer-on-save nil)
  :config
  (nmap 'haskell-mode-map
    "C-c r" 'ormolu-format-buffer))
#+end_src

**** Company-cabal

Company-mode completion back-end for =haskell-cabal-mode=.

#+begin_src emacs-lisp
(use-package company-cabal
 :after (haskell-mode company)
 :config
 (add-to-list 'company-backends 'company-cabal))
#+end_src

**** Liquid types (disabled)

Currenly untangled because I don't always use LH.

#+begin_src emacs-lisp :tangle no
(use-package liquid-types
  :after
  (haskell-mode flycheck)
  :config
  (require 'liquid-types)
#+end_src

Configure =flycheck-liquidhs=.

#+begin_src emacs-lisp :tangle no
(add-hook 'haskell-mode-hook
  '(lambda () (flycheck-select-checker 'haskell-liquid)))
(add-hook 'literate-haskell-mode-hook
  '(lambda () (flycheck-select-checker 'haskell-liquid)))
#+end_src

Toggle minor mode on entering Haskell mode.
Currently disabled, too.

#+begin_src emacs-lisp :tangle no
  (add-hook 'haskell-mode-hook
    '(lambda () (liquid-types-mode)))
  (add-hook 'literate-haskell-mode-hook
    '(lambda () (liquid-types-mode)))
#+end_src

#+begin_src emacs-lisp :tangle no
:delight "lh")
#+end_src

**** Hasky-stack

Interface to the Stack Haskell development tool.

#+begin_src emacs-lisp
(use-package hasky-stack
 :after (general haskell-mode)
 :config
 (nmap 'haskell-mode-map
   :prefix my/leader
   "h s" 'hasky-stack-execute
   "h n" 'hasky-stack-new))
#+end_src

**** Hasky-extensions

Toggle Haskell language extensions from Emacs.

#+begin_src emacs-lisp
(use-package hasky-extensions
 :after (general haskell-mode)
 :config
 (nmap 'haskell-mode-map
   :prefix my/leader
   "h e" 'hasky-extensions
   "h d" 'hasky-extensions-browse-docs))
#+end_src

*** PureScript
**** Mode

The PureScript mode.

#+begin_src emacs-lisp
(use-package purescript-mode
 :after (general files)
 :if (executable-find "purs")
 :preface
 (defun my/purescript-emmet ()
   (interactive)
   (let ((start (point))
         (end (save-excursion (beginning-of-line-text) (point))))
     (call-process-region start end "purescript-emmet" t t)))
 :config
 ;; Not needed when installing from melpa
 ;; (require 'purescript-mode-autoloads)
 (imap 'purescript-mode-map
   "C-c C-e" 'my/purescript-emmet))
#+end_src

A new, simple purescript mode for cheap syntax highlighting.

**** New Mode (disabled)

#+begin_src emacs-lisp :tangle no
(use-package purescript-mode
 :quelpa (purescript-mode :fetcher github :repo "justinwoo/new-purescript-mode"))
#+end_src

**** PSC IDE

#+begin_src emacs-lisp
(use-package psc-ide
 :after (general purescript-mode)
 :quelpa
 (psc-ide
   :repo "purescript-emacs/psc-ide-emacs"
   :commit "230101a3d56c9e062c3ce2bf9a4dc077e5607cc0"
   :fetcher github)
 :commands (psc-ide-mode)
 :preface
 (defun my/psc-ide/setup ()
   (setq-local evil-auto-indent nil)
   (psc-ide-mode)
   (turn-on-purescript-unicode-input-method)
   (turn-on-purescript-indentation))
 :hook
 (purescript-mode . my/psc-ide/setup)
 :init
 ;; use the psc-ide server that is
 ;; relative to npm bin directory
 (setq psc-ide-use-npm-bin t)
 :config
 (general-define-key
  :states 'normal
  :keymaps 'psc-ide-mode-map
  "C-t" 'psc-ide-goto-definition
  "C-]" 'psc-ide-goto-definition
  "g d" 'psc-ide-goto-definition)
 :delight "psc-ide")
#+end_src

**** PSCI (disabled)

A major mode to try and improve the purescript repl experience
within emacs.

#+begin_src emacs-lisp :tangle no
(use-package psci
 :disabled
 :after (purescript-mode)
 :hook
 (purescript-mode . inferior-psci-mode)
 :delight "psci")
#+end_src

*** Idris

Idris syntax highlighting, compiler-supported editing,
interactive REPL and more things for Emacs.

#+begin_src emacs-lisp
(use-package idris-mode
  :custom
  (idris-repl-banner-functions '(idris-repl-text-banner))
  (idris-repl-prompt-style 'short)
  :config
  (idris-define-evil-keys)
  (nmap 'idris-mode-map
    "C-c C-h" 'idris-type-search
    "C-c h"   'idris-apropos
    "C-c SPC" 'idris-add-clause
    "C-c C-o" 'idris-load-file
    "C-c C-i" 'idris-info-show
    "C-c C-f" 'idris-list-holes
    "C-c C-j" 'idris-repl))
#+end_src

*** Agda (disabled)

#+begin_src emacs-lisp :tangle no
(use-package agda2-mode
  :demand t
  :load-path "lisp/agda/src/data/emacs-mode"
  :config
  (nmap 'agda2-mode-map
    "gd" 'agda2-goto-definition-keyboard
    "C-c C-SPC" 'agda2-give))
#+end_src

*** ATS/ATS2 (disabled)
**** Mode

ATS2 mode.

#+begin_src emacs-lisp :tangle no
(use-package ats-mode
  :load-path "lisp")
#+end_src

**** Flycheck.

#+begin_src emacs-lisp :tangle no
(use-package flycheck-ats2
 :after (ats-mode))
#+end_src

*** Nix
**** Mode

An emacs major mode for editing nix expressions.

#+begin_src emacs-lisp
(use-package nix-mode
  :after (general)
  :mode ("\\.nix\\'" "\\.nix.in\\'")
  :config
  (nmap 'nix-mode-map
    "C-c r" 'nix-format-buffer)
  :delight "nix")
#+end_src

**** Drv mode

A major mode for viewing Nix derivations (=.drv= files).

#+begin_src emacs-lisp
(use-package nix-drv-mode
  :ensure nix-mode
  :mode "\\.drv\\'")
#+end_src

**** Shell (disabled)

#+begin_src emacs-lisp :tangle no
(use-package nix-shell
  :ensure nix-mode
  :commands (nix-shell-unpack nix-shell-configure nix-shell-build))
#+end_src

**** REPL

#+begin_src emacs-lisp
(use-package nix-repl
  :ensure nix-mode
  :commands (nix-repl))
#+end_src

**** Update fetch

Command for updating fetch declarations in place.

#+begin_src emacs-lisp
(use-package nix-update
  :config
  (nmap 'nix-mode-map
    :prefix my/leader
    "n u" 'nix-update-fetch))
#+end_src

**** Company

Company backend for NixOS options.

#+begin_src emacs-lisp
(use-package company-nixos-options
  :after (company)
  :commands (company-nixos-options)
  :config
  (add-to-list 'company-backends 'company-nixos-options))
#+end_src

**** Sandbox

#+begin_src emacs-lisp
(use-package nix-sandbox)
#+end_src

**** Flycheck (todo)

TODO: https://github.com/travisbhartwell/nix-emacs#flycheck

*** Ocaml
**** Env

#+begin_src emacs-lisp
(defvar my/opam-config/share (string-trim-right (shell-command-to-string "opam config var share")))
#+end_src

**** Tuareg

[[https://github.com/ocaml/tuareg][Tuareg]] is an Emacs OCaml mode.

Provides:
- Syntax highlighting.
- REPL (aka =toplevel=).
- OCaml debugger within Emacs.

Usage:
- Start the OCaml REPL with ~M-x run-ocaml~.
- Run the OCaml debugger with ~M-x ocamldebug FILE~.

#+begin_src emacs-lisp
(use-package tuareg
  :demand t
  :mode
  (("\\.ml[ily]?$" . tuareg-mode)
   ("\\.mly$" . tuareg-menhir)
   ("\\.topml$" . tuareg-mode)
   ("\\.atd$" . tuareg-mode))
  :init
  (setq tuareg-match-patterns-aligned t)
  :hook
  (caml-mode . tuareg-mode)
  :delight "ocaml")
#+end_src

**** Smartparens

#+begin_src emacs-lisp
(with-eval-after-load 'smartparens
  (sp-local-pair 'tuareg-mode "'" nil :actions nil)
  (sp-local-pair 'tuareg-mode "`" nil :actions nil))
#+end_src

**** Merlin

Context sensitive completion for OCaml. Provides modern IDE features.
Implements a minor-mode that is supposed to be used on top of =tuareg-mode=.

See the [[https://github.com/ocaml/merlin][package repo]] for more info.

#+begin_src emacs-lisp
(use-package merlin
  :after (company tuareg)
  :demand t
  :init
  ;; Disable merlin's own error checking
  ;; We'll use flycheck-ocaml for that
  (setq
   ;; merlin-command "/run/current-system/sw/bin/ocamlmerlin"
   merlin-error-after-save nil
   merlin-completion-with-doc t)
  :config
  (add-to-list 'company-backends 'merlin-company-backend)
  (nmap 'merlin-mode-map
    "C-t" 'merlin-locate
    "C-]" 'merlin-locate
    "C-[" 'merlin-pop-stack
    "g d" 'merlin-locate)
  (nmap 'merlin-mode-map
    :prefix my/leader
    "3" 'merlin-occurrences
    "4" 'merlin-jump
    "5" 'merlin-document
    "9" 'merlin-locate-ident
    "0" 'merlin-iedit-occurrences)
  :hook
  ((tuareg-mode caml-mode) . merlin-mode))
#+end_src

**** Merlin eldoc (disabled)

Automatically (without using keybindings) provide information
for the value under point in OCaml and ReasonML files.

#+begin_src emacs-lisp :tangle no
(use-package merlin-eldoc
  :after (merlin)
  :custom
  (eldoc-echo-area-use-multiline-p t)   ; Use multiple lines when necessary
  (merlin-eldoc-max-lines 8)            ; But not more than 8
  (merlin-eldoc-type-verbosity 'min)    ; Don't display verbose types
  (merlin-eldoc-function-arguments t)   ; Show function arguments
  (merlin-eldoc-doc nil)                ; Don't show the documentation
  (merlin-eldoc-occurrences t)          ; Highlight occurences
  :config
  (nmap 'merlin-mode-map
    :prefix my/leader
    "m p" 'merlin-eldoc-jump-to-prev-occurrence
    "m n" 'merlin-eldoc-jump-to-next-occurrence)
  :hook
  ((tuareg-mode reason-mode) . merlin-eldoc-setup))
#+end_src

**** Customizations for =merlin-eldoc=

#+begin_src emacs-lisp
(with-eval-after-load 'merlin-eldoc
  (custom-set-faces
   (set-face-background 'merlin-eldoc-occurrences-face "#111")))
#+end_src

**** Utop

https://github.com/diml/utop#integration-with-emacs

#+begin_src emacs-lisp
(use-package utop
  :after (tuareg)
  :commands
  (utop-command)
  :config
  ;; (setq utop-command "opam config exec utop -- -emacs")
  (setq utop-command "opam config exec -- dune utop . -- -emacs")
  (autoload 'utop-minor-mode "utop" "Minor mode for utop" t)
  (nmap 'merlin-mode-map
    "C-c C-j" 'utop
    "C-c C-o" 'utop-eval-buffer)
  (nmap 'utop-mode-map
    "C-c C-j" 'utop
    "C-c C-SPC" 'utop-eval-phrase)
  :hook
  ((tuareg-mode reason-mode) . utop-minor-mode))
#+end_src

**** Formatting (disabled)

Auto-formatter for OCaml code.

#+begin_src emacs-lisp :tangle no
(use-package ocamlformat
  :after (tuareg)
  :load-path (lambda () (concat my/opam-config/share "emacs/site-lisp"))
  :preface
  (defun my/deactivate-ocamlformat ()
    (interactive)
    (setq ocamlformat-enable 'disable))
  (defun my/activate-ocamlformat ()
    (interactive)
    (setq ocamlformat-enable 'enable))
  :custom
  (ocamlformat-show-errors 'echo)
  (ocamlformat-enable 'enable)
  :config
  (add-hook 'tuareg-mode-hook
    (lambda ()
      (general-define-key
       :states '(normal)
       :keymaps 'tuareg-mode-map
       "C-c r" 'ocamlformat)))

  :hook ((before-save . 'ocamlformat-before-save)))
#+end_src

ocp-indent is disabled, I use ~ocamlformat~ instead

#+begin_src emacs-lisp :tangle no
(use-package ocp-indent
  :after (tuareg)
  :config
  (nmap 'tuareg-mode-map
    "C-c r" 'ocp-indent-buffer))
#+end_src

**** Dune

A [[https://github.com/ocaml/dune][composable build system]] for OCaml.

#+begin_src emacs-lisp
(use-package dune)
#+end_src

**** Flycheck

OCaml support for Flycheck using Merlin.

#+begin_src emacs-lisp
(use-package flycheck-ocaml
 :after (flycheck merlin)
 :demand t
 :commands
 (flycheck-ocaml-setup)
 :config
 ;; Enable flycheck checker
 (flycheck-ocaml-setup))
#+end_src

*** Coq

This configuration relies on the Proof General to be cloned
here: ~~/.emacs.d/lisp/PG~. See the [[https://github.com/ProofGeneral/PG#using-git-manual-compilation-procedure][Proof General docs]] for more
info.

#+begin_src emacs-lisp
(use-package proof-general
  :custom
  (proof-delete-empty-windows t)
  ;; (proof-three-window-mode-policy 'smart)
  ;; see: https://github.com/ProofGeneral/PG/issues/404
  (proof-shrink-windows-tofit t)
  :delight "coq")
#+end_src

#+begin_src emacs-lisp
(use-package coq-mode
  :after (proof-site)
  :ensure nil
  :commands (coq-mode)
  :preface
  (defun my/company-coq/setup ()
    (interactive)
    (setq buffer-face-mode-face '(:family "Fira Code"))
    (setq-local
     prettify-symbols-alist
     '((":=" . ?≜)
       ("Proof." . ?∵)
       ("Qed." . ?■)
       ("Defined." . ?□)
       ("Alpha" . ?Α) ("Beta" . ?Β) ("Gamma" . ?Γ)
       ("Delta" . ?Δ) ("Epsilon" . ?Ε) ("Zeta" . ?Ζ)
       ("Eta" . ?Η) ("Theta" . ?Θ) ("Iota" . ?Ι)
       ("Kappa" . ?Κ) ("Lambda" . ?Λ) ("Mu" . ?Μ)
       ("Nu" . ?Ν) ("Xi" . ?Ξ) ("Omicron" . ?Ο)
       ("Pi" . ?Π) ("Rho" . ?Ρ) ("Sigma" . ?Σ)
       ("Tau" . ?Τ) ("Upsilon" . ?Υ) ("Phi" . ?Φ)
       ("Chi" . ?Χ) ("Psi" . ?Ψ) ("Omega" . ?Ω)
       ("alpha" . ?α) ("beta" . ?β) ("gamma" . ?γ)
       ("delta" . ?δ) ("epsilon" . ?ε) ("zeta" . ?ζ)
       ("eta" . ?η) ("theta" . ?θ) ("iota" . ?ι)
       ("kappa" . ?κ) ("lambda" . ?λ) ("mu" . ?μ)
       ("nu" . ?ν) ("xi" . ?ξ) ("omicron" . ?ο)
       ("pi" . ?π) ("rho" . ?ρ) ("sigma" . ?σ)
       ("tau" . ?τ) ("upsilon" . ?υ) ("phi" . ?φ)
       ("chi" . ?χ) ("psi" . ?ψ) ("omega" . ?ω)))
    (sp-local-pair 'coq-mode "'" nil :actions nil))
  :init
  (setq
   ;; Enable autocompletion for theorem names and
   ;; symbols defined in the libraries we load
   company-coq-live-on-the-edge t
   company-coq-disabled-features '()
  ;; Disable symbol prettification
   company-coq-disabled-features '(prettify-symbols)
   company-coq-dynamic-autocompletion t)
  :config
  (nmap 'coq-mode-map
    "C-C C-t" 'coq-About)
  (nmap 'coq-mode-map
    :prefix my/leader
    "3" 'coq-SearchAbout
    "4" 'coq-Print
    "5" 'coq-LocateNotation
    "6" 'coq-LocateConstant
    "7" 'coq-Inspect
    "8" 'coq-About
    "9" 'coq-Show
    "0" 'coq-Check)
  :hook
  (coq-mode . my/company-coq/setup))
#+end_src

IDE extensions for Proof General's Coq mode: prettification,
autocompletion, snippets, outlines, code folding, jumping to
definition, integrated help, etc.

#+begin_src emacs-lisp
(use-package company-coq
  :after (proof-site coq-mode)
  :commands (company-coq-mode)
  :hook
  (coq-mode . company-coq-mode)
  :config
  (nmap 'coq-mode-map
    "g d" 'company-coq-jump-to-definition))
#+end_src

*** Lean (disabled)

Emacs mode for the Lean theorem prover.
Keybindings: https://github.com/leanprover/lean-mode#key-bindings-and-commands

#+begin_src emacs-lisp :tangle no
(use-package lean-mode)
#+end_src

*** Minizinc

#+begin_src emacs-lisp
(use-package minizinc-mode
  :mode
  ("\\.mzn\\'"))
#+end_src

*** TLA+

#+begin_src emacs-lisp
(use-package tla-mode
  :quelpa
  (tla-mode :fetcher github :repo "ratish-punnoose/tla-mode")
  :mode "\.tla$")
#+end_src

#+begin_src emacs-lisp :tangle no
(use-package polymode)

(use-package tla-pcal-mode
  :after (polymode)
  :quelpa
  (tla-pcal-mode :fetcher github :repo "mrc/tla-tools"))
#+end_src

*** SML

#+begin_src emacs-lisp
(use-package sml-mode
  :quelpa (sml-mode :fetcher github :repo "emacsmirror/sml-mode")
  :mode "\\.sml$"
  :custom
  (sml-indent-level 2)
  :config
  (nmap 'sml-mode-map
    "C-c C-o" 'sml-prog-proc-load-file
    "C-c C-j" 'sml-prog-proc-switch-to))
#+end_src

*** Scheme

#+begin_src emacs-lisp
(use-package geiser
 :after general)

(use-package scheme
 :ensure nil
 :after (geiser)
 :preface
 (defun my/scheme/setup ()
   (geiser-mode t))
 :hook
 (scheme-mode . my/scheme/setup))

(use-package quack
 :after (scheme)
 :config
 (setq
  ;; use emacs-style fontification
  quack-fontify-style 'emacs))
#+end_src

*** Racket

#+begin_src emacs-lisp
(use-package faceup)
(use-package racket-mode
 :after
 (general
  smartparens
  org
  faceup
  geiser)
 :if (executable-find "racket")
 :mode ("\\.rkt[dl]?\\'" . racket-mode)
 :interpreter ("racket" . racket-mode)
 :hook
 (racket-mode . smartparens-mode)
 :init
 (setq
  geiser-scheme-implementation 'racket
  racket-smart-open-bracket-enable t)
 :config
 (add-to-list 'org-babel-load-languages '(racket . t))
 (sp-local-pair 'racket-mode "'" nil :actions nil)
 (sp-local-pair 'racket-mode "`" nil :actions nil))
#+end_src

*** Clojure

#+begin_src emacs-lisp
(use-package clojure-mode
 :after (general company org)
 :defer 1
 :commands
 (define-clojure-indent
  put-clojure-indent)
 :mode
 (("\\.clj\\'" . clojure-mode)
  ("\\.edn\\'" . clojure-mode)
  ("\\.boot\\'" . clojure-mode)
  ("\\.cljs.*\\'" . clojure-mode))
 :init
 (setq inferior-lisp-program "lein repl")
 :config
 (add-to-list 'org-babel-load-languages '(clojure . t))
 (nmap 'clojure-mode-map
   :prefix my/leader
   "C s" 'cider-start-http-server
   "C r" 'cider-refresh
   "C u" 'cider-user-ns
   "C R" 'cider-restart)
 (define-clojure-indent (fact 1))
 (define-clojure-indent (facts 1)))
#+end_src

#+begin_src emacs-lisp
(use-package clojure-mode-extra-font-locking
 :after (clojure-mode)
 :defer 1
 :init
 (font-lock-add-keywords
  nil
  '(("(\\(facts?\\)"
     (1 font-lock-keyword-face))
    ("(\\(background?\\)"
     (1 font-lock-keyword-face)))))
#+end_src

#+begin_src emacs-lisp
(use-package cider
 :after (clojure-mode)
 :defer 1
 :commands (cider-mode)
 :custom
 (cider-repl-result-prefix ";; => ")
 :init
 (setq
  ;; go right to the REPL buffer when it's finished connecting
  cider-repl-pop-to-buffer-on-connect t
  ;; when there's a cider error, show its buffer and switch to it
  cider-show-error-buffer t
  cider-auto-select-error-buffer t
  cider-repl-history-file "~/.emacs.d/cider-history"
  cider-repl-wrap-history t)
 :hook
 (clojure-mode . clojure-mode))
#+end_src

#+begin_src emacs-lisp
(use-package kibit-helper
 :defer 1)
#+end_src

#+begin_src emacs-lisp
(use-package flycheck-clojure
  :after (flycheck clojure-mode)
  :defer 1
  :commands
  (flycheck-clojure-setup)
  :config
  (eval-after-load 'flycheck '(flycheck-clojure-setup)))
#+end_src

*** Scala
**** Mode

Enable scala-mode for highlighting, indentation and motion
commands.

#+begin_src emacs-lisp
(use-package scala-mode
 :after (general)
 :if (executable-find "scala")
 :interpreter
 ("scala" . scala-mode)
 :hook
  (scala-mode . lsp))
#+end_src

**** Sbt

Enable ==sbt-mode= for executing =sbt= commands.

#+begin_src emacs-lisp
(use-package sbt-mode
  :commands sbt-start sbt-command
  :config
  ;; WORKAROUND: https://github.com/ensime/emacs-sbt-mode/issues/31
  ;; allows using SPACE when in the minibuffer
  (substitute-key-definition
   'minibuffer-complete-word
   'self-insert-command
   minibuffer-local-completion-map)
   ;; sbt-supershell kills sbt-mode:  https://github.com/hvesalai/emacs-sbt-mode/issues/152
   (setq sbt:program-options '("-Dsbt.supershell=false"))
)
#+end_src

**** LSP

Add metals backend for lsp-mode.

#+begin_src emacs-lisp
(use-package lsp-metals
  :config (setq lsp-metals-treeview-show-when-views-received t))
#+end_src

*** Kotlin

#+begin_src emacs-lisp
(use-package kotlin-mode)
#+end_src

#+begin_src emacs-lisp
(use-package flycheck-kotlin
 :after (kotlin-mode flycheck)
 :commands
 (flycheck-kotlin-setup)
 :config
 (flycheck-kotlin-setup))
#+end_src

*** Rust
**** rustic

Rust development environment for Emacs.

#+begin_src emacs-lisp
(use-package rustic)
#+end_src

**** rust-mode (disabled)

#+begin_src emacs-lisp :tangle no
(use-package rust-mode
 :after (company general)
 :if (executable-find "rustc")
 :commands (rust-mode)
 :config
 ;; enable rust-mode for .lalrpop files
 (add-to-list 'auto-mode-alist '("\\.lalrpop\\'" . rust-mode))
 (general-define-key
  :keymaps 'rust-mode-map
  "TAB" 'company-indent-or-complete-common
  "C-c C-b" 'rust-compile
  "C-c <tab>" 'rust-format-buffer))
#+end_src

**** racer (disabled)

Some of key bindings are provided by ==evil-collection=.

#+begin_src emacs-lisp :tangle no
(use-package racer
 :after rust-mode
 :demand t
 :commands racer-mode
 :hook
 ((racer-mode . eldoc-mode)
  (racer-mode . company-mode)
  (rust-mode . racer-mode)))
#+end_src

**** cargo (disabled)

#+begin_src emacs-lisp :tangle no
(use-package cargo
 :after (general rust-mode)
 :config
 (nmap 'rust-mode-map
   :prefix my/leader
   "c ." 'cargo-process-repeat
   "c c" 'cargo-process-clean
   "c b" 'cargo-process-build
   "c c" 'cargo-process-check
   "c d" 'cargo-process-doc
   "c e" 'cargo-process-bench
   "c f" 'cargo-process-current-test
   "c f" 'cargo-process-fmt
   "c i" 'cargo-process-init
   "c n" 'cargo-process-new
   "c o" 'cargo-process-current-file-tests
   "c s" 'cargo-process-search
   "c u" 'cargo-process-update
   "c x" 'cargo-process-run
   "c X" 'cargo-process-run-example
   "t" 'cargo-process-test))
#+end_src

**** company-racer (disabled)

#+begin_src emacs-lisp :tangle no
(use-package company-racer
 :after (racer company)
 :config
 (add-to-list 'company-backends 'company-racer))
#+end_src

**** flycheck-rust (disabled)

#+begin_src emacs-lisp :tangle no
(use-package flycheck-rust
  :config
  (with-eval-after-load 'rust-mode
    (add-hook 'flycheck-mode-hook #'flycheck-rust-setup)))
#+end_src

*** Prolog

#+begin_src emacs-lisp
(use-package prolog
 :ensure nil
 :preface
 (defun my/mercury-mode/setup ()
   (electric-indent-mode -1))
 :commands
 (prolog-mode mercury-mode)
 :hook
 (mercury-mode . my/mercury-mode/setup)
 :mode
 (("\\.pl\\'" . prolog-mode)
  ("\\.m\\'" . mercury-mode))
 :init
 (setq prolog-system 'swi))
#+end_src

TODO: add https://github.com/flycheck/flycheck-mercury

*** Dhall

#+begin_src emacs-lisp
(use-package dhall-mode
 :custom
 (dhall-format-at-save t)
 :mode "\\.dhall\\'")
#+end_src

*** Terraform
**** Mode

#+begin_src emacs-lisp
 (use-package terraform-mode
  :hook (terraform-mode . terraform-format-on-save-mode))
#+end_src

**** Company

#+begin_src emacs-lisp
 (use-package company-terraform
  :after (terraform company)
  :commands
  (company-terraform-init)
  :config
  (company-terraform-init))
#+end_src

*** SQL

#+begin_src emacs-lisp
(use-package format-sql
 :after (general)
 :config
 (vmap 'sql-mode-map
   "C-c R" 'format-sql-region)
 (nmap 'sql-mode-map
   "C-c r" 'format-sql-buffer))
#+end_src

#+begin_src emacs-lisp
(use-package sqlup-mode
  :after (general)
  :hook
  ;; capitalize keywords in SQL mode
  ;; capitalize keywords in an interactive session (e.g. psql)
  ((sql-mode sql-interactive-mode) . sqlup-mode)
  :config
  (add-to-list 'sqlup-blacklist "name")
  (add-to-list 'sqlup-blacklist "public")
  (add-to-list 'sqlup-blacklist "state")
  (nmap
    :keymaps '(sql-mode-map sql-interactive-mode-map)
    :prefix my/leader
    "S u" 'sqlup-capitalize-keywords-in-region
    "S U" 'sqlup-capitalize-keywords-in-buffer))
#+end_src

*** Json

#+begin_src emacs-lisp
(use-package json-mode
  :mode "\\.bowerrc$")
#+end_src

Other JSON-related packages.

#+begin_src emacs-lisp
(use-package json-navigator)
(use-package json-reformat)
#+end_src

*** Yaml

#+begin_src emacs-lisp
(use-package yaml-mode
 :config
 :delight "yaml")
#+end_src

#+begin_src emacs-lisp
(use-package flycheck-yamllint
 :after (flycheck yaml-mode)
 :commands
 (flycheck-yamllint-setup)
 :config
 (flycheck-yamllint-setup))
#+end_src

*** Toml

#+begin_src emacs-lisp
(use-package toml-mode)
#+end_src

*** Protobuf

#+begin_src emacs-lisp
(use-package protobuf-mode)
#+end_src

*** Emmet

#+begin_src emacs-lisp
(use-package emmet-mode
 :after (general sgml-mode)
 :defer 1
 :commands
 emmet-mode
 :hook
 ((sgml-mode ; auto-start on any markup modes
   css-mode  ; enable css abbreviation
   html-mode
   jade-mode) . emmet-mode)
 :config
 (imap
   "C-x C-o" 'emmet-expand-line)
 :delight "emmet")
#+end_src

*** Python

#+begin_src emacs-lisp
(use-package python-mode
 :preface
 (defun my/python-mode/setup ()
   (mapc (lambda (pair) (push pair prettify-symbols-alist))
         '(("def" . "𝒇")
           ("class" . "𝑪")
           ("and" . "∧")
           ("or" . "∨")
           ("not" . "￢")
           ("in" . "∈")
           ("not in" . "∉")
           ("return" . "⟼")
           ("yield" . "⟻")
           ("for" . "∀")
           ("!=" . "≠")
           ("==" . "＝")
           (">=" . "≥")
           ("<=" . "≤")
           ("[]" . "⃞")
           ("=" . "≝"))))
 :hook
 (python-mode . my/python-mode/setup))
#+end_src

*** Ruby

#+begin_src emacs-lisp
(use-package inf-ruby
 :hook
 ;; automatically switch from common ruby compilation modes
 ;; to interact with a debugger
 (compilation-filter . inf-ruby-auto-enter)
 ;; required to use binding.pry or byebug
 (after-init . inf-ruby-switch-setup))
#+end_src

#+begin_src emacs-lisp
(use-package robe
 :after (company)
 :hook
 (ruby-mode . robe-mode)
 :config
 (add-to-list 'company-backends 'company-robe)
 :delight "robe")
#+end_src

#+begin_src emacs-lisp
(use-package rubocop
 :after (robe)
 :hook
 (ruby-mode . rubocop-mode)
 :delight "rcop")
#+end_src

#+begin_src emacs-lisp
(use-package bundler
 :after general
 :config
 (nmap 'ruby-mode-map
   :prefix my/leader
   "b i" 'bundle-install
   "b c" 'bundle-console
   "b o" 'bundle-outdated
   "b u" 'bundle-update
   "b e" 'bundle-exec))
#+end_src

#+begin_src emacs-lisp
(use-package rbenv
 :commands
 (global-rbenv-mode)
 :preface
 (defun my/rbenv/modeline (current-ruby)
   (append
    '(" ruby [")
    (list (propertize current-ruby 'face 'rbenv-active-ruby-face))
    '("]")))
 :hook
 (ruby-mode . rbenv-use-corresponding)
 :init
 (setq rbenv-modeline-function 'my/rbenv/modeline)
 :config
 (global-rbenv-mode)
 (nmap 'ruby-mode-map
   :prefix "C-c R"
   "c" 'rbenv-use-corresponding
   "u" 'rbenv-use))
#+end_src

#+begin_src emacs-lisp
(use-package rake
 :after (general projectile)
 :init
 (setq rake-completion-system projectile-completion-system)
 :config
 (nmap 'ruby-mode-map
   :prefix my/leader
   "r" 'rake))
#+end_src

#+begin_src emacs-lisp
(use-package rspec-mode)
#+end_src

#+begin_src emacs-lisp
(use-package projectile-rails
 :after projectile
 :commands
 (projectile-rails-global-mode)
 :init
 (setq
  projectile-rails-vanilla-command "bin/rails"
  projectile-rails-spring-command "bin/spring"
  projectile-rails-zeus-command "bin/zeus")
 :config
 (projectile-rails-global-mode)
 :diminish)
#+end_src

*** PHP

#+begin_src emacs-lisp
(use-package php-mode
  :mode "\\.\\(php\\|inc\\)$")
#+end_src

*** Java

#+begin_src emacs-lisp
(use-package gradle-mode
  :hook ((java-mode kotlin-mode) . gradle-mode))
#+end_src

#+begin_src emacs-lisp
(use-package javadoc-lookup)
#+end_src

*** Web
**** Mode

#+begin_src emacs-lisp
(use-package web-mode
  :after (tide)
  :preface
  (defun my/web-mode/setup ()
    (interactive)
    (when (string-equal "tsx" (file-name-extension buffer-file-name))
      (setup-tide-mode)))
  :mode
  (("\\.html?\\'" . web-mode)
   ("\\.html\\.erb\\'" . web-mode)
   ("\\.erb\\'" . web-mode)
   ("\\.djhtml\\'" . web-mode)
   ("\\.tsx\\'" . web-mode)
   ("\\.jsx\\'" . web-mode)
   ("\\.mustache\\'" . web-mode)
   ("\\.jinja\\'" . web-mode)

   ("\\.css\\'" . web-mode)
   ("\\.scss\\'" . web-mode)

   ("\\.[agj]sp\\'" . web-mode)
   ("\\.as[cp]x\\'" . web-mode)
   ("\\.as\\'" . web-mode)

   ("\\.phtml\\'" . web-mode)
   ("\\.tpl\\.php\\'" . web-mode)
   ("\\.php\\'" . web-mode))

  :init
  (setq
   ;; indent HTML automatically
   web-mode-indent-style 2
   ;; offsets
   web-mode-markup-indent-offset 2
   web-mode-css-indent-offset 2
   web-mode-code-indent-offset 2

   web-mode-engines-alist
   '(("\\.jinja\\'"  . "django")
     ("php" . "\\.php[3-5]?"))

   web-mode-enable-auto-pairing t
   web-mode-enable-css-colorization t
   web-mode-enable-current-element-highlight t
   web-mode-enable-current-column-highlight nil)
  :config
  (flycheck-add-mode 'javascript-eslint 'web-mode)
  :hook
  (web-mode . my/web-mode/setup))
#+end_src

**** Cakecrumbs

Display current path for HTML/XML/CSS.

#+begin_src emacs-lisp
(use-package cakecrumbs
  :config
  (cakecrumbs-auto-setup))
#+end_src

**** Company

#+begin_src emacs-lisp
(use-package company-web
 :after company
 :demand t)
#+end_src

*** Styling
**** CSS mode

#+begin_src emacs-lisp
(use-package css-mode)
#+end_src

**** Counsel CSS

#+begin_src emacs-lisp
(use-package counsel-css
  :after counsel
)
#+end_src

**** SCSS mode

#+begin_src emacs-lisp
(use-package scss-mode
 :config
 :delight "scss")
#+end_src

*** Go

#+begin_src emacs-lisp
(use-package go-mode
  :after (company flycheck)
  :if (executable-find "go")
  :preface
  (defun my/go-mode/setup ()
    (add-hook 'before-save-hook 'gofmt-before-save)
    (add-hook 'go-mode-hook 'flycheck-mode)
    (setq-default)
    (setq standard-indent 8)
    (setq tab-width 8)
    (setq indent-tabs-mode 1))
  :mode "\\.go\\'"
  :hook
  (go-mode . my/go-mode/setup))
#+end_src

#+begin_src emacs-lisp
(use-package company-go
 :after (company go-mode)
 :hook
 (go-mode . company-mode)
 :config
 (add-to-list 'company-backends 'company-go))
#+end_src

#+begin_src emacs-lisp
(use-package go-stacktracer)

(use-package go-add-tags)

(use-package go-eldoc
  :hook
  (go-mode . go-eldoc-setup))

(use-package go-gopath)

(use-package go-direx)

(use-package gotest)

(use-package go-playground)
#+end_src

*** TypeScript

TypeScript mode.

#+begin_src emacs-lisp
(use-package typescript-mode
  :preface
  (defun my/typescript-mode/setup ()
    ;; The error messages produced by tsc when its pretty flag
    ;; is turned on include ANSI color escapes, which by default
    ;; compilation-mode does not interpret. In order to get the
    ;; escapes parsed we do the following:
    (require 'ansi-color)
    (defun colorize-compilation-buffer ()
      (ansi-color-apply-on-region compilation-filter-start (point-max)))
    (add-hook 'compilation-filter-hook 'colorize-compilation-buffer))
  :custom
  (typescript-indent-level 2)
  :hook
  (typescript-mode . my/typescript-mode/setup))
#+end_src

TypeScript IDE.

#+begin_src emacs-lisp
(use-package tide
  :after (typescript-mode flycheck company)
  :preface
  (defun my/tide/setup ()
    (interactive)
    (tide-setup)
    (flycheck-mode +1)
    (eldoc-mode +1)
    (tide-hl-identifier-mode +1)
    (company-mode +1))
  :custom
  (tide-format-options
   '(:indentSize 2 :tabSize 2 :indentStyle 2))
  :config
  (flycheck-add-next-checker 'javascript-eslint 'jsx-tide 'append)
  (nmap tide-mode-map
    :prefix my/leader
    "0" 'tide-jsdoc-template)
  :hook
  ((typescript-mode . my/tide/setup)
   (before-save . tide-format-before-save)))
#+end_src

TypeScript REPL.

#+begin_src emacs-lisp
(use-package ts-comint
  :custom
  (ts-comint-program-command "ts-node"))
#+end_src

*** JavaScript
**** tern

#+begin_src emacs-lisp
(use-package tern
 :commands
 (tern-mode)
 :config
 ;; Enable js completion between <script>...</script> etc
 (defadvice company-tern (before web-mode-set-up-ac-sources activate)
   "Set `tern-mode' based on current language before running company-tern."
   (message "advice")
   (if (equal major-mode 'web-mode)
       (let ((web-mode-cur-language (web-mode-language-at-pos)))
         (if (or (string= web-mode-cur-language "javascript")
                 (string= web-mode-cur-language "jsx"))
             (unless tern-mode (tern-mode))
           (if tern-mode (tern-mode -1)))))))
#+end_src

**** npm

#+begin_src emacs-lisp
(use-package npm-mode
 :commands
 (npm-mode npm-global-mode)
 :config
 (npm-global-mode)
 :diminish npm-mode)
#+end_src

**** js2

#+begin_src emacs-lisp
(use-package js2-mode
 :init
 ;; indent step is 2 spaces
 (setq-default js2-basic-offset 2)
 (setq-default js-indent-level 2)
 (setq
  ;; configure indentation
  js2-enter-indents-newline t
  js2-auto-indent-p t
  ;; Idle timeout before reparsing buffer
  js2-idle-timer-delay 0.5
  ;; disable error parsing in favor of Flycheck
  js2-strict-missing-semi-warning nil)
 :commands js2-mode
 :config
 (add-to-list 'auto-mode-alist '("\\.js\\'" . js2-mode))
 :delight "js2")
#+end_src

**** eslintd-fix

A very fast JS linter and fixer.

#+begin_src emacs-lisp
(use-package eslintd-fix
 :hook
 (tide-mode . eslintd-fix-mode))
#+end_src

**** xref-js2

Jump to references/definitions using ag & js2-mode's AST.
See the [[https://github.com/NicolasPetton/xref-js2][repo]] for details.

#+begin_src emacs-lisp
(use-package xref-js2
 :preface
 (defun my/xref-js2/add-backend ()
   (add-hook 'xref-backend-functions
             'xref-js2-xref-backend nil t))
 :hook
 (js2-mode . my/xref-js2/add-backend)
 :config
 (unbind-key "M-." js2-mode-map))
#+end_src

**** js2-refactor

A JavaScript refactoring library.

#+begin_src emacs-lisp
(use-package js2-refactor
 :commands
(js2r-add-keybindings-with-prefix)
 :hook
 (js2-mode . js2-refactor-mode)
 :config
 ;; enable minor mode for js refactoring
 ;; see: https://github.com/magnars/js2-refactor.el#refactorings
 (js2r-add-keybindings-with-prefix "C-c C-j"))
#+end_src

**** prettier

#+begin_src emacs-lisp
(use-package prettier-js
 :hook
 ((js2-mode-hook web-mode-hook) . prettier-js-mode)
 :delight "pr")
#+end_src

**** GraphQL

#+begin_src emacs-lisp
(use-package graphql-mode
 :mode "\\.graphql\\'"
 :custom
 (graphql-url "http://localhost:8000/api/graphql/query"))
#+end_src

*** Vue

#+begin_src emacs-lisp
(use-package vue-mode)
#+end_src

*** Elm

#+begin_src emacs-lisp
(use-package elm-mode
  :custom
  (elm-format-on-save t)
  (elm-package-json "elm.json")
  (elm-tags-exclude-elm-stuff nil)
  (elm-tags-on-save t))
#+end_src

#+begin_src emacs-lisp
(use-package flycheck-elm
 :after (elm-mode flycheck)
 :hook
 (flycheck-mode . flycheck-elm-setup))
#+end_src

*** Nginx

#+begin_src emacs-lisp
(use-package nginx-mode)
#+end_src

*** D

#+begin_src emacs-lisp
(use-package d-mode)
#+end_src

*** C/C++
**** Syntax highlighting

Syntax highlighting support for "Modern C++" - until C++20 and
Technical Specification. This package aims to provide a simple
highlight of the C++ language without dependency.

#+begin_src emacs-lisp
(use-package modern-cpp-font-lock
  :config
  (modern-c++-font-lock-global-mode t))
#+end_src

**** Preprocessor highlighting (disabled)

Highlight C-style preprocessor directives in Emacs.

#+begin_src emacs-lisp :tangle no
(use-package preproc-font-lock
  :config
  (preproc-font-lock-global-mode 1))
#+end_src

*** CMake
*** GLSL

#+begin_src emacs-lisp
(use-package glsl-mode)

(use-package company-glsl)
#+end_src

*** Kconfig

#+begin_src emacs-lisp
(use-package kconfig-mode)
#+end_src

*** Bison (disabled)

Conflicts with =happy-mode=, so make sure to manually enable the
=happy-mode= when working with ~.y~ parser files.

#+begin_src emacs-lisp :tangle no
(use-package bison-mode)
#+end_src

*** Octave

#+begin_src emacs-lisp
(use-package octave
 :after general
 :ensure nil
 ;; Overlaps with mercury-mode
 :mode ("\\.octave\\'" . octave-mode))
#+end_src


#+begin_src emacs-lisp
(use-package cmake-mode
  :mode (("\\.cmake\\'" . cmake-mode)
         ("\\CMakeLists.txt$" . cmake-mode)))

(use-package cmake-font-lock
  :config
  (autoload 'cmake-font-lock-activate "cmake-font-lock" nil t)
  (add-hook 'cmake-mode-hook 'cmake-font-lock-activate))

(use-package eldoc-cmake
  :hook (cmake-mode . eldoc-cmake-enable))
#+end_src

*** Latex

#+begin_src emacs-lisp
(use-package tex
 :demand t
 :ensure auctex
 :config
 (setq-default TeX-engine 'luatex)
 (setq-default TeX-PDF-mode t)
 (setq-default TeX-master nil)
 (setq TeX-view-program-selection '((output-pdf "PDF Tools")))
 (setq reftex-plug-into-AUCTeX t)
 (setq reftex-bibliography-commands '("bibliography" "nobibliography" "addbibresource"))
 (setq reftex-use-external-file-finders t)
 (setq reftex-external-file-finders
       '(("tex" . "kpsewhich -format=.tex %f")
         ("bib" . "kpsewhich -format=.bib %f")))
 (setq reftex-insert-label-flags '("s" "sft" "e"))
 (setq TeX-electric-sub-and-superscrip t)
 (setq TeX-electric-math (cons "\\(" "\\)"))
 :hook
 ((LaTeX-mode . visual-line-mode)
  (LaTeX-mode . turn-on-auto-fill)
  (LaTeX-mode . flyspell-mode)
  (LaTeX-mode . LaTeX-math-mode)
  (LaTeX-mode . turn-on-reftex)
  (TeX-after-compilation-finished-functions
    . TeX-revert-document-buffer)))

(use-package auctex-latexmk
  :hook (LaTeX-mode . auctex-latexmk-setup))
#+end_src

Add company mode support. This package provides completion back-ends for math
unicode symbols and latex tags.

#+begin_src emacs-lisp
(use-package company-math
 :config
 (add-to-list 'company-backends 'company-math-symbols-latex)
 (add-to-list 'company-backends 'company-math-symbols-unicode))
#+end_src

*** Pug

#+begin_src emacs-lisp
(use-package pug-mode)
#+end_src

*** Jade

#+begin_src emacs-lisp
(use-package jade-mode)
#+end_src

*** Haml

#+begin_src emacs-lisp
(use-package haml-mode)
#+end_src

*** Slim

#+begin_src emacs-lisp
(use-package slim-mode
 :delight "slim")
#+end_src

*** Lua

#+begin_src emacs-lisp
(use-package lua-mode
  :preface
  (defun my/lua-prettify-symbols-setup ()
    (dolist (symbol '(("~="  . (?\s (Br . Bl) ?\s (Bc . Bc) ?≠))
                      ("function"  . ?ƒ)
                      ("math.huge" . ?∞)))
      (cl-pushnew symbol prettify-symbols-alist :test #'equal)))
  :mode "\\.lua\\'"
  :custom
  (lua-documentation-function 'eww)
  :init
  (setq lua-indent-level 2)
  :hook
  (lua-mode . my/lua-prettify-symbols-setup))

(use-package lua-block
  :after (lua-mode)
  :quelpa
  (lua-block
   :fetcher url
   :url "http://www.emacswiki.org/emacs/download/lua-block.el")
  :init
  (autoload 'lua-block-mode "lua-block" nil t)
  :delight "lb")
#+end_src

*** Arduino

#+begin_src emacs-lisp
(use-package arduino-mode
  :init
  ;; TODO: irony-arduino-includes-options
  ;; see https://github.com/yuutayamada/company-arduino/issues/5
  ;; TODO: https://github.com/yuutayamada/company-arduino/issues/6
  :config
  ;; Activate irony-mode on arduino-mode
  (add-hook 'arduino-mode-hook 'irony-mode)
  (nmap
    :prefix my/leader
    "a v" 'arduino-verify
    "a u" 'arduino-upload
    "a i" 'arduino-install-library
    "a m" 'arduino-menu
    "a n" 'arduino-sketch-new
    "a b" 'arduino-install-boards
    "a s" 'arduino-serial-monitor))
#+end_src

#+begin_src emacs-lisp
(use-package company-arduino
  :after (irony company company-irony company-c-headers)
  :config
  ;; Add arduino's include options to irony-mode's variable
  (add-hook 'irony-mode-hook 'company-arduino-turn-on)
  ;; Configuration for company-c-headers.el
  ;; The `company-arduino-append-include-dirs' function appends
  ;; Arduino's include directories to the default directories
  ;; if `default-directory' is inside `company-arduino-home'. Otherwise
  ;; just returns the default directories.
  ;; Please change the default include directories accordingly.
  (defun my-company-c-headers-get-system-path ()
    "Return the system include path for the current buffer."
    (let ((default '("/usr/include/" "/usr/local/include/")))
      (company-arduino-append-include-dirs default t)))
  (setq company-c-headers-path-system 'my-company-c-headers-get-system-path))
#+end_src

*** Robots.txt

#+begin_src emacs-lisp
(use-package robots-txt-mode)
#+end_src

*** Dotenv

#+begin_src emacs-lisp
(use-package dotenv-mode
 :config
 (add-to-list 'auto-mode-alist '("\\.env\\..*\\'" . dotenv-mode)))
#+end_src

*** CSV

#+begin_src emacs-lisp
(use-package csv-mode
  :mode "\\.[Cc][Ss][Vv]$"
  :init
  (setq
   ;; default separators for CSV files.
   csv-separators '("," ";" "|" " " "\t")
   ;; number of lines to consider part of header.
   csv-header-lines 1))
#+end_src

*** Api blueprint

#+begin_src emacs-lisp
(use-package apib-mode
  :after general
  :config
  (nmap 'apib-mode-map
    :prefix my/leader
    "z p" 'apib-parse           ; Parse the API Blueprint
    "z v" 'apib-validate        ; Validate the API Blueprint
    "z j" 'apib-get-json        ; Print all generated JSON bodies
    "z s" 'apib-get-json-schema ; Print all generated JSON Schemas
    ))
#+end_src

*** NASM

#+begin_src emacs-lisp
(use-package nasm-mode)
#+end_src

*** IASM

#+begin_src emacs-lisp
(use-package iasm-mode)
#+end_src

*** BNF

#+begin_src emacs-lisp
(use-package bnf-mode
 :mode "\\.bnf\\'")
#+end_src

*** CUDA

#+begin_src emacs-lisp
(use-package cuda-mode
  :mode
  (("\\.cu\\'" . cuda-mode)
   ("\\.cuh\\'" . cuda-mode)))
#+end_src

*** APL

#+begin_src emacs-lisp
(use-package gnu-apl-mode)
(use-package dyalog-mode)
#+end_src

*** Ansible

#+begin_src emacs-lisp
(use-package ansible)
#+end_src

** DAP

Use the Debug Adapter Protocol for running tests and debugging.

#+begin_src emacs-lisp
(use-package dap-mode
  :hook
  (lsp-mode . dap-mode)
  (lsp-mode . dap-ui-mode)
  :config
  (require 'dap-cpptools)
  (dap-mode 1)
  (dap-ui-mode 1)
  (add-hook 'dap-stopped-hook
    (lambda (arg) (call-interactively #'dap-hydra))))
#+end_src

** GDB

When gdb debugging, show the many windows (stack trace, break
points, etc).

#+begin_src emacs-lisp
(use-package gdb-mi
  :ensure nil
  :commands (gdb-many-windows)
  :hook
  (gdb . gdb-many-windows))
#+end_src

** Coverage

Test coverage overlay. Highlights untested lines.

#+begin_src emacs-lisp
(use-package coverlay
  :preface
  (defun my/coverlay-mode-enable ()
    "Turn on `coverlay-mode'."
    (coverlay-minor-mode 1)
    (when (and (buffer-file-name) (not (bound-and-true-p coverlay--loaded-filepath)))
      (let* ((coverage-file
              (concat
               (locate-dominating-file (file-name-directory (buffer-file-name)) "coverage")
               "coverage"
               "/lcov.info")))
        (when (file-exists-p coverage-file)
          (coverlay-watch-file coverage-file)))))
  :custom
  (coverlay:mark-tested-lines nil)
  :diminish coverlay-minor-mode)
#+end_src

** Quickrun

Run command quickly.

#+begin_src emacs-lisp
(use-package quickrun
  :preface
  (defun my/display-ctrl-M-as-newline ()
    "Display `^M' as newline."
    (interactive)
    (setq buffer-display-table (make-display-table))
    (aset buffer-display-table ?\^M [?\n]))
  :hook
  (quickrun--mode . my/display-ctrl-M-as-newline)
  :config
  (nmap
    :prefix my/leader
    "i q" 'quickrun
    "i r" 'quickrun-region
    "i a" 'quickrun-autorun-mode))
#+end_src

** Docker

Emacs integration for Docker. Supports docker containers,
images, volumes, networks, docker-machine and docker-compose.

#+begin_src emacs-lisp
(use-package docker
 :diminish docker-mode
 :config
 (nmap
   :prefix my/leader
   "d" 'docker))
#+end_src

#+begin_src emacs-lisp
(use-package docker-compose-mode)
#+end_src

** Kubernetes

#+begin_src emacs-lisp
(use-package timonier
 :after general
 :init
 (setq timonier-k8s-proxy "http://localhost:8001"))
#+end_src

** HTTP

#+begin_src emacs-lisp
(use-package restclient
 :mode
 ("\\.http\\'" . restclient-mode))
#+end_src

#+begin_src emacs-lisp
(use-package restclient-test
 :hook
 (restclient-mode-hook . restclient-test-mode))
#+end_src

#+begin_src emacs-lisp
(use-package ob-restclient
 :after (org restclient)
 :init
 (org-babel-do-load-languages
  'org-babel-load-languages
  '((restclient . t))))
#+end_src

#+begin_src emacs-lisp
(use-package company-restclient
 :after (company restclient)
 :custom-update
 (company-backends '(company-restclient)))
#+end_src

** Statistics
*** SLOC

#+begin_src emacs-lisp
(use-package sloc
  :quelpa (sloc :fetcher github :repo "leoliu/sloc.el"))
#+end_src

*** Uptimes (disabled)

Provides a simple system for tracking and displaying the uptimes of Emacs
sessions.

#+begin_src emacs-lisp :tangle no
(use-package uptimes)
#+end_src

*** Keyfreq (disabled)

Measure how many time you execute commands. The [[http://blog.binchen.org/posts/how-to-be-extremely-efficient-in-emacs.html][following blog post explains
this in details]].

#+begin_src emacs-lisp :tangle no
(use-package keyfreq
 :commands
 (keyfreq-mode keyfreq-autosave-mode)
 :config
 (keyfreq-mode 1)
 (keyfreq-autosave-mode 1))
#+end_src

*** Wakatime (disabled)

Setup wakatime.

#+begin_src emacs-lisp :tangle no
(use-package wakatime-mode
 :init
 (setq
  wakatime-api-key (getenv "WAKATIME_API_KEY")
  wakatime-cli-path "/run/current-system/sw/bin/wakatime")
 :config
 (global-wakatime-mode)
 :diminish wakatime-mode)
#+end_src

** Hydra
*** Install

Install hydra.

#+begin_src emacs-lisp
(use-package hydra
 :config
#+end_src

*** Text scale

Define hydra for text scaling.

#+begin_src emacs-lisp
(defhydra hydra-zoom ()
  "
 ^Zoom^
───────────────────────────────────
"
  ("=" text-scale-increase nil)
  ("k" text-scale-increase "in")
  ("j" text-scale-decrease "out")
  ("+" text-scale-increase "in")
  ("-" text-scale-decrease "out")
  ("0" (text-scale-set 0) "remove"))
#+end_src

*** Window management

Define window management hydra.

#+begin_src emacs-lisp
(defhydra hydra-window ()
  "
Movement^^      ^Split^            ^Resize^
────────────────────────────────────────────────────
_h_ ←          _v_ertical          _H_ X←
_j_ ↓          _s_ horizontal      _J_ X↓
_k_ ↑          _U_ undo            _K_ X↑
_l_ →          _R_ reset           _L_ X→
_f_ollow       _d_lt Other
_SPC_ cancel   _o_nly this
"
  ("h" windmove-left)
  ("j" windmove-down)
  ("k" windmove-up)
  ("l" windmove-right)

  ("H" evil-window-increase-width)
  ("J" evil-window-increase-height)
  ("K" evil-window-decrease-height)
  ("L" evil-window-decrease-width)

  ("f" follow-mode)
  ("v"
   (lambda ()
     (interactive)
     (split-window-right)
     (windmove-right))
   )
  ("s"
   (lambda ()
     (interactive)
     (split-window-below)
     (windmove-down))
   )
  ("d" delete-window)
  ("o" delete-other-windows)
  ("i" ace-maximize-window)
  ("U"
   (progn
     (winner-undo)
     (setq this-command 'winner-undo))
   )
  ("R" winner-redo)
  ("SPC" nil))
#+end_src

*** Rectangle

#+begin_src emacs-lisp
(defhydra hydra-rectangle ()
  "
^Rectangle^
───────────────────
_m_: mark region
_k_: kill region
_y_: yank region
  "
  ("m" rectangle-mark-mode nil)
  ("y" yank-rectangle nil)
  ("k" kill-rectangle nil)

  ("l" forward-char)
  ("h" backward-char)
  ("j" next-line)
  ("k" previous-line)
  ("0" move-beginning-of-line)
  ("$" move-end-of-line))
#+end_src

*** Flycheck

#+begin_src emacs-lisp
(defhydra hydra-flycheck (:color blue)
  "
  ^
  ^Flycheck^          ^Errors^            ^Checker^
  ^────────^──────────^──────^────────────^───────^─────
  _M_ manual          _<_ previous        _?_ describe
  _v_ verify setup    _>_ next            _d_ disable
  ^^                  _f_ check           _m_ mode
  ^^                  _l_ list            _s_ select
  ^^                  ^^                  ^^
  "
  ("<" flycheck-previous-error :color pink)
  (">" flycheck-next-error :color pink)
  ("?" flycheck-describe-checker)
  ("M" flycheck-manual)
  ("d" flycheck-disable-checker)
  ("f" flycheck-buffer)
  ("l" flycheck-list-errors)
  ("m" flycheck-mode)
  ("s" flycheck-select-checker)
  ("v" flycheck-verify-setup))
#+end_src

*** Yasnippet

#+begin_src emacs-lisp
(defhydra hydra-yasnippet (:color blue :hint nil)
  "
^YASnippets^
───────────────────────
_i_: insert snippet
_v_: visit snippet files
_n_: new
_r_: reload all
  "
  ("i" yas-insert-snippet)
  ("v" yas-visit-snippet-file :color blue)
  ("n" yas-new-snippet)
  ("r" yas-reload-all))
#+end_src

*** Macro

#+begin_src emacs-lisp
(defhydra hydra-macro ()
  "
^Macro^
────────────────────────────
_j_: create new macro
_k_: end creation of new macro
_e_: execute last macro
_n_: insert Counter
  "
  ("j" kmacro-start-macro :color blue)
  ("k" kmacro-end-macro :colocr blue)
  ("e" kmacro-end-or-call-macro-repeat)
  ("n" kmacro-insert-counter))
#+end_src

*** Org
**** Base

#+begin_src emacs-lisp
(defhydra hydra-org/base ()
  "
^Org base^
───────────────
_s_: store link
_l_: insert link

_r_: refile
_t_: insert tag
"
  ("s" org-store-link nil :color blue)
  ("l" org-insert-link nil :color blue)
  ("r" org-refile nil :color blue)
  ("t" org-set-tags-command nil :color blue))
#+end_src

**** Link

#+begin_src emacs-lisp
(defhydra hydra-org/link ()
  "
^Org link^
────────────────────────────────────────────────────────
_i_ backward slurp     _o_ forward slurp    _n_ next link
_j_ backward barf      _k_ forward barf     _p_ previous link
"
  ("i" org-link-edit-backward-slurp)
  ("o" org-link-edit-forward-slurp)
  ("j" org-link-edit-backward-barf)
  ("k" org-link-edit-forward-barf)
  ("n" org-next-link)
  ("p" org-previous-link))
#+end_src

**** Table

#+begin_src emacs-lisp
(defhydra hydra-org/table ()
  "
^Org table^
──────────────────────────────────────────────────────────
_r_ recalculate     _w_ wrap region      _c_ toggle coordinates
_i_ iterate table   _t_ transpose        _D_ toggle debugger
_B_ iterate buffer  _E_ export table     _d_ edit field
_e_ eval formula    _s_ sort lines       ^^
"
  ("E" org-table-export :color blue)
  ("s" org-table-sort-lines)
  ("d" org-table-edit-field)
  ("e" org-table-eval-formula)
  ("r" org-table-recalculate)
  ("i" org-table-iterate)
  ("B" org-table-iterate-buffer-tables)
  ("w" org-table-wrap-region)
  ("D" org-table-toggle-formula-debugger)
  ("t" org-table-transpose-table-at-point)
  ("c" org-table-toggle-coordinate-overlays :color blue))
#+end_src

**** Babel

#+begin_src emacs-lisp
(defhydra hydra-org/babel ()
  "
^Org babel^
────────────────────────────────────────────────
_n_ next       _i_ info           _I_ insert header
_p_ prev       _c_ check          _e_ examplify region
_h_ goto head  _E_ expand         ^^
^^             _s_ split          ^^
^^             _r_ remove result  ^^
"
  ("i" org-babel-view-src-block-info)
  ("I" org-babel-insert-header-arg)
  ("c" org-babel-check-src-block :color blue)
  ("s" org-babel-demarcate-block :color blue)
  ("n" org-babel-next-src-block)
  ("p" org-babel-previous-src-block)
  ("E" org-babel-expand-src-block :color blue)
  ("e" org-babel-examplify-region :color blue)
  ("r" org-babel-remove-result :color blue)
  ("h" org-babel-goto-src-block-head))
#+end_src

*** Help

#+begin_src emacs-lisp
(defhydra hydra-help ()
  "
^Help^
────────────────────────────
_f_: callable
_F_: function
_v_: variable
_c_: command
_k_: key
_m_: mode
_l_: view lossage
_M_: view messages
"
  ("M" view-echo-area-messages :color blue)
  ("f" helpful-callable :color blue)
  ("F" helpful-function :color blue)
  ("v" helpful-variable :color blue)
  ("c" helpful-command :color blue)
  ("k" helpful-key :color blue)
  ("m" describe-mode :color blue)
  ("l" view-lossage :color blue))
#+end_src

*** Packages

#+begin_src emacs-lisp
(defhydra hydra-packages ()
  "
^Packages^
─────────────────
_l_: list
_r_: refresh
_d_: delete
_e_: describe
_i_: install
_f_: install file
"
  ("l" package-list-packages)
  ("r" package-refresh-contents)
  ("d" package-delete)
  ("i" package-install)
  ("f" package-install-file)
  ("e" describe-package))
#+end_src

*** Search online

#+begin_src emacs-lisp
(defhydra hydra-search-online ()
  "
  ^
^Search Online^
────────────────────────────────────────────────────────
_g_: google         _y_: youtube           _t_: twitter
_t_: translate      _u_: urban dictionary  _m_: melpa
_w_: wikipedia      _h_: hoogle            _M_: google maps
_s_: stack overflow _H_: hackage           _i_: google images
_G_: github         _p_: pursuit           _d_: duckduckgo
  "
  ("g" engine/search-google)
  ("t" engine/search-google-translate)
  ("w" engine/search-wikipedia)
  ("s" engine/search-stack-overflow)
  ("G" engine/search-github)
  ("y" engine/search-youtube)
  ("u" engine/search-urban-dictionary)
  ("h" engine/search-hoogle)
  ("H" engine/search-hackage)
  ("p" engine/search-pursuit)
  ("m" engine/search-melpa)
  ("T" engine/search-twitter)
  ("M" engine/search-google-maps)
  ("i" engine/search-google-images)
  ("d" engine/search-duckduckgo))
#+end_src

*** Key bindings

#+begin_src emacs-lisp
(nmap
  :prefix my/leader+
  "f" 'hydra-flycheck/body
  "h" 'hydra-help/body
  "o o" 'hydra-org/base/body
  "o l" 'hydra-org/link/body
  "o t" 'hydra-org/table/body
  "o b" 'hydra-org/babel/body
  "r" 'hydra-rectangle/body
  "m" 'hydra-macro/body
  "p" 'hydra-packages/body
  "C-SPC" 'hydra-search-online/body
  "S" 'hydra-yasnippet/body
  "t" 'hydra-zoom/body
  "w" 'hydra-window/body))
#+end_src

** Calendar

#+begin_src emacs-lisp
(use-package calfw-org)
(use-package calfw
 :demand t
 :config
 (require 'calfw-org)

 ;; Nicer Unicode characters
 (setq
   cfw:fchar-junction ?╋
   cfw:fchar-vertical-line ?┃
   cfw:fchar-horizontal-line ?━
   cfw:fchar-left-junction ?┣
   cfw:fchar-right-junction ?┫
   cfw:fchar-top-junction ?┯
   cfw:fchar-top-left-corner ?┏
   cfw:fchar-top-right-corner ?┓))
#+end_src

** Reading
*** PDF

Emacs support library for =PDF= files.
You should run the following command manually:

#+begin_src sh :tangle no
M-x pdf-tools-install RET
#+end_src

To check if everything is ok:

#+begin_src sh :tangle no
M-x pdf-info-check-epdfinfo RET
#+end_src

#+begin_src emacs-lisp
(use-package pdf-tools
 :mode ("\\.pdf\\'" . pdf-view-mode)
 :commands
 (pdf-tools-install)
 :config
 (pdf-tools-install)
 (setq-default pdf-view-display-size 'fit-width))
#+end_src

*** Djvu

#+begin_src emacs-lisp
(use-package djvu)
#+end_src

*** EPUB

Major mode for reading ~EPUB~'s in Emacs.

#+begin_src emacs-lisp
(use-package nov
  :preface
  (defun my/nov-delayed-render-setup ()
    (run-with-idle-timer 0.2 nil 'nov-render-document))
  (defun my/nov-fringes-setup ()
    "Hide the fringes for `nov-mode'."
    (set-window-fringes (get-buffer-window) 0 0 nil))
  :mode
  ("\\.epub$" . nov-mode)
  :hook
  (nov-mode . my/nov-delayed-render-setup)
  (nov-mode . my/nov-fringes-setup))
#+end_src

** Translation

This package allows to translate the strings using Google Translate service
directly from Emacs.

#+begin_src emacs-lisp
(use-package google-translate
 :after (general)
 :demand t
 :init
 (setq google-translate-default-source-language "en")
 (setq google-translate-default-target-language "ru")
 :config
 (require 'google-translate-default-ui)
 (nmap
  :prefix "C-c"
  "t" 'google-translate-at-point
  "q" 'google-translate-query-translate))
#+end_src

** Tools
*** Net utils

#+begin_src emacs-lisp
(use-package net-utils
 :config
 (nmap
   :prefix my/leader
   "N p" 'ping
   "N i" 'ifconfig
   "N w" 'iwconfig
   "N n" 'netstat
   "N a" 'arp
   "N r" 'route
   "N h" 'nslookup-host
   "N d" 'dig
   "N s" 'smbclient))
#+end_src

*** IX

#+begin_src emacs-lisp
(use-package ix
 :after general
 :config
 (nmap
   :prefix my/leader
   "G i i" 'ix
   "G i b" 'ix-browse
   "G i d" 'ix-delete))
#+end_src

*** Direnv

Provides [[https://direnv.net/][=direnv=]] integration for Emacs.

#+begin_src emacs-lisp
(use-package direnv
 :demand t
 :custom
 (direnv-always-show-summary t)
 :config
 (direnv-mode))
#+end_src

*** carbon-now-sh

#+begin_src emacs-lisp
(use-package carbon-now-sh
  :config
  (vmap 'prog-mode
    "C-c c" 'carbon-now-sh))
#+end_src

** Search
*** Engine mode

#+begin_src emacs-lisp
(use-package engine-mode
 :config
 (engine-mode t)
 (engine/set-keymap-prefix (kbd "C-SPC C-SPC"))
 (defengine amazon
   "http://www.amazon.com/s/ref=nb_sb_noss?url=search-alias%3Daps&field-keywords=%s")
 (defengine duckduckgo
   "https://duckduckgo.com/?q=%s"
   :keybinding "d")
 (defengine github
   "https://github.com/search?q=%s&type=Code"
   :keybinding "G")
 (defengine google
   "http://www.google.com/search?ie=utf-8&oe=utf-8&q=%s"
   :keybinding "g")
 (defengine google-images
   "http://www.google.com/images?hl=en&source=hp&biw=1440&bih=795&gbv=2&aq=f&aqi=&aql=&oq=&q=%s"
   :keybinding "i")
 (defengine google-maps
   "http://maps.google.com/maps?q=%s"
   :docstring "Mappin' it up."
   :keybinding "M")
 (defengine melpa
   "https://melpa.org/#/?q=%s"
   :docstring "Searching on melpa"
    :keybinding "m")
 (defengine project-gutenberg
   "http://www.gutenberg.org/ebooks/search/?query=%s")
 (defengine rfcs
   "http://pretty-rfc.herokuapp.com/search?q=%s")
 (defengine stack-overflow
   "https://stackoverflow.com/search?q=%s"
   :keybinding "s"
   :docstring "Search Stack Overlow")
 (defengine google-translate
   "https://translate.google.com/#view=home&op=translate&sl=en&tl=ru&text=%s"
   :keybinding "t")
 (defengine twitter
   "https://twitter.com/search?q=%s"
   :keybinding "T")
 (defengine wikipedia
   "http://www.wikipedia.org/search-redirect.php?language=en&go=Go&search=%s"
   :keybinding "w"
   :docstring "Searchin' the wikis.")
 (defengine pursuit
   "https://pursuit.purescript.org/search?q=%s"
   :keybinding "p")
 (defengine hoogle
   "https://www.haskell.org/hoogle/?hoogle=%s"
   :keybinding "h")
 (defengine hackage
   "https://hackage.haskell.org/packages/search?terms=%s"
   :keybinding "H")
 (defengine hayoo
   "http://hayoo.fh-wedel.de/?query=%s")
 (defengine wiktionary
   "https://www.wikipedia.org/search-redirect.php?family=wiktionary&language=en&go=Go&search=%s")
 (defengine wolfram-alpha
   "http://www.wolframalpha.com/input/?i=%s")
 (defengine urban-dictionary
   "https://www.urbandictionary.com/define.php?term=%s"
   :keybinding "u")
 (defengine youtube
   "http://www.youtube.com/results?aq=f&oq=&search_query=%s"
   :keybinding "y"))
#+end_src

*** Counsel web

#+begin_src emacs-lisp
(use-package counsel-web
 :after (general counsel)
 :quelpa
 (counsel-web :fetcher github :repo "mnewt/counsel-web")
 :custom
 (counsel-web-search-action 'browse-url)
 (counsel-web-suggest-function 'counsel-web-suggest--google)
 (counsel-web-search-function 'counsel-web-search--google)
 :config
 (nmap
  :prefix my/leader
  "S" 'counsel-web-suggest))
#+end_src

*** Google this (disabled)

I use =engine-mode= instead.

#+begin_src emacs-lisp :tangle no
(use-package google-this
 :diminish google-this-mode
 :config
 (google-this-mode 1)
 (nmap
   :prefix my/leader
   "G" google-this-mode-submap))
#+end_src

*** Stack exchange

#+begin_src emacs-lisp
 (use-package sx
  :config
  (nmap
    :prefix my/leader
    "' q" 'sx-tab-all-questions
    "' i" 'sx-inbox
    "' o" 'sx-open-link
    "' u" 'sx-tab-unanswered-my-tags
    "' a" 'sx-ask
    "' s" 'sx-search))
#+end_src

** Delight

#+begin_src emacs-lisp
(use-package delight
 :config
 (delight
  '((emacs-lisp-mode "elisp" :major)
    (ruby-mode "ruby" :major)
    (elixir-mode "ex" elixir)
    (alchemist-mode "al" alchemist)
    (alchemist-hex-mode "alhex" alchemist)
    (alchemist-test-mode "altest" alchemist)
    (rust-mode "rs" rust)
    (purescript-mode "purs" purescript)
    (javascript-mode "js" js)
    (eldoc-mode "eldoc" eldoc)
    (outline-minor-mode "outl" outline)
    ;; (hi-lock-mode "hi" hi-lock)
    (subword-mode "sw" subword))))
#+end_src

*** Engine mode

#+begin_src emacs-lisp
(use-package engine-mode
 :config
 (engine-mode t)
 (engine/set-keymap-prefix (kbd "C-SPC C-SPC"))
 (defengine amazon
   "http://www.amazon.com/s/ref=nb_sb_noss?url=search-alias%3Daps&field-keywords=%s")
 (defengine duckduckgo
   "https://duckduckgo.com/?q=%s"
   :keybinding "d")
 (defengine github
   "https://github.com/search?q=%s&type=Code"
   :keybinding "G")
 (defengine google
   "http://www.google.com/search?ie=utf-8&oe=utf-8&q=%s"
   :keybinding "g")
 (defengine google-images
   "http://www.google.com/images?hl=en&source=hp&biw=1440&bih=795&gbv=2&aq=f&aqi=&aql=&oq=&q=%s"
   :keybinding "i")
 (defengine google-maps
   "http://maps.google.com/maps?q=%s"
   :docstring "Mappin' it up."
   :keybinding "M")
 (defengine melpa
   "https://melpa.org/#/?q=%s"
   :docstring "Searching on melpa"
    :keybinding "m")
 (defengine project-gutenberg
   "http://www.gutenberg.org/ebooks/search/?query=%s")
 (defengine rfcs
   "http://pretty-rfc.herokuapp.com/search?q=%s")
 (defengine stack-overflow
   "https://stackoverflow.com/search?q=%s"
   :keybinding "s"
   :docstring "Search Stack Overlow")
 (defengine google-translate
   "https://translate.google.com/#view=home&op=translate&sl=en&tl=ru&text=%s"
   :keybinding "t")
 (defengine twitter
   "https://twitter.com/search?q=%s"
   :keybinding "T")
 (defengine wikipedia
   "http://www.wikipedia.org/search-redirect.php?language=en&go=Go&search=%s"
   :keybinding "w"
   :docstring "Searchin' the wikis.")
 (defengine pursuit
   "https://pursuit.purescript.org/search?q=%s"
   :keybinding "p")
 (defengine hoogle
   "https://www.haskell.org/hoogle/?hoogle=%s"
   :keybinding "h")
 (defengine hackage
   "https://hackage.haskell.org/packages/search?terms=%s"
   :keybinding "H")
 (defengine hayoo
   "http://hayoo.fh-wedel.de/?query=%s")
 (defengine wiktionary
   "https://www.wikipedia.org/search-redirect.php?family=wiktionary&language=en&go=Go&search=%s")
 (defengine wolfram-alpha
   "http://www.wolframalpha.com/input/?i=%s")
 (defengine urban-dictionary
   "https://www.urbandictionary.com/define.php?term=%s"
   :keybinding "u")
 (defengine youtube
   "http://www.youtube.com/results?aq=f&oq=&search_query=%s"
   :keybinding "y"))
#+end_src

*** Counsel web

#+begin_src emacs-lisp
(use-package counsel-web
 :after (general)
 :quelpa
 (counsel-web :fetcher github :repo "mnewt/counsel-web")
 :custom
 (counsel-web-search-action 'browse-url)
 (counsel-web-suggest-function 'counsel-web-suggest--google)
 (counsel-web-search-function 'counsel-web-search--google)
 :config
 (nmap
  :prefix my/leader
  "S" 'counsel-web-suggest))
#+end_src

*** Google this

I use =engine-mode= instead.

#+begin_src emacs-lisp :tangle no
(use-package google-this
 :diminish google-this-mode
 :config
 (google-this-mode 1)
 (nmap
   :prefix my/leader
   "G" google-this-mode-submap))
#+end_src

*** Stack exchange

#+begin_src emacs-lisp
 (use-package sx
  :config
  (nmap
    :prefix my/leader
    "' q" 'sx-tab-all-questions
    "' i" 'sx-inbox
    "' o" 'sx-open-link
    "' u" 'sx-tab-unanswered-my-tags
    "' a" 'sx-ask
    "' s" 'sx-search))
#+end_src

** Diminish

Hide minor modes to save space.

#+begin_src emacs-lisp
(use-package diminish
 :config
 (diminish 'abbrev-mode)
 (diminish 'auto-fill-function)
 (with-eval-after-load 'face-remap (diminish 'buffer-face-mode))
 (with-eval-after-load 'with-editor (diminish 'with-editor-mode))
 (eval-after-load "purescript-indentation" '(diminish 'purescript-indentation-mode))
 (eval-after-load "dired" '(diminish 'dired-omit-mode))
 (eval-after-load "hideshow" '(diminish 'hs-minor-mode))
 (eval-after-load "eldoc" '(diminish 'eldoc-mode))
 (eval-after-load "hi-lock" '(diminish 'hi-lock-mode)))
#+end_src

* Finalize

Set the frequency of garbage collections to big number (100mb)
like most of the popular starter kits like
Spacemacs/Doom/Prelude, etc do:

#+begin_src emacs-lisp
(setq gc-cons-threshold 100000000) ;; 100mb
#+end_src

Increase the amount of data which Emacs reads from the process.
Again the emacs default is too low 4k considering that the some
of the language server responses are in 800k - 3M range.

#+begin_src emacs-lisp
(setq read-process-output-max (* 1024 1024)) ;; 1mb
#+end_src
